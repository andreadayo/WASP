<?xml version='1.0' encoding='UTF-8'?>
<examples>

<example id="0">
<nl lang="en">
شهرهای ویرجینیا را به من بده .
</nl>
<nl lang="zh">
Weijiniya zhou you shenme chengshi ?
</nl>
<syn lang="en">
(S شهرهای ویرجینیا را به من بده .)
</syn>
<syn lang="zh">
(S Weijiniya zhou you shenme chengshi)
</syn>
<augsyn lang="en">
(S Give-[Query:0] me-[Query:0] the cities-[City:1] in-[City:2] Virginia-[StateName:4])
</augsyn>
<mrl lang="geo-funql">
answer(city(loc_2(stateid('virginia'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(city(A),loc(A,B),const(B,stateid(virginia))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="4"> *n:StateName -> ({ ' virginia ' }) </node>
</mrl-parse>
</example>

<example id="1">
<nl lang="en">
بلند ترین نقاط اطراف میسیسیپی کدامند ؟
</nl>
<nl lang="es">
que son los puntos altos de los estados rodeando a mississippi ?
</nl>
<nl lang="ja">
mishishippi no mawari ni aru shuu no takai chiten wa nan desu ka ?
</nl>
<nl lang="tr">
mississippi yi saran eyaletlerin yuksek noktalari nelerdir ?
</nl>
<syn lang="en">
(S بلند ترین نقاط اطراف میسیسیپی کدامند ؟)
</syn>
<syn lang="es">
(S que son los puntos altos de los estados rodeando a mississippi)
</syn>
<syn lang="ja">
(S mishishippi no mawari ni aru shuu no takai chiten wa nan desu ka)
</syn>
<syn lang="tr">
(S mississippi yi saran eyaletlerin yuksek noktalari nelerdir)
</syn>
<augsyn lang="en">
(S What are-[Query:0] the high-[Place:1] points-[Place:1] of-[Place:1] states-[State:2] surrounding-[State:3] Mississippi-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(high_point_1(state(next_to_2(stateid('mississippi')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(high_point(B,A),state(B),next_to(B,C),const(C,stateid(mississippi))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Place ) }) </node>
<node id="1"> *n:Place -> ({ high_point_1 ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' mississippi ' }) </node>
</mrl-parse>
</example>

<example id="2">
<nl lang="en">
رودخانه های آرکانزاس را نام ببر .
</nl>
<nl lang="es">
nombra los rios en arkansas .
</nl>
<nl lang="ja">
aakansaa no kawa wo agete kudasai .
</nl>
<nl lang="tr">
arkansas daki nehirlerin isimlerini ver .
</nl>
<syn lang="en">
(S رودخانه های آرکانزاس را نام ببر .)
</syn>
<syn lang="es">
(S nombra los rios en arkansas)
</syn>
<syn lang="ja">
(S aakansaa no kawa wo agete kudasai)
</syn>
<syn lang="tr">
(S arkansas daki nehirlerin isimlerini ver)
</syn>
<augsyn lang="en">
(S Name-[Query:0] the rivers-[River:1] in-[River:2] Arkansas-[StateName:4])
</augsyn>
<mrl lang="geo-funql">
answer(river(loc_2(stateid('arkansas'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(river(A),loc(A,B),const(B,stateid(arkansas))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:River ) }) </node>
<node id="1"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ loc_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="4"> *n:StateName -> ({ ' arkansas ' }) </node>
</mrl-parse>
</example>

<example id="3">
<nl lang="en">
همه رودخانه های کلورادو را نام ببر .
</nl>
<syn lang="en">
(S همه رودخانه های کلورادو را نام ببر .)
</syn>
<augsyn lang="en">
(S Name-[Query:0] all-[River:1] the rivers-[River:1] in-[River:2] Colorado-[StateName:4])
</augsyn>
<mrl lang="geo-funql">
answer(river(loc_2(stateid('colorado'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(river(A),loc(A,B),const(B,stateid(colorado))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:River ) }) </node>
<node id="1"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ loc_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="4"> *n:StateName -> ({ ' colorado ' }) </node>
</mrl-parse>
</example>

<example id="4">
<nl lang="en">
میتوانی به من بگویی مرکز تگزاس کجاست ؟
</nl>
<syn lang="en">
(S میتوانی به من بگویی مرکز تگزاس کجاست ؟)
</syn>
<augsyn lang="en">
(S Can-[Query:0] you-[Query:0] tell-[Query:0] me-[Query:0] the capital-[City:1] of-[City:2] Texas-[StateName:4])
</augsyn>
<mrl lang="geo-funql">
answer(capital(loc_2(stateid('texas'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(capital(A),loc(A,B),const(B,stateid(texas))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ capital ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="4"> *n:StateName -> ({ ' texas ' }) </node>
</mrl-parse>
</example>

<example id="5">
<nl lang="en">
میتوانی به من بگویی بلند ترین نقطه ایالت ارگون کدامست ؟
</nl>
<syn lang="en">
(S میتوانی به من بگویی بلند ترین نقطه ایالت ارگون کدامست ؟)
</syn>
<augsyn lang="en">
(S Could-[Query:0] you-[Query:0] tell-[Query:0] me-[Query:0] what-[Query:0] is-[Query:0] the highest-[Place:1] point-[Place:2] in-[Place:3] the state-[State:4] of-[State:4] Oregon-[StateName:6])
</augsyn>
<mrl lang="geo-funql">
answer(highest(place(loc_2(state(stateid('oregon'))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,highest(A,(place(A),loc(A,B),state(B),const(B,stateid(oregon)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Place ) }) </node>
<node id="1"> *n:Place -> ({ highest ( *n:Place ) }) </node>
<node id="2"> *n:Place -> ({ place ( *n:Place ) }) </node>
<node id="3"> *n:Place -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="6"> *n:StateName -> ({ ' oregon ' }) </node>
</mrl-parse>
</example>

<example id="6">
<nl lang="en">
میتوانی به من بگویی بلند ترین نقطه ایالت ارگون کدامست ؟
</nl>
<syn lang="en">
(S میتوانی به من بگویی بلند ترین نقطه ایالت ارگون کدامست ؟)
</syn>
<augsyn lang="en">
(S Count-[Num:1] the states-[State:2] which have-[State:3] elevations-[State:3] lower-[Place:4] than-[Place:4] what-[Place:5] Alabama-[StateName:7] has-[Place:5])
</augsyn>
<mrl lang="geo-funql">
answer(count(state(low_point_2(lower_2(low_point_1(stateid('alabama')))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,count(B,(state(B),low_point(B,C),lower(C,D),low_point(E,D),const(E,stateid(alabama))),A))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ count ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ low_point_2 ( *n:Place ) }) </node>
<node id="4"> *n:Place -> ({ lower_2 ( *n:Place ) }) </node>
<node id="5"> *n:Place -> ({ low_point_1 ( *n:State ) }) </node>
<node id="6"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="7"> *n:StateName -> ({ ' alabama ' }) </node>
</mrl-parse>
</example>

<example id="7">
<nl lang="en">
تمام ایالتهای ایالات متحده را نام ببر .
</nl>
<syn lang="en">
(S تمام ایالتهای ایالات متحده را نام ببر .)
</syn>
<augsyn lang="en">
(S Give-[Query:0] me-[Query:0] all-[State:1] the states-[State:1] of-[State:2] USA-[CountryName:4])
</augsyn>
<mrl lang="geo-funql">
answer(state(loc_2(countryid('usa'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),loc(A,B),const(B,countryid(usa))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ loc_2 ( *n:Country ) }) </node>
<node id="3"> *n:Country -> ({ countryid ( *n:CountryName ) }) </node>
<node id="4"> *n:CountryName -> ({ ' usa ' }) </node>
</mrl-parse>
</example>

<example id="8">
<nl lang="en">
شهرهای تگزاس را به من بده .
</nl>
<syn lang="en">
(S شهرهای تگزاس را به من بده .)
</syn>
<augsyn lang="en">
(S Give-[Query:0] me-[Query:0] the cities-[City:1] in-[City:2] Texas-[StateName:4])
</augsyn>
<mrl lang="geo-funql">
answer(city(loc_2(stateid('texas'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(city(A),loc(A,B),const(B,stateid(texas))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="4"> *n:StateName -> ({ ' texas ' }) </node>
</mrl-parse>
</example>

<example id="9">
<nl lang="en">
شهرهای ایالات متحده را به من بده .
</nl>
<syn lang="en">
(S شهرهای ایالات متحده را به من بده .)
</syn>
<augsyn lang="en">
(S Give-[Query:0] me-[Query:0] the cities-[City:1] in-[City:2] USA-[CountryName:4])
</augsyn>
<mrl lang="geo-funql">
answer(city(loc_2(countryid('usa'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(city(A),loc(A,B),const(B,countryid(usa))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ loc_2 ( *n:Country ) }) </node>
<node id="3"> *n:Country -> ({ countryid ( *n:CountryName ) }) </node>
<node id="4"> *n:CountryName -> ({ ' usa ' }) </node>
</mrl-parse>
</example>

<example id="10">
<nl lang="en">
شهرهای ویرجینیا را به من بده .
</nl>
<nl lang="es">
dame las ciudades en virginia .
</nl>
<nl lang="ja">
baajinia no toshi wa nan desu ka ?
</nl>
<nl lang="tr">
virginia daki sehirlerin isimlerini ver .
</nl>
<syn lang="en">
(S شهرهای ویرجینیا را به من بده .)
</syn>
<syn lang="es">
(S dame las ciudades en virginia)
</syn>
<syn lang="ja">
(S baajinia no toshi wa nan desu ka)
</syn>
<syn lang="tr">
(S virginia daki sehirlerin isimlerini ver)
</syn>
<augsyn lang="en">
(S Give-[Query:0] me-[Query:0] the cities-[City:1] in-[City:2] Virginia-[StateName:4])
</augsyn>
<mrl lang="geo-funql">
answer(city(loc_2(stateid('virginia'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(city(A),loc(A,B),const(B,stateid(virginia))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="4"> *n:StateName -> ({ ' virginia ' }) </node>
</mrl-parse>
</example>

<example id="11">
<nl lang="en">
شهرهایی را که در تگزاس هستند را به من بده .
</nl>
<syn lang="en">
(S شهرهایی را که در تگزاس هستند را به من بده .)
</syn>
<augsyn lang="en">
(S Give-[Query:0] me-[Query:0] the cities-[City:1] which are-[City:2] in-[City:2] Texas-[StateName:4])
</augsyn>
<mrl lang="geo-funql">
answer(city(loc_2(stateid('texas'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(city(A),loc(A,B),const(B,stateid(texas))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="4"> *n:StateName -> ({ ' texas ' }) </node>
</mrl-parse>
</example>

<example id="12">
<nl lang="en">
دریاچه های کالیفرنیا را به من بده .
</nl>
<syn lang="en">
(S دریاچه های کالیفرنیا را به من بده .)
</syn>
<augsyn lang="en">
(S Give-[Query:0] me-[Query:0] the lakes-[Place:1] in-[Place:2] California-[StateName:4])
</augsyn>
<mrl lang="geo-funql">
answer(lake(loc_2(stateid('california'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(lake(A),loc(A,B),const(B,stateid(california))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Place ) }) </node>
<node id="1"> *n:Place -> ({ lake ( *n:Place ) }) </node>
<node id="2"> *n:Place -> ({ loc_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="4"> *n:StateName -> ({ ' california ' }) </node>
</mrl-parse>
</example>

<example id="13">
<nl lang="en">
بزرگترین استان را به من بده .
</nl>
<nl lang="es">
dame el estado mas grande ?
</nl>
<nl lang="ja">
mottomo ookii shuu wa nan desu ka ?
</nl>
<nl lang="tr">
en genis eyaletin ismini ver .
</nl>
<syn lang="en">
(S بزرگترین استان را به من بده .)
</syn>
<syn lang="es">
(S dame el estado mas grande)
</syn>
<syn lang="ja">
(S mottomo ookii shuu wa nan desu ka)
</syn>
<syn lang="tr">
(S en genis eyaletin ismini ver)
</syn>
<augsyn lang="en">
(S Give-[Query:0] me-[Query:0] the largest-[State:1] state-[State:2])
</augsyn>
<mrl lang="geo-funql">
answer(largest(state(all)))
</mrl>
<mrl lang="geo-prolog">
answer(A,largest(A,state(A)))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ largest ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="14">
<nl lang="en">
بلند ترین رودخانه ای که از ایالات متحده میگذرد را به من بده .
</nl>
<syn lang="en">
(S بلند ترین رودخانه ای که از ایالات متحده میگذرد را به من بده .)
</syn>
<augsyn lang="en">
(S Give-[Query:0] me-[Query:0] the longest-[River:1] river-[River:2] that passes-[River:3] through-[River:3] the US-[CountryName:5])
</augsyn>
<mrl lang="geo-funql">
answer(longest(river(traverse_2(countryid('usa')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,longest(A,(river(A),traverse(A,B),const(B,countryid(usa)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:River ) }) </node>
<node id="1"> *n:River -> ({ longest ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ traverse_2 ( *n:Country ) }) </node>
<node id="4"> *n:Country -> ({ countryid ( *n:CountryName ) }) </node>
<node id="5"> *n:CountryName -> ({ ' usa ' }) </node>
</mrl-parse>
</example>

<example id="15">
<nl lang="en">
تعداد رودخانه های کالیفرنیا را به من بده .
</nl>
<syn lang="en">
(S تعداد رودخانه های کالیفرنیا را به من بده .)
</syn>
<augsyn lang="en">
(S Give-[Query:0] me-[Query:0] the number-[Num:1] of-[Num:1] rivers-[River:2] in-[River:3] California-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(count(river(loc_2(stateid('california')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,count(B,(river(B),loc(B,C),const(C,stateid(california))),A))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ count ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' california ' }) </node>
</mrl-parse>
</example>

<example id="16">
<nl lang="en">
ایالات همجوار یوتاه را به من بده .
</nl>
<syn lang="en">
(S ایالات همجوار یوتاه را به من بده .)
</syn>
<augsyn lang="en">
(S Give-[Query:0] me-[Query:0] the states-[State:1] that border-[State:2] Utah-[StateName:4])
</augsyn>
<mrl lang="geo-funql">
answer(state(next_to_2(stateid('utah'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),next_to(A,B),const(B,stateid(utah))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="4"> *n:StateName -> ({ ' utah ' }) </node>
</mrl-parse>
</example>

<example id="17">
<nl lang="en">
وسعت آلاسکا چقدر است ؟
</nl>
<syn lang="en">
(S وسعت آلاسکا چقدر است ؟)
</syn>
<augsyn lang="en">
(S How-[Num:1] big-[Num:1] is-[Num:1] Alaska-[StateName:3])
</augsyn>
<mrl lang="geo-funql">
answer(size(stateid('alaska')))
</mrl>
<mrl lang="geo-prolog">
answer(A,(size(B,A),const(B,stateid(alaska))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ size ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="3"> *n:StateName -> ({ ' alaska ' }) </node>
</mrl-parse>
</example>

<example id="18">
<nl lang="en">
وسعت ماساچوست چقدر است ؟
</nl>
<syn lang="en">
(S وسعت ماساچوست چقدر است ؟)
</syn>
<augsyn lang="en">
(S How-[Num:1] big-[Num:1] is-[Num:1] Massachusetts-[StateName:3])
</augsyn>
<mrl lang="geo-funql">
answer(size(stateid('massachusetts')))
</mrl>
<mrl lang="geo-prolog">
answer(A,(size(B,A),const(B,stateid(massachusetts))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ size ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="3"> *n:StateName -> ({ ' massachusetts ' }) </node>
</mrl-parse>
</example>

<example id="19">
<nl lang="en">
وسعت نیومکزیکو چقدر است ؟
</nl>
<syn lang="en">
(S وسعت نیومکزیکو چقدر است ؟)
</syn>
<augsyn lang="en">
(S How-[Num:1] big-[Num:1] is-[Num:1] New-[StateName:3] Mexico-[StateName:3])
</augsyn>
<mrl lang="geo-funql">
answer(size(stateid('new mexico')))
</mrl>
<mrl lang="geo-prolog">
answer(A,(size(B,A),const(B,stateid('new mexico'))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ size ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="3"> *n:StateName -> ({ ' new mexico ' }) </node>
</mrl-parse>
</example>

<example id="20">
<nl lang="en">
وسعت نورث داکوتا چقدر است ؟
</nl>
<syn lang="en">
(S وسعت نورث داکوتا چقدر است ؟)
</syn>
<augsyn lang="en">
(S How-[Num:1] big-[Num:1] is-[Num:1] North-[StateName:3] Dakota-[StateName:3])
</augsyn>
<mrl lang="geo-funql">
answer(size(stateid('north dakota')))
</mrl>
<mrl lang="geo-prolog">
answer(A,(size(B,A),const(B,stateid('north dakota'))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ size ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="3"> *n:StateName -> ({ ' north dakota ' }) </node>
</mrl-parse>
</example>

<example id="21">
<nl lang="en">
وسعت تگزاس چقدر است ؟
</nl>
<nl lang="es">
que tamano esta texas ?
</nl>
<nl lang="ja">
tekisasu no okisa wa nan desu ka ?
</nl>
<nl lang="tr">
texas en kadar buyuktur ?
</nl>
<syn lang="en">
(S وسعت تگزاس چقدر است ؟)
</syn>
<syn lang="es">
(S que tamano esta texas)
</syn>
<syn lang="ja">
(S tekisasu no okisa wa nan desu ka)
</syn>
<syn lang="tr">
(S texas en kadar buyuktur)
</syn>
<augsyn lang="en">
(S How-[Num:1] big-[Num:1] is-[Num:1] Texas-[StateName:3])
</augsyn>
<mrl lang="geo-funql">
answer(size(stateid('texas')))
</mrl>
<mrl lang="geo-prolog">
answer(A,(size(B,A),const(B,stateid(texas))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ size ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="3"> *n:StateName -> ({ ' texas ' }) </node>
</mrl-parse>
</example>

<example id="22">
<nl lang="en">
وسعت شهر نیویورک چقدر است ؟
</nl>
<syn lang="en">
(S وسعت شهر نیویورک چقدر است ؟)
</syn>
<augsyn lang="en">
(S How-[Num:1] big-[Num:1] is-[Num:1] the city-[City:2] of-[City:2] New-[CityName:4] York-[CityName:4])
</augsyn>
<mrl lang="geo-funql">
answer(size(city(cityid('new york', _))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(size(B,A),const(B,cityid('new york',_))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ size ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ cityid ( *n:CityName , _ ) }) </node>
<node id="4"> *n:CityName -> ({ ' new york ' }) </node>
</mrl-parse>
</example>

<example id="23">
<nl lang="en">
ارتفاع بلندترین نقطه در میان همه ایالت ها کدامست ؟
</nl>
<syn lang="en">
(S ارتفاع بلندترین نقطه در میان همه ایالت ها کدامست ؟)
</syn>
<augsyn lang="en">
(S How-[Num:1] high-[Num:1] are-[Num:1] the highest-[Place:2] points-[Place:3] of-[Place:4] all-[State:5] the states-[State:5])
</augsyn>
<mrl lang="geo-funql">
answer(elevation_1(highest(place(loc_2(state(all))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(elevation(B,A),highest(B,(place(B),loc(B,C),state(C)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ elevation_1 ( *n:Place ) }) </node>
<node id="2"> *n:Place -> ({ highest ( *n:Place ) }) </node>
<node id="3"> *n:Place -> ({ place ( *n:Place ) }) </node>
<node id="4"> *n:Place -> ({ loc_2 ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="24">
<nl lang="en">
ارتفاع قله گوادالوپ چقدر است ؟
</nl>
<syn lang="en">
(S ارتفاع قله گوادالوپ چقدر است ؟)
</syn>
<augsyn lang="en">
(S How-[Num:1] high-[Num:1] is-[Num:1] Guadalupe-[PlaceName:3] Peak-[PlaceName:3])
</augsyn>
<mrl lang="geo-funql">
answer(elevation_1(placeid('guadalupe peak')))
</mrl>
<mrl lang="geo-prolog">
answer(A,(elevation(B,A),const(B,placeid('guadalupe peak'))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ elevation_1 ( *n:Place ) }) </node>
<node id="2"> *n:Place -> ({ placeid ( *n:PlaceName ) }) </node>
<node id="3"> *n:PlaceName -> ({ ' guadalupe peak ' }) </node>
</mrl-parse>
</example>

<example id="25">
<nl lang="en">
ارتفاع قله مک کینلی چقدر است ؟
</nl>
<syn lang="en">
(S ارتفاع قله مک کینلی چقدر است ؟)
</syn>
<augsyn lang="en">
(S How-[Num:1] high-[Num:1] is-[Num:1] Mount-[PlaceName:3] McKinley-[PlaceName:3])
</augsyn>
<mrl lang="geo-funql">
answer(elevation_1(placeid('mount mckinley')))
</mrl>
<mrl lang="geo-prolog">
answer(A,(elevation(B,A),const(B,placeid('mount mckinley'))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ elevation_1 ( *n:Place ) }) </node>
<node id="2"> *n:Place -> ({ placeid ( *n:PlaceName ) }) </node>
<node id="3"> *n:PlaceName -> ({ ' mount mckinley ' }) </node>
</mrl-parse>
</example>

<example id="26">
<nl lang="en">
بلند ترین نقطه آمریکا چقدر ارتفاع دارد ؟
</nl>
<nl lang="es">
que tan alto esta el punto mas alto en america ?
</nl>
<nl lang="ja">
amerika no mottomo takai chiten no takasa wa nan desu ka ?
</nl>
<nl lang="tr">
amerika daki en yuksek nokta ne kadar yuksektir ?
</nl>
<syn lang="en">
(S بلند ترین نقطه آمریکا چقدر ارتفاع دارد ؟)
</syn>
<syn lang="es">
(S que tan alto esta el punto mas alto en america)
</syn>
<syn lang="ja">
(S amerika no mottomo takai chiten no takasa wa nan desu ka)
</syn>
<syn lang="tr">
(S amerika daki en yuksek nokta ne kadar yuksektir)
</syn>
<augsyn lang="en">
(S How-[Num:1] high-[Num:1] is-[Num:1] the highest-[Place:2] point-[Place:3] in-[Place:4] America-[CountryName:6])
</augsyn>
<mrl lang="geo-funql">
answer(elevation_1(highest(place(loc_2(countryid('usa'))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(elevation(B,A),highest(B,(place(B),loc(B,C),const(C,countryid(usa))))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ elevation_1 ( *n:Place ) }) </node>
<node id="2"> *n:Place -> ({ highest ( *n:Place ) }) </node>
<node id="3"> *n:Place -> ({ place ( *n:Place ) }) </node>
<node id="4"> *n:Place -> ({ loc_2 ( *n:Country ) }) </node>
<node id="5"> *n:Country -> ({ countryid ( *n:CountryName ) }) </node>
<node id="6"> *n:CountryName -> ({ ' usa ' }) </node>
</mrl-parse>
</example>

<example id="27">
<nl lang="en">
بلند ترین نقطه مونتانا چقدر ارتفاع دارد ؟
</nl>
<nl lang="es">
que tan alto esta el punto mas alto en montana ?
</nl>
<nl lang="ja">
montana no mottomo takai chiten no takasa wa desu ka ?
</nl>
<nl lang="tr">
montana daki en yuksek nokta ne kadar yuksektir ?
</nl>
<syn lang="en">
(S بلند ترین نقطه مونتانا چقدر ارتفاع دارد ؟)
</syn>
<syn lang="es">
(S que tan alto esta el punto mas alto en montana)
</syn>
<syn lang="ja">
(S montana no mottomo takai chiten no takasa wa desu ka)
</syn>
<syn lang="tr">
(S montana daki en yuksek nokta ne kadar yuksektir)
</syn>
<augsyn lang="en">
(S How-[Num:1] high-[Num:1] is-[Num:1] the highest-[Place:2] point-[Place:3] in-[Place:4] Montana-[StateName:6])
</augsyn>
<mrl lang="geo-funql">
answer(elevation_1(highest(place(loc_2(stateid('montana'))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(elevation(B,A),highest(B,(place(B),loc(B,C),const(C,stateid(montana))))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ elevation_1 ( *n:Place ) }) </node>
<node id="2"> *n:Place -> ({ highest ( *n:Place ) }) </node>
<node id="3"> *n:Place -> ({ place ( *n:Place ) }) </node>
<node id="4"> *n:Place -> ({ loc_2 ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="6"> *n:StateName -> ({ ' montana ' }) </node>
</mrl-parse>
</example>

<example id="28">
<nl lang="en">
بلند ترین نقطه بزرگترین ایالت چقدر ارتفاع دارد ؟
</nl>
<syn lang="en">
(S بلند ترین نقطه بزرگترین ایالت چقدر ارتفاع دارد ؟)
</syn>
<augsyn lang="en">
(S How-[Num:1] high-[Num:1] is-[Num:1] the highest-[Place:2] point-[Place:3] in-[Place:4] the largest-[State:5] state-[State:6])
</augsyn>
<mrl lang="geo-funql">
answer(elevation_1(highest(place(loc_2(largest(state(all)))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(elevation(B,A),highest(B,(place(B),loc(B,C),largest(C,state(C))))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ elevation_1 ( *n:Place ) }) </node>
<node id="2"> *n:Place -> ({ highest ( *n:Place ) }) </node>
<node id="3"> *n:Place -> ({ place ( *n:Place ) }) </node>
<node id="4"> *n:Place -> ({ loc_2 ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ largest ( *n:State ) }) </node>
<node id="6"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="29">
<nl lang="en">
بلند ترین نقطه آلاباما شهر چقدر ارتفاع دارد ؟
</nl>
<syn lang="en">
(S بلند ترین نقطه آلاباما شهر چقدر ارتفاع دارد ؟)
</syn>
<augsyn lang="en">
(S How-[Num:1] high-[Num:1] is-[Num:1] the highest-[Place:2] point-[Place:3] of-[Place:4] Alabama-[StateName:6])
</augsyn>
<mrl lang="geo-funql">
answer(elevation_1(highest(place(loc_2(stateid('alabama'))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(elevation(B,A),highest(B,(place(B),loc(B,C),const(C,stateid(alabama))))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ elevation_1 ( *n:Place ) }) </node>
<node id="2"> *n:Place -> ({ highest ( *n:Place ) }) </node>
<node id="3"> *n:Place -> ({ place ( *n:Place ) }) </node>
<node id="4"> *n:Place -> ({ loc_2 ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="6"> *n:StateName -> ({ ' alabama ' }) </node>
</mrl-parse>
</example>

<example id="30">
<nl lang="en">
بلند ترین نقطه دلاور شهر چقدر ارتفاع دارد ؟
</nl>
<syn lang="en">
(S بلند ترین نقطه دلاور شهر چقدر ارتفاع دارد ؟)
</syn>
<augsyn lang="en">
(S How-[Num:1] high-[Num:1] is-[Num:1] the highest-[Place:2] point-[Place:3] of-[Place:4] Delaware-[StateName:6])
</augsyn>
<mrl lang="geo-funql">
answer(elevation_1(highest(place(loc_2(stateid('delaware'))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(elevation(B,A),highest(B,(place(B),loc(B,C),const(C,stateid(delaware))))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ elevation_1 ( *n:Place ) }) </node>
<node id="2"> *n:Place -> ({ highest ( *n:Place ) }) </node>
<node id="3"> *n:Place -> ({ place ( *n:Place ) }) </node>
<node id="4"> *n:Place -> ({ loc_2 ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="6"> *n:StateName -> ({ ' delaware ' }) </node>
</mrl-parse>
</example>

<example id="31">
<nl lang="en">
بلند ترین نقطه فلوریدا چقدر ارتفاع دارد ؟
</nl>
<syn lang="en">
(S بلند ترین نقطه فلوریدا چقدر ارتفاع دارد ؟)
</syn>
<augsyn lang="en">
(S How-[Num:1] high-[Num:1] is-[Num:1] the highest-[Place:2] point-[Place:3] of-[Place:4] Florida-[StateName:6])
</augsyn>
<mrl lang="geo-funql">
answer(elevation_1(highest(place(loc_2(stateid('florida'))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(elevation(B,A),highest(B,(place(B),loc(B,C),const(C,stateid(florida))))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ elevation_1 ( *n:Place ) }) </node>
<node id="2"> *n:Place -> ({ highest ( *n:Place ) }) </node>
<node id="3"> *n:Place -> ({ place ( *n:Place ) }) </node>
<node id="4"> *n:Place -> ({ loc_2 ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="6"> *n:StateName -> ({ ' florida ' }) </node>
</mrl-parse>
</example>

<example id="32">
<nl lang="en">
بلند ترین نقطه لوزانیا چقدر ارتفاع دارد ؟
</nl>
<syn lang="en">
(S بلند ترین نقطه لوزانیا چقدر ارتفاع دارد ؟)
</syn>
<augsyn lang="en">
(S How-[Num:1] high-[Num:1] is-[Num:1] the highest-[Place:2] point-[Place:3] of-[Place:4] Louisiana-[StateName:6])
</augsyn>
<mrl lang="geo-funql">
answer(elevation_1(highest(place(loc_2(stateid('louisiana'))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(elevation(B,A),highest(B,(place(B),loc(B,C),const(C,stateid(louisiana))))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ elevation_1 ( *n:Place ) }) </node>
<node id="2"> *n:Place -> ({ highest ( *n:Place ) }) </node>
<node id="3"> *n:Place -> ({ place ( *n:Place ) }) </node>
<node id="4"> *n:Place -> ({ loc_2 ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="6"> *n:StateName -> ({ ' louisiana ' }) </node>
</mrl-parse>
</example>

<example id="33">
<nl lang="en">
وسعت الاسکا چقدر است ؟
</nl>
<nl lang="es">
que tan grande esta alaska ?
</nl>
<nl lang="ja">
arasuka no ookisa wa dore gurai desu ka ?
</nl>
<nl lang="tr">
alaska ne kadar genisliktedir ?
</nl>
<syn lang="en">
(S وسعت الاسکا چقدر است ؟)
</syn>
<syn lang="es">
(S que tan grande esta alaska)
</syn>
<syn lang="ja">
(S arasuka no ookisa wa dore gurai desu ka)
</syn>
<syn lang="tr">
(S alaska ne kadar genisliktedir)
</syn>
<augsyn lang="en">
(S How-[Num:1] large-[Num:1] is-[Num:1] Alaska-[StateName:3])
</augsyn>
<mrl lang="geo-funql">
answer(size(stateid('alaska')))
</mrl>
<mrl lang="geo-prolog">
answer(A,(size(B,A),const(B,stateid(alaska))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ size ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="3"> *n:StateName -> ({ ' alaska ' }) </node>
</mrl-parse>
</example>

<example id="34">
<nl lang="en">
وسعت تگزاس چقدر است ؟
</nl>
<nl lang="es">
que tan grande esta texas ?
</nl>
<nl lang="ja">
tekisasu no ookisa wa nan desu ka ?
</nl>
<nl lang="tr">
texas ne kadar genistir ?
</nl>
<syn lang="en">
(S وسعت تگزاس چقدر است ؟)
</syn>
<syn lang="es">
(S que tan grande esta texas)
</syn>
<syn lang="ja">
(S tekisasu no ookisa wa nan desu ka)
</syn>
<syn lang="tr">
(S texas ne kadar genistir)
</syn>
<augsyn lang="en">
(S How-[Num:1] large-[Num:1] is-[Num:1] Texas-[StateName:3])
</augsyn>
<mrl lang="geo-funql">
answer(size(stateid('texas')))
</mrl>
<mrl lang="geo-prolog">
answer(A,(size(B,A),const(B,stateid(texas))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ size ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="3"> *n:StateName -> ({ ' texas ' }) </node>
</mrl-parse>
</example>

<example id="35">
<nl lang="en">
وسعت بزگترین شهر آلاسکا چقدر است ؟
</nl>
<nl lang="es">
que tan grande esta la ciudad mas grande en alaska ?
</nl>
<nl lang="ja">
arasuka no mottomo ookii toshi wa nan desu ka ?
</nl>
<nl lang="tr">
alaska daki en genis sehirin genisligi ne kadardir ?
</nl>
<syn lang="en">
(S وسعت بزگترین شهر آلاسکا چقدر است ؟)
</syn>
<syn lang="es">
(S que tan grande esta la ciudad mas grande en alaska)
</syn>
<syn lang="ja">
(S arasuka no mottomo ookii toshi wa nan desu ka)
</syn>
<syn lang="tr">
(S alaska daki en genis sehirin genisligi ne kadardir)
</syn>
<augsyn lang="en">
(S How-[Num:1] large-[Num:1] is-[Num:1] the largest-[City:2] city-[City:3] in-[City:4] Alaska-[StateName:6])
</augsyn>
<mrl lang="geo-funql">
answer(size(largest(city(loc_2(stateid('alaska'))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(size(B,A),largest(B,(city(B),loc(B,C),const(C,stateid(alaska))))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ size ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ largest ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="4"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="6"> *n:StateName -> ({ ' alaska ' }) </node>
</mrl-parse>
</example>

<example id="36">
<nl lang="en">
طول ریوگرانده چقدر است ؟
</nl>
<syn lang="en">
(S طول ریوگرانده چقدر است ؟)
</syn>
<augsyn lang="en">
(S How-[Num:1] long-[Num:1] is-[Num:1] Rio-[RiverName:3] Grande-[RiverName:3])
</augsyn>
<mrl lang="geo-funql">
answer(len(riverid('rio grande')))
</mrl>
<mrl lang="geo-prolog">
answer(A,(len(B,A),const(B,riverid('rio grande'))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ len ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ riverid ( *n:RiverName ) }) </node>
<node id="3"> *n:RiverName -> ({ ' rio grande ' }) </node>
</mrl-parse>
</example>

<example id="37">
<nl lang="en">
طول رودخانه کلورادو چقدر است ؟
</nl>
<nl lang="es">
que tan largo esta el rio colorado ?
</nl>
<nl lang="ja">
kororado kawa no nagasa wa dore gurai desu ka ?
</nl>
<nl lang="tr">
colorado nehrinin uzunlugu ne kadardir ?
</nl>
<syn lang="en">
(S طول رودخانه کلورادو چقدر است ؟)
</syn>
<syn lang="es">
(S que tan largo esta el rio colorado)
</syn>
<syn lang="ja">
(S kororado kawa no nagasa wa dore gurai desu ka)
</syn>
<syn lang="tr">
(S colorado nehrinin uzunlugu ne kadardir)
</syn>
<augsyn lang="en">
(S How-[Num:1] long-[Num:1] is-[Num:1] the Colorado-[RiverName:4] river-[River:2])
</augsyn>
<mrl lang="geo-funql">
answer(len(river(riverid('colorado'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(len(B,A),const(B,riverid(colorado)),river(B)))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ len ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ riverid ( *n:RiverName ) }) </node>
<node id="4"> *n:RiverName -> ({ ' colorado ' }) </node>
</mrl-parse>
</example>

<example id="38">
<nl lang="en">
طول رودخانه دلاور چقدر است ؟
</nl>
<nl lang="es">
que tan largo esta el rio delaware ?
</nl>
<nl lang="ja">
derawaru kawa no nagasa wa dore gurai desu ka ?
</nl>
<nl lang="tr">
delaware nehrinin uzunlugu ne kadardir ?
</nl>
<syn lang="en">
(S طول رودخانه دلاور چقدر است ؟)
</syn>
<syn lang="es">
(S que tan largo esta el rio delaware)
</syn>
<syn lang="ja">
(S derawaru kawa no nagasa wa dore gurai desu ka)
</syn>
<syn lang="tr">
(S delaware nehrinin uzunlugu ne kadardir)
</syn>
<augsyn lang="en">
(S How-[Num:1] long-[Num:1] is-[Num:1] the Delaware-[RiverName:4] river-[River:2])
</augsyn>
<mrl lang="geo-funql">
answer(len(river(riverid('delaware'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(len(B,A),const(B,riverid(delaware)),river(B)))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ len ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ riverid ( *n:RiverName ) }) </node>
<node id="4"> *n:RiverName -> ({ ' delaware ' }) </node>
</mrl-parse>
</example>

<example id="39">
<nl lang="en">
طول بلند ترین رودخانه کالیفرنیا چقدر است ؟
</nl>
<syn lang="en">
(S طول بلند ترین رودخانه کالیفرنیا چقدر است ؟)
</syn>
<augsyn lang="en">
(S How-[Num:1] long-[Num:1] is-[Num:1] the longest-[River:2] river-[River:3] in-[River:4] California-[StateName:6])
</augsyn>
<mrl lang="geo-funql">
answer(len(longest(river(loc_2(stateid('california'))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(len(B,A),longest(B,(river(B),loc(B,C),const(C,stateid(california))))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ len ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ longest ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="4"> *n:River -> ({ loc_2 ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="6"> *n:StateName -> ({ ' california ' }) </node>
</mrl-parse>
</example>

<example id="40">
<nl lang="en">
طول بلندترین رودخانه آمریکا چقدر است ؟
</nl>
<syn lang="en">
(S طول بلندترین رودخانه آمریکا چقدر است ؟)
</syn>
<augsyn lang="en">
(S How-[Num:1] long-[Num:1] is-[Num:1] the longest-[River:2] river-[River:3] in-[River:4] the USA-[CountryName:6])
</augsyn>
<mrl lang="geo-funql">
answer(len(longest(river(loc_2(countryid('usa'))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(len(B,A),longest(B,(river(B),loc(B,C),const(C,countryid(usa))))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ len ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ longest ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="4"> *n:River -> ({ loc_2 ( *n:Country ) }) </node>
<node id="5"> *n:Country -> ({ countryid ( *n:CountryName ) }) </node>
<node id="6"> *n:CountryName -> ({ ' usa ' }) </node>
</mrl-parse>
</example>

<example id="41">
<nl lang="en">
طول میسیسیپی چقدر است ؟
</nl>
<nl lang="es">
que tiene de largo el rio mississippi ?
</nl>
<nl lang="ja">
mishishippi kawa no nagasa wa dore gurai desu ka ?
</nl>
<nl lang="tr">
mississippi nehrinin uzunlugu ne kadardir ?
</nl>
<syn lang="en">
(S طول میسیسیپی چقدر است ؟)
</syn>
<syn lang="es">
(S que tiene de largo el rio mississippi)
</syn>
<syn lang="ja">
(S mishishippi kawa no nagasa wa dore gurai desu ka)
</syn>
<syn lang="tr">
(S mississippi nehrinin uzunlugu ne kadardir)
</syn>
<augsyn lang="en">
(S How-[Num:1] long-[Num:1] is-[Num:1] the Mississippi-[RiverName:3])
</augsyn>
<mrl lang="geo-funql">
answer(len(riverid('mississippi')))
</mrl>
<mrl lang="geo-prolog">
answer(A,(len(B,A),const(B,riverid(mississippi))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ len ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ riverid ( *n:RiverName ) }) </node>
<node id="3"> *n:RiverName -> ({ ' mississippi ' }) </node>
</mrl-parse>
</example>

<example id="42">
<nl lang="en">
طول رودخانه میسیسیپی چقدر است ؟
</nl>
<nl lang="es">
que tiene de largo el rio mississippi ?
</nl>
<nl lang="ja">
mishishippi kawa no nagasa wa dore gurai desu ka ?
</nl>
<nl lang="tr">
mississippi nehrinin uzunlugu ne kadardir ?
</nl>
<syn lang="en">
(S طول رودخانه میسیسیپی چقدر است ؟)
</syn>
<syn lang="es">
(S que tiene de largo el rio mississippi)
</syn>
<syn lang="ja">
(S mishishippi kawa no nagasa wa dore gurai desu ka)
</syn>
<syn lang="tr">
(S mississippi nehrinin uzunlugu ne kadardir)
</syn>
<augsyn lang="en">
(S How-[Num:1] long-[Num:1] is-[Num:1] the Mississippi-[RiverName:4] river-[River:2])
</augsyn>
<mrl lang="geo-funql">
answer(len(river(riverid('mississippi'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(len(B,A),const(B,riverid(mississippi)),river(B)))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ len ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ riverid ( *n:RiverName ) }) </node>
<node id="4"> *n:RiverName -> ({ ' mississippi ' }) </node>
</mrl-parse>
</example>

<example id="43">
<nl lang="en">
طول روخانه میسیسیپی به مایل چقدر است ؟
</nl>
<syn lang="en">
(S طول روخانه میسیسیپی به مایل چقدر است ؟)
</syn>
<augsyn lang="en">
(S How-[Num:1] long-[Num:1] is-[Num:1] the Mississippi-[RiverName:4] river-[River:2] in-[Num:1] miles-[Num:1])
</augsyn>
<mrl lang="geo-funql">
answer(len(river(riverid('mississippi'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(len(B,A),const(B,riverid(mississippi)),river(B)))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ len ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ riverid ( *n:RiverName ) }) </node>
<node id="4"> *n:RiverName -> ({ ' mississippi ' }) </node>
</mrl-parse>
</example>

<example id="44">
<nl lang="en">
طول روخانه میسوری چقدر است ؟
</nl>
<nl lang="es">
que tan largo esta el rio missouri ?
</nl>
<nl lang="ja">
mizuuri kawa no nagasa wa dore gurai desu ka ?
</nl>
<nl lang="tr">
missouri nehrinin uzunlugu ne kadardir ?
</nl>
<syn lang="en">
(S طول روخانه میسوری چقدر است ؟)
</syn>
<syn lang="es">
(S que tan largo esta el rio missouri)
</syn>
<syn lang="ja">
(S mizuuri kawa no nagasa wa dore gurai desu ka)
</syn>
<syn lang="tr">
(S missouri nehrinin uzunlugu ne kadardir)
</syn>
<augsyn lang="en">
(S How-[Num:1] long-[Num:1] is-[Num:1] the Missouri-[RiverName:4] river-[River:2])
</augsyn>
<mrl lang="geo-funql">
answer(len(river(riverid('missouri'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(len(B,A),const(B,riverid(missouri)),river(B)))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ len ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ riverid ( *n:RiverName ) }) </node>
<node id="4"> *n:RiverName -> ({ ' missouri ' }) </node>
</mrl-parse>
</example>

<example id="45">
<nl lang="en">
طول رودخانه نورث بلات چقدر است ؟
</nl>
<nl lang="es">
que tan largo esta el rio north platte ?
</nl>
<nl lang="ja">
noosu puratte kawa no nagasa wa dore gurai desu ka ?
</nl>
<nl lang="tr">
north platte nehrinin uzunlugu ne kadardir ?
</nl>
<syn lang="en">
(S طول رودخانه نورث بلات چقدر است ؟)
</syn>
<syn lang="es">
(S que tan largo esta el rio north_platte)
</syn>
<syn lang="ja">
(S noosu_puratte kawa no nagasa wa dore gurai desu ka)
</syn>
<syn lang="tr">
(S north_platte nehrinin uzunlugu ne kadardir)
</syn>
<augsyn lang="en">
(S How-[Num:1] long-[Num:1] is-[Num:1] the North-[RiverName:4] Platte-[RiverName:4] river-[River:2])
</augsyn>
<mrl lang="geo-funql">
answer(len(river(riverid('north platte'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(len(B,A),const(B,riverid('north platte')),river(B)))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ len ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ riverid ( *n:RiverName ) }) </node>
<node id="4"> *n:RiverName -> ({ ' north platte ' }) </node>
</mrl-parse>
</example>

<example id="46">
<nl lang="en">
طول رودخانه اوهایو چقدر است ؟
</nl>
<nl lang="es">
que tan largo esta el rio ohio ?
</nl>
<nl lang="ja">
ohaio kawa no nagasa wa dore gurai desu ka ?
</nl>
<nl lang="tr">
ohio nehrinin uzunlugu ne kadardir ?
</nl>
<syn lang="en">
(S طول رودخانه اوهایو چقدر است ؟)
</syn>
<syn lang="es">
(S que tan largo esta el rio ohio)
</syn>
<syn lang="ja">
(S ohaio kawa no nagasa wa dore gurai desu ka)
</syn>
<syn lang="tr">
(S ohio nehrinin uzunlugu ne kadardir)
</syn>
<augsyn lang="en">
(S How-[Num:1] long-[Num:1] is-[Num:1] the Ohio-[RiverName:4] river-[River:2])
</augsyn>
<mrl lang="geo-funql">
answer(len(river(riverid('ohio'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(len(B,A),const(B,riverid(ohio)),river(B)))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ len ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ riverid ( *n:RiverName ) }) </node>
<node id="4"> *n:RiverName -> ({ ' ohio ' }) </node>
</mrl-parse>
</example>

<example id="47">
<nl lang="en">
طول ریوگرانده اوهایو چقدر است ؟
</nl>
<nl lang="es">
cuanto tiene de largo el rio rio grande ?
</nl>
<nl lang="ja">
rio gurande kawa no nagasa wa dore gurai desu ka ?
</nl>
<nl lang="tr">
rio grande nehrinin uzunlugu ne kadardir ?
</nl>
<syn lang="en">
(S طول ریوگرانده اوهایو چقدر است ؟)
</syn>
<syn lang="es">
(S cuanto tiene de largo el rio rio_grande)
</syn>
<syn lang="ja">
(S rio_gurande kawa no nagasa wa dore gurai desu ka)
</syn>
<syn lang="tr">
(S rio_grande nehrinin uzunlugu ne kadardir)
</syn>
<augsyn lang="en">
(S How-[Num:1] long-[Num:1] is-[Num:1] the Rio-[RiverName:4] Grande-[RiverName:4] river-[River:2])
</augsyn>
<mrl lang="geo-funql">
answer(len(river(riverid('rio grande'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(len(B,A),const(B,riverid('rio grande')),river(B)))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ len ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ riverid ( *n:RiverName ) }) </node>
<node id="4"> *n:RiverName -> ({ ' rio grande ' }) </node>
</mrl-parse>
</example>

<example id="48">
<nl lang="en">
کوتاه ترین رودخانه آمریکا چقدر طول دارد ؟
</nl>
<nl lang="es">
cuanto tiene de largo el rio mas corto en los usa ?
</nl>
<nl lang="ja">
amerika no mottomo mijikai kawa no nagasa wa dore gurai desu ka ?
</nl>
<nl lang="tr">
usa deki en kisa nehirin uzunlugu nedir ?
</nl>
<syn lang="en">
(S کوتاه ترین رودخانه آمریکا چقدر طول دارد ؟)
</syn>
<syn lang="es">
(S cuanto tiene de largo el rio mas corto en los usa)
</syn>
<syn lang="ja">
(S amerika no mottomo mijikai kawa no nagasa wa dore gurai desu ka)
</syn>
<syn lang="tr">
(S usa deki en kisa nehirin uzunlugu nedir)
</syn>
<augsyn lang="en">
(S How-[Num:1] long-[Num:1] is-[Num:1] the shortest-[River:2] river-[River:3] in-[River:4] the USA-[CountryName:6])
</augsyn>
<mrl lang="geo-funql">
answer(len(shortest(river(loc_2(countryid('usa'))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(len(B,A),shortest(B,(river(B),loc(B,C),const(C,countryid(usa))))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ len ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ shortest ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="4"> *n:River -> ({ loc_2 ( *n:Country ) }) </node>
<node id="5"> *n:Country -> ({ countryid ( *n:CountryName ) }) </node>
<node id="6"> *n:CountryName -> ({ ' usa ' }) </node>
</mrl-parse>
</example>

<example id="49">
<nl lang="en">
چند شهر بزرگ در پنلسیلوانیا هست ؟
</nl>
<syn lang="en">
(S چند شهر بزرگ در پنلسیلوانیا هست ؟)
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] big-[City:2] cities-[City:3] are-[City:4] in-[City:4] Pennsylvania-[StateName:6])
</augsyn>
<mrl lang="geo-funql">
answer(count(major(city(loc_2(stateid('pennsylvania'))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,count(B,(major(B),city(B),loc(B,C),const(C,stateid(pennsylvania))),A))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ count ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ major ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="4"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="6"> *n:StateName -> ({ ' pennsylvania ' }) </node>
</mrl-parse>
</example>

<example id="50">
<nl lang="en">
رودآیلند چند مرکز دارد ؟
</nl>
<syn lang="en">
(S رودآیلند چند مرکز دارد ؟)
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] capitals-[City:2] does-[City:3] Rhode-[StateName:5] Island-[StateName:5] have-[City:3])
</augsyn>
<mrl lang="geo-funql">
answer(count(capital(loc_2(stateid('rhode island')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,count(B,(capital(B),const(C,stateid('rhode island')),loc(B,C)),A))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ count ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ capital ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' rhode island ' }) </node>
</mrl-parse>
</example>

<example id="51">
<nl lang="en">
چند شهر در لوزانیا هست ؟
</nl>
<syn lang="en">
(S چند شهر در لوزانیا هست ؟)
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] cities-[City:2] are-[City:3] in-[City:3] Louisiana-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(count(city(loc_2(stateid('louisiana')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,count(B,(city(B),loc(B,C),const(C,stateid(louisiana))),A))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ count ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' louisiana ' }) </node>
</mrl-parse>
</example>

<example id="52">
<nl lang="en">
چند شهر در مونتانا هست ؟
</nl>
<nl lang="es">
cuantas ciudades hay en montana ?
</nl>
<nl lang="ja">
montana ni wa toshi ga ikutsu arimasu ka ?
</nl>
<nl lang="tr">
montana da kac tane sehir vardir ?
</nl>
<syn lang="en">
(S چند شهر در مونتانا هست ؟)
</syn>
<syn lang="es">
(S cuantas ciudades hay en montana)
</syn>
<syn lang="ja">
(S montana ni wa toshi ga ikutsu arimasu ka)
</syn>
<syn lang="tr">
(S montana da kac tane sehir vardir)
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] cities-[City:2] are-[City:3] in-[City:3] Montana-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(count(city(loc_2(stateid('montana')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,count(B,(city(B),loc(B,C),const(C,stateid(montana))),A))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ count ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' montana ' }) </node>
</mrl-parse>
</example>

<example id="53">
<nl lang="en">
چند شهر در ایالات متحده هست ؟
</nl>
<syn lang="en">
(S چند شهر در ایالات متحده هست ؟)
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] cities-[City:2] are-[City:3] there-[City:3] in-[City:3] the United-[CountryName:5] States-[CountryName:5])
</augsyn>
<mrl lang="geo-funql">
answer(count(city(loc_2(countryid('usa')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,count(B,(city(B),loc(B,C),const(C,countryid(usa))),A))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ count ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ loc_2 ( *n:Country ) }) </node>
<node id="4"> *n:Country -> ({ countryid ( *n:CountryName ) }) </node>
<node id="5"> *n:CountryName -> ({ ' usa ' }) </node>
</mrl-parse>
</example>

<example id="54">
<nl lang="en">
چند شهر در ایالات متحده هست ؟
</nl>
<nl lang="es">
cuantas ciudades hay en los us ?
</nl>
<nl lang="ja">
beikoku ni wa toshi ga ikutsu arimasu ka ?
</nl>
<nl lang="tr">
us de kac tane sehir vardir ?
</nl>
<syn lang="en">
(S چند شهر در ایالات متحده هست ؟)
</syn>
<syn lang="es">
(S cuantas ciudades hay en los us)
</syn>
<syn lang="ja">
(S beikoku ni wa toshi ga ikutsu arimasu ka)
</syn>
<syn lang="tr">
(S us de kac tane sehir vardir)
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] cities-[City:2] are-[City:3] there-[City:3] in-[City:3] the US-[CountryName:5])
</augsyn>
<mrl lang="geo-funql">
answer(count(city(loc_2(countryid('usa')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,count(B,(city(B),loc(B,C),const(C,countryid(usa))),A))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ count ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ loc_2 ( *n:Country ) }) </node>
<node id="4"> *n:Country -> ({ countryid ( *n:CountryName ) }) </node>
<node id="5"> *n:CountryName -> ({ ' usa ' }) </node>
</mrl-parse>
</example>

<example id="55">
<nl lang="en">
چند شهر در ایالات متحده هست ؟
</nl>
<syn lang="en">
(S چند شهر در ایالات متحده هست ؟)
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] cities-[City:2] are-[City:3] there-[City:3] in-[City:3] US-[CountryName:5])
</augsyn>
<mrl lang="geo-funql">
answer(count(city(loc_2(countryid('usa')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,count(B,(city(B),loc(B,C),const(C,countryid(usa))),A))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ count ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ loc_2 ( *n:Country ) }) </node>
<node id="4"> *n:Country -> ({ countryid ( *n:CountryName ) }) </node>
<node id="5"> *n:CountryName -> ({ ' usa ' }) </node>
</mrl-parse>
</example>

<example id="56">
<nl lang="en">
چند شهر در ایالات متحده هست ؟
</nl>
<syn lang="en">
(S چند شهر در ایالات متحده هست ؟)
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] cities-[City:2] are-[City:3] there-[City:3] in-[City:3] USA-[CountryName:5])
</augsyn>
<mrl lang="geo-funql">
answer(count(city(loc_2(countryid('usa')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,count(B,(city(B),loc(B,C),const(C,countryid(usa))),A))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ count ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ loc_2 ( *n:Country ) }) </node>
<node id="4"> *n:Country -> ({ countryid ( *n:CountryName ) }) </node>
<node id="5"> *n:CountryName -> ({ ' usa ' }) </node>
</mrl-parse>
</example>

<example id="57">
<nl lang="en">
تگزاس چند شهر دارد ؟
</nl>
<syn lang="en">
(S تگزاس چند شهر دارد ؟)
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] cities-[City:2] does-[City:3] Texas-[StateName:5] have-[City:3])
</augsyn>
<mrl lang="geo-funql">
answer(count(city(loc_2(stateid('texas')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,count(B,(city(B),const(C,stateid(texas)),loc(B,C)),A))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ count ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' texas ' }) </node>
</mrl-parse>
</example>

<example id="58">
<nl lang="en">
ایالات متحده چند شهر دارد ؟
</nl>
<syn lang="en">
(S ایالات متحده چند شهر دارد ؟)
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] cities-[City:2] does-[City:3] the USA-[CountryName:5] have-[City:3])
</augsyn>
<mrl lang="geo-funql">
answer(count(city(loc_2(countryid('usa')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,count(B,(city(B),const(C,countryid(usa)),loc(B,C)),A))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ count ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ loc_2 ( *n:Country ) }) </node>
<node id="4"> *n:Country -> ({ countryid ( *n:CountryName ) }) </node>
<node id="5"> *n:CountryName -> ({ ' usa ' }) </node>
</mrl-parse>
</example>

<example id="59">
<nl lang="en">
چند شهر به نام آستین در ایالات متحده هست ؟
</nl>
<syn lang="en">
(S چند شهر به نام آستین در ایالات متحده هست ؟)
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] cities-[City:3] named-[City:3] Austin-[CityName:5] are-[City:6] there-[City:6] in-[City:6] the USA-[CountryName:8])
</augsyn>
<mrl lang="geo-funql">
answer(count(intersection(city(cityid('austin', _)), loc_2(countryid('usa')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,count(B,(city(B),const(B,cityid(austin,_)),loc(B,C),const(C,countryid(usa))),A))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ count ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ intersection ( *n:City , *n:City ) }) </node>
<node id="3"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="4"> *n:City -> ({ cityid ( *n:CityName , _ ) }) </node>
<node id="5"> *n:CityName -> ({ ' austin ' }) </node>
<node id="6"> *n:City -> ({ loc_2 ( *n:Country ) }) </node>
<node id="7"> *n:Country -> ({ countryid ( *n:CountryName ) }) </node>
<node id="8"> *n:CountryName -> ({ ' usa ' }) </node>
</mrl-parse>
</example>

<example id="60">
<nl lang="en">
بزرگترین شهر ایالات متحده چند شهروند دارد ؟
</nl>
<syn lang="en">
(S بزرگترین شهر ایالات متحده چند شهروند دارد ؟)
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] citizens-[Num:1] does-[Num:1] the biggest-[City:2] city-[City:3] have-[City:2] in-[City:2] the USA-[City:2])
</augsyn>
<mrl lang="geo-funql">
answer(population_1(largest(city(all))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(population(B,A),largest(B,city(B))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ population_1 ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ largest ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ city ( all ) }) </node>
</mrl-parse>
</example>

<example id="61">
<nl lang="en">
آلاباما چند شهروند دارد ؟
</nl>
<nl lang="es">
cuantos ciudadanos en alabama ?
</nl>
<nl lang="ja">
arabama ni wa nannin no shuumin ga imasu ka ?
</nl>
<nl lang="tr">
alabama da kac tane vatandas vardir ?
</nl>
<syn lang="en">
(S آلاباما چند شهروند دارد ؟)
</syn>
<syn lang="es">
(S cuantos ciudadanos en alabama)
</syn>
<syn lang="ja">
(S arabama ni wa nannin no shuumin ga imasu ka)
</syn>
<syn lang="tr">
(S alabama da kac tane vatandas vardir)
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] citizens-[Num:1] in-[Num:1] Alabama-[StateName:3])
</augsyn>
<mrl lang="geo-funql">
answer(population_1(stateid('alabama')))
</mrl>
<mrl lang="geo-prolog">
answer(A,(population(B,A),const(B,stateid(alabama))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ population_1 ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="3"> *n:StateName -> ({ ' alabama ' }) </node>
</mrl-parse>
</example>

<example id="62">
<nl lang="en">
بولدر چند شهروند دارد ؟
</nl>
<syn lang="en">
(S بولدر چند شهروند دارد ؟)
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] citizens-[Num:1] in-[Num:1] Boulder-[CityName:3])
</augsyn>
<mrl lang="geo-funql">
answer(population_1(cityid('boulder', _)))
</mrl>
<mrl lang="geo-prolog">
answer(A,(population(B,A),const(B,cityid(boulder,_))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ population_1 ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ cityid ( *n:CityName , _ ) }) </node>
<node id="3"> *n:CityName -> ({ ' boulder ' }) </node>
</mrl-parse>
</example>

<example id="63">
<nl lang="en">
کالیفرنیا چند شهروند دارد ؟
</nl>
<nl lang="es">
cuantos ciudadanos viven en california ?
</nl>
<nl lang="ja">
karifuorunia ni wa nannin no shuumin ga sumimasu ka ?
</nl>
<nl lang="tr">
california da ne kadar vatandas yasamaktadir ?
</nl>
<syn lang="en">
(S کالیفرنیا چند شهروند دارد ؟)
</syn>
<syn lang="es">
(S cuantos ciudadanos viven en california)
</syn>
<syn lang="ja">
(S karifuorunia ni wa nannin no shuumin ga sumimasu ka)
</syn>
<syn lang="tr">
(S california da ne kadar vatandas yasamaktadir)
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] citizens-[Num:1] live-[Num:1] in-[Num:1] California-[StateName:3])
</augsyn>
<mrl lang="geo-funql">
answer(population_1(stateid('california')))
</mrl>
<mrl lang="geo-prolog">
answer(A,(population(B,A),const(B,stateid(california))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ population_1 ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="3"> *n:StateName -> ({ ' california ' }) </node>
</mrl-parse>
</example>

<example id="64">
<nl lang="en">
چند رودخانه کلرادو وجود دارد ؟
</nl>
<syn lang="en">
(S چند رودخانه کلرادو وجود دارد ؟)
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] Colorado-[RiverName:4] rivers-[River:2] are-[Num:1] there-[Num:1])
</augsyn>
<mrl lang="geo-funql">
answer(count(river(riverid('colorado'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,count(B,(const(B,riverid(colorado)),river(B)),A))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ count ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ riverid ( *n:RiverName ) }) </node>
<node id="4"> *n:RiverName -> ({ ' colorado ' }) </node>
</mrl-parse>
</example>

<example id="65">
<nl lang="en">
چه تعداد در مونتگمری سکونت دارند ؟
</nl>
<syn lang="en">
(S چه تعداد در مونتگمری سکونت دارند ؟)
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] inhabitants-[Num:1] does-[Num:1] Montgomery-[CityName:3] have-[Num:1])
</augsyn>
<mrl lang="geo-funql">
answer(population_1(cityid('montgomery', _)))
</mrl>
<mrl lang="geo-prolog">
answer(A,(population(B,A),const(B,cityid(montgomery,_))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ population_1 ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ cityid ( *n:CityName , _ ) }) </node>
<node id="3"> *n:CityName -> ({ ' montgomery ' }) </node>
</mrl-parse>
</example>

<example id="66">
<nl lang="en">
آریزونا چند شهر عمده دارد ؟
</nl>
<syn lang="en">
(S آریزونا چند شهر عمده دارد ؟)
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] major-[City:2] cities-[City:3] are-[City:4] in-[City:4] Arizona-[StateName:6])
</augsyn>
<mrl lang="geo-funql">
answer(count(major(city(loc_2(stateid('arizona'))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,count(B,(major(B),city(B),loc(B,C),const(C,stateid(arizona))),A))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ count ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ major ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="4"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="6"> *n:StateName -> ({ ' arizona ' }) </node>
</mrl-parse>
</example>

<example id="67">
<nl lang="en">
چند شهر عمده در فلوریدا هست ؟
</nl>
<nl lang="es">
cuantas ciudades mayores hay en florida ?
</nl>
<nl lang="ja">
furorida no ookina toshi wa nankasho desu ka ?
</nl>
<nl lang="tr">
florida da baslica kac tane sehir vardir ?
</nl>
<syn lang="en">
(S چند شهر عمده در فلوریدا هست ؟)
</syn>
<syn lang="es">
(S cuantas ciudades mayores hay en florida)
</syn>
<syn lang="ja">
(S furorida no ookina toshi wa nankasho desu ka)
</syn>
<syn lang="tr">
(S florida da baslica kac tane sehir vardir)
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] major-[City:2] cities-[City:3] are-[City:4] in-[City:4] Florida-[StateName:6])
</augsyn>
<mrl lang="geo-funql">
answer(count(major(city(loc_2(stateid('florida'))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,count(B,(major(B),city(B),loc(B,C),const(C,stateid(florida))),A))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ count ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ major ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="4"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="6"> *n:StateName -> ({ ' florida ' }) </node>
</mrl-parse>
</example>

<example id="68">
<nl lang="en">
استانهای همجوار نبراسکا چند شهر عمده دارند ؟
</nl>
<syn lang="en">
(S استانهای همجوار نبراسکا چند شهر عمده دارند ؟)
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] major-[City:2] cities-[City:3] are-[City:4] in-[City:4] states-[State:5] bordering-[State:6] Nebraska-[StateName:8])
</augsyn>
<mrl lang="geo-funql">
answer(count(major(city(loc_2(state(next_to_2(stateid('nebraska'))))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,count(B,(major(B),city(B),loc(B,C),state(C),next_to(C,D),const(D,stateid(nebraska))),A))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ count ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ major ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="4"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="6"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="7"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="8"> *n:StateName -> ({ ' nebraska ' }) </node>
</mrl-parse>
</example>

<example id="69">
<nl lang="en">
استانهای همجوار یوتاه چند شهر دارند ؟
</nl>
<syn lang="en">
(S استانهای همجوار یوتاه چند شهر دارند ؟)
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] major-[City:2] cities-[City:3] are-[City:4] in-[City:4] states-[State:5] bordering-[State:6] Utah-[StateName:8])
</augsyn>
<mrl lang="geo-funql">
answer(count(major(city(loc_2(state(next_to_2(stateid('utah'))))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,count(B,(major(B),city(B),loc(B,C),state(C),next_to(C,D),const(D,stateid(utah))),A))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ count ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ major ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="4"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="6"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="7"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="8"> *n:StateName -> ({ ' utah ' }) </node>
</mrl-parse>
</example>

<example id="70">
<nl lang="en">
تگزاس چند شهر عمده دارد ؟
</nl>
<syn lang="en">
(S تگزاس چند شهر عمده دارد ؟)
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] major-[City:2] cities-[City:3] are-[City:4] in-[City:4] Texas-[StateName:6])
</augsyn>
<mrl lang="geo-funql">
answer(count(major(city(loc_2(stateid('texas'))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,count(B,(major(B),city(B),loc(B,C),const(C,stateid(texas))),A))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ count ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ major ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="4"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="6"> *n:StateName -> ({ ' texas ' }) </node>
</mrl-parse>
</example>

<example id="71">
<nl lang="en">
چند شهر عمده داریم ؟
</nl>
<syn lang="en">
(S چند شهر عمده داریم ؟)
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] major-[City:2] cities-[City:3] are-[Num:1] there-[Num:1])
</augsyn>
<mrl lang="geo-funql">
answer(count(major(city(all))))
</mrl>
<mrl lang="geo-prolog">
answer(A,count(B,(major(B),city(B)),A))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ count ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ major ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ city ( all ) }) </node>
</mrl-parse>
</example>

<example id="72">
<nl lang="en">
چند شهر عمده در اورگان هست ؟
</nl>
<syn lang="en">
(S چند شهر عمده در اورگان هست ؟)
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] major-[City:2] cities-[City:3] are-[City:4] there-[City:4] in-[City:4] Oregon-[StateName:6])
</augsyn>
<mrl lang="geo-funql">
answer(count(major(city(loc_2(stateid('oregon'))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,count(B,(major(B),city(B),loc(B,C),const(C,stateid(oregon))),A))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ count ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ major ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="4"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="6"> *n:StateName -> ({ ' oregon ' }) </node>
</mrl-parse>
</example>

<example id="73">
<nl lang="en">
چند رودخانه بزرگ از اوهایو میگذرند ؟
</nl>
<nl lang="es">
cuantos rios mayores cruzan ohio ?
</nl>
<nl lang="ja">
okina kawa wa ohaio wo oodan ikutsu shimasu ka ?
</nl>
<nl lang="tr">
kac tane baslica nehir ohio dan gecer ?
</nl>
<syn lang="en">
(S چند رودخانه بزرگ از اوهایو میگذرند ؟)
</syn>
<syn lang="es">
(S cuantos rios mayores cruzan ohio)
</syn>
<syn lang="ja">
(S okina kawa wa ohaio wo oodan ikutsu shimasu ka)
</syn>
<syn lang="tr">
(S kac tane baslica nehir ohio dan gecer)
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] major-[River:2] rivers-[River:3] cross-[River:4] Ohio-[StateName:6])
</augsyn>
<mrl lang="geo-funql">
answer(count(major(river(traverse_2(stateid('ohio'))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,count(B,(major(B),river(B),traverse(B,C),const(C,stateid(ohio))),A))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ count ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ major ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="4"> *n:River -> ({ traverse_2 ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="6"> *n:StateName -> ({ ' ohio ' }) </node>
</mrl-parse>
</example>

<example id="74">
<nl lang="en">
چند نفر در ایالت نوادا زندگی میکنند ؟
</nl>
<syn lang="en">
(S چند نفر در ایالت نوادا زندگی میکنند ؟)
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] people-[Num:1] are-[Num:1] in-[Num:1] the state-[State:2] of-[State:2] Nevada-[StateName:4])
</augsyn>
<mrl lang="geo-funql">
answer(population_1(state(stateid('nevada'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(population(B,A),const(B,stateid(nevada))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ population_1 ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="4"> *n:StateName -> ({ ' nevada ' }) </node>
</mrl-parse>
</example>

<example id="75">
<nl lang="en">
چند نفر در آیووا زندگی میکنند ؟
</nl>
<syn lang="en">
(S چند نفر در آیووا زندگی میکنند ؟)
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] people-[Num:1] are-[Num:1] there-[Num:1] in-[Num:1] Iowa-[StateName:3])
</augsyn>
<mrl lang="geo-funql">
answer(population_1(stateid('iowa')))
</mrl>
<mrl lang="geo-prolog">
answer(A,(population(B,A),const(B,stateid(iowa))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ population_1 ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="3"> *n:StateName -> ({ ' iowa ' }) </node>
</mrl-parse>
</example>

<example id="76">
<nl lang="en">
چند نفر در نیویورک زندگی میکنند ؟
</nl>
<syn lang="en">
(S چند نفر در نیویورک زندگی میکنند ؟)
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] people-[Num:1] are-[Num:1] there-[Num:1] in-[Num:1] New-[StateName:3] York-[StateName:3])
</augsyn>
<mrl lang="geo-funql">
answer(population_1(stateid('new york')))
</mrl>
<mrl lang="geo-prolog">
answer(A,(population(B,A),const(B,stateid('new york'))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ population_1 ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="3"> *n:StateName -> ({ ' new york ' }) </node>
</mrl-parse>
</example>

<example id="77">
<nl lang="en">
چند نفر در بولدر زندگی میکنند ؟
</nl>
<syn lang="en">
(S چند نفر در بولدر زندگی میکنند ؟)
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] people-[Num:1] in-[Num:1] Boulder-[CityName:3])
</augsyn>
<mrl lang="geo-funql">
answer(population_1(cityid('boulder', _)))
</mrl>
<mrl lang="geo-prolog">
answer(A,(population(B,A),const(B,cityid(boulder,_))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ population_1 ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ cityid ( *n:CityName , _ ) }) </node>
<node id="3"> *n:CityName -> ({ ' boulder ' }) </node>
</mrl-parse>
</example>

<example id="78">
<nl lang="en">
چند نفر در آستین زندگی میکنند ؟
</nl>
<nl lang="es">
cuantas personas viven en austin ?
</nl>
<nl lang="ja">
ausuchin ni wa nannin no hito ga sumimasu ka ?
</nl>
<nl lang="tr">
austin da ne kadar insan yasamaktadir ?
</nl>
<syn lang="en">
(S چند نفر در آستین زندگی میکنند ؟)
</syn>
<syn lang="es">
(S cuantas personas viven en austin)
</syn>
<syn lang="ja">
(S ausuchin ni wa nannin no hito ga sumimasu ka)
</syn>
<syn lang="tr">
(S austin da ne kadar insan yasamaktadir)
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] people-[Num:1] live-[Num:1] in-[Num:1] Austin-[CityName:3])
</augsyn>
<mrl lang="geo-funql">
answer(population_1(cityid('austin', _)))
</mrl>
<mrl lang="geo-prolog">
answer(A,(population(B,A),const(B,cityid(austin,_))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ population_1 ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ cityid ( *n:CityName , _ ) }) </node>
<node id="3"> *n:CityName -> ({ ' austin ' }) </node>
</mrl-parse>
</example>

<example id="79">
<nl lang="en">
چند نفر در تگزاس آستین زندگی میکنند ؟
</nl>
<syn lang="en">
(S چند نفر در تگزاس آستین زندگی میکنند ؟)
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] people-[Num:1] live-[Num:1] in-[Num:1] Austin-[CityName:3] Texas-[StateAbbrev:4])
</augsyn>
<mrl lang="geo-funql">
answer(population_1(cityid('austin', 'tx')))
</mrl>
<mrl lang="geo-prolog">
answer(A,(population(B,A),const(B,cityid(austin,tx))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ population_1 ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ cityid ( *n:CityName , *n:StateAbbrev ) }) </node>
<node id="3"> *n:CityName -> ({ ' austin ' }) </node>
<node id="4"> *n:StateAbbrev -> ({ ' tx ' }) </node>
</mrl-parse>
</example>

<example id="80">
<nl lang="en">
چند نفر در کالیفرنیا زندگی میکنند ؟
</nl>
<nl lang="es">
cuantas personas viven en california ?
</nl>
<nl lang="ja">
karifuorunia ni wa nannin no hito ga sumimasu ka ?
</nl>
<nl lang="tr">
california da ne kadar insan yasamaktadir ?
</nl>
<syn lang="en">
(S چند نفر در کالیفرنیا زندگی میکنند ؟)
</syn>
<syn lang="es">
(S cuantas personas viven en california)
</syn>
<syn lang="ja">
(S karifuorunia ni wa nannin no hito ga sumimasu ka)
</syn>
<syn lang="tr">
(S california da ne kadar insan yasamaktadir)
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] people-[Num:1] live-[Num:1] in-[Num:1] California-[StateName:3])
</augsyn>
<mrl lang="geo-funql">
answer(population_1(stateid('california')))
</mrl>
<mrl lang="geo-prolog">
answer(A,(population(B,A),const(B,stateid(california))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ population_1 ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="3"> *n:StateName -> ({ ' california ' }) </node>
</mrl-parse>
</example>

<example id="81">
<nl lang="en">
چند نفر در شیکاگو زندگی میکنند ؟
</nl>
<syn lang="en">
(S چند نفر در شیکاگو زندگی میکنند ؟)
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] people-[Num:1] live-[Num:1] in-[Num:1] Chicago-[CityName:3])
</augsyn>
<mrl lang="geo-funql">
answer(population_1(cityid('chicago', _)))
</mrl>
<mrl lang="geo-prolog">
answer(A,(population(B,A),const(B,cityid(chicago,_))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ population_1 ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ cityid ( *n:CityName , _ ) }) </node>
<node id="3"> *n:CityName -> ({ ' chicago ' }) </node>
</mrl-parse>
</example>

<example id="82">
<nl lang="en">
چند نفر در دترویت زندگی میکنند ؟
</nl>
<syn lang="en">
(S چند نفر در دترویت زندگی میکنند ؟)
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] people-[Num:1] live-[Num:1] in-[Num:1] Detroit-[CityName:3])
</augsyn>
<mrl lang="geo-funql">
answer(population_1(cityid('detroit', _)))
</mrl>
<mrl lang="geo-prolog">
answer(A,(population(B,A),const(B,cityid(detroit,_))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ population_1 ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ cityid ( *n:CityName , _ ) }) </node>
<node id="3"> *n:CityName -> ({ ' detroit ' }) </node>
</mrl-parse>
</example>

<example id="83">
<nl lang="en">
چند نفر در هاوایی زندگی میکنند ؟
</nl>
<nl lang="es">
cuantas personas viven en hawaii ?
</nl>
<nl lang="ja">
hawai ni wa nannin no hito ga sumimasu ka ?
</nl>
<nl lang="tr">
hawaii da ne kadar insan yasamaktadir ?
</nl>
<syn lang="en">
(S چند نفر در هاوایی زندگی میکنند ؟)
</syn>
<syn lang="es">
(S cuantas personas viven en hawaii)
</syn>
<syn lang="ja">
(S hawai ni wa nannin no hito ga sumimasu ka)
</syn>
<syn lang="tr">
(S hawaii da ne kadar insan yasamaktadir)
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] people-[Num:1] live-[Num:1] in-[Num:1] Hawaii-[StateName:3])
</augsyn>
<mrl lang="geo-funql">
answer(population_1(stateid('hawaii')))
</mrl>
<mrl lang="geo-prolog">
answer(A,(population(B,A),const(B,stateid(hawaii))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ population_1 ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="3"> *n:StateName -> ({ ' hawaii ' }) </node>
</mrl-parse>
</example>

<example id="84">
<nl lang="en">
چند نفر در هوستون زندگی میکنند ؟
</nl>
<syn lang="en">
(S چند نفر در هوستون زندگی میکنند ؟)
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] people-[Num:1] live-[Num:1] in-[Num:1] Houston-[CityName:3])
</augsyn>
<mrl lang="geo-funql">
answer(population_1(cityid('houston', _)))
</mrl>
<mrl lang="geo-prolog">
answer(A,(population(B,A),const(B,cityid(houston,_))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ population_1 ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ cityid ( *n:CityName , _ ) }) </node>
<node id="3"> *n:CityName -> ({ ' houston ' }) </node>
</mrl-parse>
</example>

<example id="85">
<nl lang="en">
چند نفر در کالامازو زندگی میکنند ؟
</nl>
<nl lang="es">
cuantas personas viven en kalamazoo ?
</nl>
<nl lang="ja">
karamazuu ni wa nannin no hito ga sumimasu ka ?
</nl>
<nl lang="tr">
kalamazoo da ne kadar insan yasamaktadir ?
</nl>
<syn lang="en">
(S چند نفر در کالامازو زندگی میکنند ؟)
</syn>
<syn lang="es">
(S cuantas personas viven en kalamazoo)
</syn>
<syn lang="ja">
(S karamazuu ni wa nannin no hito ga sumimasu ka)
</syn>
<syn lang="tr">
(S kalamazoo da ne kadar insan yasamaktadir)
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] people-[Num:1] live-[Num:1] in-[Num:1] Kalamazoo-[CityName:3])
</augsyn>
<mrl lang="geo-funql">
answer(population_1(cityid('kalamazoo', _)))
</mrl>
<mrl lang="geo-prolog">
answer(A,(population(B,A),const(B,cityid(kalamazoo,_))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ population_1 ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ cityid ( *n:CityName , _ ) }) </node>
<node id="3"> *n:CityName -> ({ ' kalamazoo ' }) </node>
</mrl-parse>
</example>

<example id="86">
<nl lang="en">
چند نفر در کانزاس زندگی میکنند ؟
</nl>
<syn lang="en">
(S چند نفر در کانزاس زندگی میکنند ؟)
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] people-[Num:1] live-[Num:1] in-[Num:1] Kansas-[StateName:3])
</augsyn>
<mrl lang="geo-funql">
answer(population_1(stateid('kansas')))
</mrl>
<mrl lang="geo-prolog">
answer(A,(population(B,A),const(B,stateid(kansas))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ population_1 ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="3"> *n:StateName -> ({ ' kansas ' }) </node>
</mrl-parse>
</example>

<example id="87">
<nl lang="en">
چند نفر در مینیاپولیس مینهسوتا زندگی میکنند ؟
</nl>
<nl lang="es">
cuantas personas viven en minneapolis minnesota ?
</nl>
<nl lang="ja">
minesota no mineaporisu ni wa nannin no hito ga sumimasu ka ?
</nl>
<nl lang="tr">
minneapolis minnesota da ne kadar insan yasamaktadir ?
</nl>
<syn lang="en">
(S چند نفر در مینیاپولیس مینهسوتا زندگی میکنند ؟)
</syn>
<syn lang="es">
(S cuantas personas viven en minneapolis minnesota)
</syn>
<syn lang="ja">
(S minesota no mineaporisu ni wa nannin no hito ga sumimasu ka)
</syn>
<syn lang="tr">
(S minneapolis minnesota da ne kadar insan yasamaktadir)
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] people-[Num:1] live-[Num:1] in-[Num:1] Minneapolis-[CityName:3] Minnesota-[StateAbbrev:4])
</augsyn>
<mrl lang="geo-funql">
answer(population_1(cityid('minneapolis', 'mn')))
</mrl>
<mrl lang="geo-prolog">
answer(A,(population(B,A),const(B,cityid(minneapolis,mn))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ population_1 ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ cityid ( *n:CityName , *n:StateAbbrev ) }) </node>
<node id="3"> *n:CityName -> ({ ' minneapolis ' }) </node>
<node id="4"> *n:StateAbbrev -> ({ ' mn ' }) </node>
</mrl-parse>
</example>

<example id="88">
<nl lang="en">
چند نفر در میسیسیپی زندگی میکنند ؟
</nl>
<syn lang="en">
(S چند نفر در میسیسیپی زندگی میکنند ؟)
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] people-[Num:1] live-[Num:1] in-[Num:1] Mississippi-[StateName:3])
</augsyn>
<mrl lang="geo-funql">
answer(population_1(stateid('mississippi')))
</mrl>
<mrl lang="geo-prolog">
answer(A,(population(B,A),const(B,stateid(mississippi))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ population_1 ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="3"> *n:StateName -> ({ ' mississippi ' }) </node>
</mrl-parse>
</example>

<example id="89">
<nl lang="en">
چند نفر در مونتانا زندگی میکنند ؟
</nl>
<syn lang="en">
(S چند نفر در مونتانا زندگی میکنند ؟)
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] people-[Num:1] live-[Num:1] in-[Num:1] Montana-[StateName:3])
</augsyn>
<mrl lang="geo-funql">
answer(population_1(stateid('montana')))
</mrl>
<mrl lang="geo-prolog">
answer(A,(population(B,A),const(B,stateid(montana))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ population_1 ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="3"> *n:StateName -> ({ ' montana ' }) </node>
</mrl-parse>
</example>

<example id="90">
<nl lang="en">
چند نفر در نیوهمپشایر زندگی میکنند ؟
</nl>
<syn lang="en">
(S چند نفر در نیوهمپشایر زندگی میکنند ؟)
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] people-[Num:1] live-[Num:1] in-[Num:1] New-[StateName:3] Hampshire-[StateName:3])
</augsyn>
<mrl lang="geo-funql">
answer(population_1(stateid('new hampshire')))
</mrl>
<mrl lang="geo-prolog">
answer(A,(population(B,A),const(B,stateid('new hampshire'))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ population_1 ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="3"> *n:StateName -> ({ ' new hampshire ' }) </node>
</mrl-parse>
</example>

<example id="91">
<nl lang="en">
چند نفر در نیومکزیکو زندگی میکنند ؟
</nl>
<syn lang="en">
(S چند نفر در نیومکزیکو زندگی میکنند ؟)
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] people-[Num:1] live-[Num:1] in-[Num:1] New-[StateName:3] Mexico-[StateName:3])
</augsyn>
<mrl lang="geo-funql">
answer(population_1(stateid('new mexico')))
</mrl>
<mrl lang="geo-prolog">
answer(A,(population(B,A),const(B,stateid('new mexico'))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ population_1 ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="3"> *n:StateName -> ({ ' new mexico ' }) </node>
</mrl-parse>
</example>

<example id="92">
<nl lang="en">
چند نفر در نیویورک زندگی میکنند ؟
</nl>
<nl lang="es">
cuantas personas viven en new york ?
</nl>
<nl lang="ja">
nyuu yooku ni wa nannin no hito ga sumimasu ka ?
</nl>
<nl lang="tr">
new york da ne kadar insan yasamaktadir ?
</nl>
<syn lang="en">
(S چند نفر در نیویورک زندگی میکنند ؟)
</syn>
<syn lang="es">
(S cuantas personas viven en new_york)
</syn>
<syn lang="ja">
(S nyuu_yooku ni wa nannin no hito ga sumimasu ka)
</syn>
<syn lang="tr">
(S new_york da ne kadar insan yasamaktadir)
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] people-[Num:1] live-[Num:1] in-[Num:1] New-[StateName:3] York-[StateName:3])
</augsyn>
<mrl lang="geo-funql">
answer(population_1(stateid('new york')))
</mrl>
<mrl lang="geo-prolog">
answer(A,(population(B,A),const(B,stateid('new york'))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ population_1 ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="3"> *n:StateName -> ({ ' new york ' }) </node>
</mrl-parse>
</example>

<example id="93">
<nl lang="en">
چند نفر در رودآیلند زندگی میکنند ؟
</nl>
<nl lang="es">
cuantas personas viven en rhode island ?
</nl>
<nl lang="ja">
roodoairando ni wa nannin no hito ga sumimasu ka ?
</nl>
<nl lang="tr">
rhode island da ne kadar insan yasamaktadir ?
</nl>
<syn lang="en">
(S چند نفر در رودآیلند زندگی میکنند ؟)
</syn>
<syn lang="es">
(S cuantas personas viven en rhode_island)
</syn>
<syn lang="ja">
(S roodoairando ni wa nannin no hito ga sumimasu ka)
</syn>
<syn lang="tr">
(S rhode_island da ne kadar insan yasamaktadir)
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] people-[Num:1] live-[Num:1] in-[Num:1] Rhode-[StateName:3] Island-[StateName:3])
</augsyn>
<mrl lang="geo-funql">
answer(population_1(stateid('rhode island')))
</mrl>
<mrl lang="geo-prolog">
answer(A,(population(B,A),const(B,stateid('rhode island'))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ population_1 ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="3"> *n:StateName -> ({ ' rhode island ' }) </node>
</mrl-parse>
</example>

<example id="94">
<nl lang="en">
چند نفر در رایورساید زندگی میکنند ؟
</nl>
<nl lang="es">
cuantas personas viven en riverside ?
</nl>
<nl lang="ja">
ribaasaido ni wa nannin no hito ga sumimasu ka ?
</nl>
<nl lang="tr">
riverside da ne kadar insan yasamaktadir ?
</nl>
<syn lang="en">
(S چند نفر در رایورساید زندگی میکنند ؟)
</syn>
<syn lang="es">
(S cuantas personas viven en riverside)
</syn>
<syn lang="ja">
(S ribaasaido ni wa nannin no hito ga sumimasu ka)
</syn>
<syn lang="tr">
(S riverside da ne kadar insan yasamaktadir)
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] people-[Num:1] live-[Num:1] in-[Num:1] Riverside-[CityName:3])
</augsyn>
<mrl lang="geo-funql">
answer(population_1(cityid('riverside', _)))
</mrl>
<mrl lang="geo-prolog">
answer(A,(population(B,A),const(B,cityid(riverside,_))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ population_1 ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ cityid ( *n:CityName , _ ) }) </node>
<node id="3"> *n:CityName -> ({ ' riverside ' }) </node>
</mrl-parse>
</example>

<example id="95">
<nl lang="en">
چند نفر در سانفرانسیسکو زندگی میکنند ؟
</nl>
<syn lang="en">
(S چند نفر در سانفرانسیسکو زندگی میکنند ؟)
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] people-[Num:1] live-[Num:1] in-[Num:1] San-[CityName:3] Francisco-[CityName:3])
</augsyn>
<mrl lang="geo-funql">
answer(population_1(cityid('san francisco', _)))
</mrl>
<mrl lang="geo-prolog">
answer(A,(population(B,A),const(B,cityid('san francisco',_))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ population_1 ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ cityid ( *n:CityName , _ ) }) </node>
<node id="3"> *n:CityName -> ({ ' san francisco ' }) </node>
</mrl-parse>
</example>

<example id="96">
<nl lang="en">
چند نفر در داکوتای جنوبی زندگی میکنند ؟
</nl>
<syn lang="en">
(S چند نفر در داکوتای جنوبی زندگی میکنند ؟)
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] people-[Num:1] live-[Num:1] in-[Num:1] South-[StateName:3] Dakota-[StateName:3])
</augsyn>
<mrl lang="geo-funql">
answer(population_1(stateid('south dakota')))
</mrl>
<mrl lang="geo-prolog">
answer(A,(population(B,A),const(B,stateid('south dakota'))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ population_1 ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="3"> *n:StateName -> ({ ' south dakota ' }) </node>
</mrl-parse>
</example>

<example id="97">
<nl lang="en">
چند نفر در اسپوکین واشنگتن زندگی میکنند ؟
</nl>
<nl lang="es">
cuantas personas viven en spokane washington ?
</nl>
<nl lang="ja">
washinton no supoken ni wa nannin no hito ga sumimasu ka ?
</nl>
<nl lang="tr">
spokane washington da ne kadar insan yasamaktadir ?
</nl>
<syn lang="en">
(S چند نفر در اسپوکین واشنگتن زندگی میکنند ؟)
</syn>
<syn lang="es">
(S cuantas personas viven en spokane washington)
</syn>
<syn lang="ja">
(S washinton no supoken ni wa nannin no hito ga sumimasu ka)
</syn>
<syn lang="tr">
(S spokane washington da ne kadar insan yasamaktadir)
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] people-[Num:1] live-[Num:1] in-[Num:1] Spokane-[CityName:3] Washington-[StateAbbrev:4])
</augsyn>
<mrl lang="geo-funql">
answer(population_1(cityid('spokane', 'wa')))
</mrl>
<mrl lang="geo-prolog">
answer(A,(population(B,A),const(B,cityid(spokane,wa))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ population_1 ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ cityid ( *n:CityName , *n:StateAbbrev ) }) </node>
<node id="3"> *n:CityName -> ({ ' spokane ' }) </node>
<node id="4"> *n:StateAbbrev -> ({ ' wa ' }) </node>
</mrl-parse>
</example>

<example id="98">
<nl lang="en">
چند نفر در تگزاس زندگی میکنند ؟
</nl>
<syn lang="en">
(S چند نفر در تگزاس زندگی میکنند ؟)
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] people-[Num:1] live-[Num:1] in-[Num:1] Texas-[StateName:3])
</augsyn>
<mrl lang="geo-funql">
answer(population_1(stateid('texas')))
</mrl>
<mrl lang="geo-prolog">
answer(A,(population(B,A),const(B,stateid(texas))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ population_1 ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="3"> *n:StateName -> ({ ' texas ' }) </node>
</mrl-parse>
</example>

<example id="99">
<nl lang="en">
چند نفر در بزرگترین شهر نیویورک زندگی میکنند ؟
</nl>
<syn lang="en">
(S چند نفر در بزرگترین شهر نیویورک زندگی میکنند ؟)
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] people-[Num:1] live-[Num:1] in-[Num:1] the biggest-[City:2] city-[City:3] in-[City:4] New-[StateName:7] York-[StateName:7] state-[State:5])
</augsyn>
<mrl lang="geo-funql">
answer(population_1(largest(city(loc_2(state(stateid('new york')))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(population(B,A),largest(B,(city(B),loc(B,C),const(C,stateid('new york')),state(C)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ population_1 ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ largest ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="4"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="6"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="7"> *n:StateName -> ({ ' new york ' }) </node>
</mrl-parse>
</example>

<example id="100">
<nl lang="en">
چند نفر در مرکز جورجیا زندگی میکنند ؟
</nl>
<syn lang="en">
(S چند نفر در مرکز جورجیا زندگی میکنند ؟)
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] people-[Num:1] live-[Num:1] in-[Num:1] the capital-[City:2] of-[City:3] Georgia-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(population_1(capital(loc_2(stateid('georgia')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(population(B,A),capital(B),loc(B,C),const(C,stateid(georgia))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ population_1 ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ capital ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' georgia ' }) </node>
</mrl-parse>
</example>

<example id="101">
<nl lang="en">
چند نفر در مرکز تگزاس زندگی میکنند ؟
</nl>
<nl lang="es">
cuantas personas viven en la capital de texas ?
</nl>
<nl lang="ja">
tekisasu no shuto ni wa nannin no hito ga sumimasu ka ?
</nl>
<nl lang="tr">
texas in baskentinde ne kadar insan yasamaktadir ?
</nl>
<syn lang="en">
(S چند نفر در مرکز تگزاس زندگی میکنند ؟)
</syn>
<syn lang="es">
(S cuantas personas viven en la capital de texas)
</syn>
<syn lang="ja">
(S tekisasu no shuto ni wa nannin no hito ga sumimasu ka)
</syn>
<syn lang="tr">
(S texas in baskentinde ne kadar insan yasamaktadir)
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] people-[Num:1] live-[Num:1] in-[Num:1] the capital-[City:2] of-[City:3] Texas-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(population_1(capital(loc_2(stateid('texas')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(population(B,A),capital(B),loc(B,C),const(C,stateid(texas))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ population_1 ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ capital ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' texas ' }) </node>
</mrl-parse>
</example>

<example id="102">
<nl lang="en">
چند نفر در کوچکترین ایالت مجاور وایومینگ زندگی میکنند ؟
</nl>
<syn lang="en">
(S چند نفر در کوچکترین ایالت مجاور وایومینگ زندگی میکنند ؟)
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] people-[Num:1] live-[Num:1] in-[Num:1] the State:2-[State:2] state-[State:3] bordering-[State:4] Wyoming-[StateName:6])
</augsyn>
<mrl lang="geo-funql">
answer(population_1(smallest(state(next_to_2(stateid('wyoming'))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(population(B,A),smallest(B,(state(B),next_to(B,C),const(C,stateid(wyoming))))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ population_1 ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ smallest ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="6"> *n:StateName -> ({ ' wyoming ' }) </node>
</mrl-parse>
</example>

<example id="103">
<nl lang="en">
چند نفر در ایالت با بیشترین چگالی جمعیتی زندگی میکنند ؟
</nl>
<syn lang="en">
(S چند نفر در ایالت با بیشترین چگالی جمعیتی زندگی میکنند ؟)
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] people-[Num:1] live-[Num:1] in-[Num:1] the state-[State:3] with-[State:2] the largest-[State:2] population-[State:2] density-[State:2])
</augsyn>
<mrl lang="geo-funql">
answer(population_1(largest_one(density_1(state(all)))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(population(B,A),largest(C,(state(B),density(B,C)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ population_1 ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ largest_one ( density_1 ( *n:State ) ) }) </node>
<node id="3"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="104">
<nl lang="en">
چند نفر در ایالات متحده زندگی میکنند ؟
</nl>
<syn lang="en">
(S چند نفر در ایالات متحده زندگی میکنند ؟)
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] people-[Num:1] live-[Num:1] in-[Num:1] the United-[CountryName:3] States-[CountryName:3])
</augsyn>
<mrl lang="geo-funql">
answer(population_1(countryid('usa')))
</mrl>
<mrl lang="geo-prolog">
answer(A,(population(B,A),const(B,countryid(usa))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ population_1 ( *n:Country ) }) </node>
<node id="2"> *n:Country -> ({ countryid ( *n:CountryName ) }) </node>
<node id="3"> *n:CountryName -> ({ ' usa ' }) </node>
</mrl-parse>
</example>

<example id="105">
<nl lang="en">
چند نفر در واشنگتن زندگی میکنند ؟
</nl>
<nl lang="es">
cuantas personas viven en washington ?
</nl>
<nl lang="ja">
washinton ni wa nannin no hito ga sumimasu ka ?
</nl>
<nl lang="tr">
washington da ne kadar insan yasamaktadir ?
</nl>
<syn lang="en">
(S چند نفر در واشنگتن زندگی میکنند ؟)
</syn>
<syn lang="es">
(S cuantas personas viven en washington)
</syn>
<syn lang="ja">
(S washinton ni wa nannin no hito ga sumimasu ka)
</syn>
<syn lang="tr">
(S washington da ne kadar insan yasamaktadir)
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] people-[Num:1] live-[Num:1] in-[Num:1] Washington-[StateName:3])
</augsyn>
<mrl lang="geo-funql">
answer(population_1(stateid('washington')))
</mrl>
<mrl lang="geo-prolog">
answer(A,(population(B,A),const(B,stateid(washington))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ population_1 ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="3"> *n:StateName -> ({ ' washington ' }) </node>
</mrl-parse>
</example>

<example id="106">
<nl lang="en">
چند نفر در وایومینگ دی سی زندگی میکنند ؟
</nl>
<syn lang="en">
(S چند نفر در وایومینگ دی سی زندگی میکنند ؟)
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] people-[Num:1] live-[Num:1] in-[Num:1] Washington-[CityName:3] DC-[StateAbbrev:4])
</augsyn>
<mrl lang="geo-funql">
answer(population_1(cityid('washington', 'dc')))
</mrl>
<mrl lang="geo-prolog">
answer(A,(population(B,A),const(B,cityid(washington,dc))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ population_1 ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ cityid ( *n:CityName , *n:StateAbbrev ) }) </node>
<node id="3"> *n:CityName -> ({ ' washington ' }) </node>
<node id="4"> *n:StateAbbrev -> ({ ' dc ' }) </node>
</mrl-parse>
</example>

<example id="107">
<nl lang="en">
چند نفر در آستین زندگی میکنند ؟
</nl>
<syn lang="en">
(S چند نفر در آستین زندگی میکنند ؟)
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] people-[Num:1] lived-[Num:1] in-[Num:1] Austin-[CityName:3])
</augsyn>
<mrl lang="geo-funql">
answer(population_1(cityid('austin', _)))
</mrl>
<mrl lang="geo-prolog">
answer(A,(population(B,A),const(B,cityid(austin,_))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ population_1 ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ cityid ( *n:CityName , _ ) }) </node>
<node id="3"> *n:CityName -> ({ ' austin ' }) </node>
</mrl-parse>
</example>

<example id="108">
<nl lang="en">
چند نفر در یوتاه اقامت دارند ؟
</nl>
<syn lang="en">
(S چند نفر در یوتاه اقامت دارند ؟)
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] people-[Num:1] reside-[Num:1] in-[Num:1] Utah-[StateName:3])
</augsyn>
<mrl lang="geo-funql">
answer(population_1(stateid('utah')))
</mrl>
<mrl lang="geo-prolog">
answer(A,(population(B,A),const(B,stateid(utah))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ population_1 ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="3"> *n:StateName -> ({ ' utah ' }) </node>
</mrl-parse>
</example>

<example id="109">
<nl lang="en">
چند نفر در یوتاه زندگی میکنند ؟
</nl>
<syn lang="en">
(S چند نفر در یوتاه زندگی میکنند ؟)
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] people-[Num:1] stay-[Num:1] in-[Num:1] Utah-[StateName:3])
</augsyn>
<mrl lang="geo-funql">
answer(population_1(stateid('utah')))
</mrl>
<mrl lang="geo-prolog">
answer(A,(population(B,A),const(B,stateid(utah))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ population_1 ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="3"> *n:StateName -> ({ ' utah ' }) </node>
</mrl-parse>
</example>

<example id="110">
<nl lang="en">
چند نفر در تگزاس سکونت دارند ؟
</nl>
<syn lang="en">
(S چند نفر در تگزاس سکونت دارند ؟)
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] residents-[Num:1] live-[Num:1] in-[Num:1] Texas-[StateName:3])
</augsyn>
<mrl lang="geo-funql">
answer(population_1(stateid('texas')))
</mrl>
<mrl lang="geo-prolog">
answer(A,(population(B,A),const(B,stateid(texas))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ population_1 ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="3"> *n:StateName -> ({ ' texas ' }) </node>
</mrl-parse>
</example>

<example id="111">
<nl lang="en">
چند رودخانه کلرادو نامیده میشوند ؟
</nl>
<syn lang="en">
(S چند رودخانه کلرادو نامیده میشوند ؟)
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] rivers-[River:2] are-[River:2] called-[River:2] Colorado-[RiverName:4])
</augsyn>
<mrl lang="geo-funql">
answer(count(river(riverid('colorado'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,count(B,(river(B),const(B,riverid(colorado))),A))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ count ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ riverid ( *n:RiverName ) }) </node>
<node id="4"> *n:RiverName -> ({ ' colorado ' }) </node>
</mrl-parse>
</example>

<example id="112">
<nl lang="en">
چند رودخانه در کلرادو هست ؟
</nl>
<syn lang="en">
(S چند رودخانه در کلرادو هست ؟)
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] rivers-[River:2] are-[River:3] found-[River:3] in-[River:3] Colorado-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(count(river(loc_2(stateid('colorado')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,count(B,(river(B),loc(B,C),const(C,stateid(colorado))),A))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ count ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' colorado ' }) </node>
</mrl-parse>
</example>

<example id="113">
<nl lang="en">
چند رودخانه در کلرادو وجود دارد ؟
</nl>
<nl lang="es">
cuantos rios hay en colorado ?
</nl>
<nl lang="ja">
kororado ni wa kawa ga ikutsu arimasu ka ?
</nl>
<nl lang="tr">
colorado da kac tane nehir vardir ?
</nl>
<syn lang="en">
(S چند رودخانه در کلرادو وجود دارد ؟)
</syn>
<syn lang="es">
(S cuantos rios hay en colorado)
</syn>
<syn lang="ja">
(S kororado ni wa kawa ga ikutsu arimasu ka)
</syn>
<syn lang="tr">
(S colorado da kac tane nehir vardir)
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] rivers-[River:2] are-[River:3] in-[River:3] Colorado-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(count(river(loc_2(stateid('colorado')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,count(B,(river(B),loc(B,C),const(C,stateid(colorado))),A))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ count ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' colorado ' }) </node>
</mrl-parse>
</example>

<example id="114">
<nl lang="en">
چند رودخانه در آیووا وجود دارد ؟
</nl>
<syn lang="en">
(S چند رودخانه در آیووا وجود دارد ؟)
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] rivers-[River:2] are-[River:3] in-[River:3] Iowa-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(count(river(loc_2(stateid('iowa')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,count(B,(river(B),loc(B,C),const(C,stateid(iowa))),A))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ count ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' iowa ' }) </node>
</mrl-parse>
</example>

<example id="115">
<nl lang="en">
چند رودخانه در میسوری وجود دارد ؟
</nl>
<syn lang="en">
(S چند رودخانه در میسوری وجود دارد ؟)
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] rivers-[River:2] are-[River:3] in-[River:3] Missouri-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(count(river(loc_2(stateid('missouri')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,count(B,(river(B),loc(B,C),const(C,stateid(missouri))),A))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ count ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' missouri ' }) </node>
</mrl-parse>
</example>

<example id="116">
<nl lang="en">
چند رودخانه در نیویورک وجود دارد ؟
</nl>
<nl lang="es">
cuantos rios hay en new york ?
</nl>
<nl lang="ja">
nyuu yooku ni wa kawa ga ikutsu arimasu ka ?
</nl>
<nl lang="tr">
new york da kac tane nehir vardir ?
</nl>
<syn lang="en">
(S چند رودخانه در نیویورک وجود دارد ؟)
</syn>
<syn lang="es">
(S cuantos rios hay en new_york)
</syn>
<syn lang="ja">
(S nyuu_yooku ni wa kawa ga ikutsu arimasu ka)
</syn>
<syn lang="tr">
(S new_york da kac tane nehir vardir)
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] rivers-[River:2] are-[River:3] in-[River:3] New-[StateName:5] York-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(count(river(loc_2(stateid('new york')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,count(B,(river(B),loc(B,C),const(C,stateid('new york'))),A))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ count ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' new york ' }) </node>
</mrl-parse>
</example>

<example id="117">
<nl lang="en">
چند رودخانه در شهری که بیشترین رودخانه ها را دارد وجود دارد ؟
</nl>
<syn lang="en">
(S چند رودخانه در شهری که بیشترین رودخانه ها را دارد وجود دارد ؟)
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] rivers-[River:2] are-[River:3] in-[River:3] the state-[State:5] that has-[State:6] the most-[State:4] rivers-[River:7])
</augsyn>
<mrl lang="geo-funql">
answer(count(river(loc_2(most(state(loc_1(river(all))))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,count(B,(river(B),loc(B,C),most(C,D,(state(C),loc(D,C),river(D)))),A))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ count ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ most ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="6"> *n:State -> ({ loc_1 ( *n:River ) }) </node>
<node id="7"> *n:River -> ({ river ( all ) }) </node>
</mrl-parse>
</example>

<example id="118">
<nl lang="en">
چند رودخانه درشهری که بیشترین رودخانه ها را دارد هست ؟
</nl>
<syn lang="en">
(S چند رودخانه درشهری که بیشترین رودخانه ها را دارد هست ؟)
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] rivers-[River:2] are-[River:3] in-[River:3] the state-[State:4] with-[State:5] the highest-[Place:6] point-[Place:7])
</augsyn>
<mrl lang="geo-funql">
answer(count(river(loc_2(state(loc_1(highest(place(all))))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,count(B,(river(B),loc(B,C),state(C),loc(D,C),highest(D,place(D))),A))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ count ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ loc_1 ( *n:Place ) }) </node>
<node id="6"> *n:Place -> ({ highest ( *n:Place ) }) </node>
<node id="7"> *n:Place -> ({ place ( all ) }) </node>
</mrl-parse>
</example>

<example id="119">
<nl lang="en">
چند رودخانه در ایالتی که دارای بیشترین جمعیت است وجود دارد ؟
</nl>
<syn lang="en">
(S چند رودخانه در ایالتی که دارای بیشترین جمعیت است وجود دارد ؟)
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] rivers-[River:2] are-[River:3] in-[River:3] the state-[State:5] with-[State:4] the largest-[State:4] population-[State:4])
</augsyn>
<mrl lang="geo-funql">
answer(count(river(loc_2(largest_one(population_1(state(all)))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,count(B,(river(B),loc(B,C),largest(D,(state(C),population(C,D)))),A))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ count ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ largest_one ( population_1 ( *n:State ) ) }) </node>
<node id="5"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="120">
<nl lang="en">
چند رودخانه در آیداهو وجود دارد ؟
</nl>
<nl lang="es">
cuantos rios hay en idaho ?
</nl>
<nl lang="ja">
aidahou ni wa kawa ga ikutsu arimasu ka ?
</nl>
<nl lang="tr">
idaho da kac tane nehir vardir ?
</nl>
<syn lang="en">
(S چند رودخانه در آیداهو وجود دارد ؟)
</syn>
<syn lang="es">
(S cuantos rios hay en idaho)
</syn>
<syn lang="ja">
(S aidahou ni wa kawa ga ikutsu arimasu ka)
</syn>
<syn lang="tr">
(S idaho da kac tane nehir vardir)
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] rivers-[River:2] are-[River:3] there-[River:3] in-[River:3] Idaho-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(count(river(loc_2(stateid('idaho')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,count(B,(river(B),loc(B,C),const(C,stateid(idaho))),A))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ count ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' idaho ' }) </node>
</mrl-parse>
</example>

<example id="121">
<nl lang="en">
چند رودخانه در تگزاس وجود دارد ؟
</nl>
<syn lang="en">
(S چند رودخانه در تگزاس وجود دارد ؟)
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] rivers-[River:2] are-[River:3] there-[River:3] in-[River:3] Texas-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(count(river(loc_2(stateid('texas')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,count(B,(river(B),loc(B,C),const(C,stateid(texas))),A))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ count ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' texas ' }) </node>
</mrl-parse>
</example>

<example id="122">
<nl lang="en">
چند رودخانه در ایالات متحده وجود دارد ؟
</nl>
<syn lang="en">
(S چند رودخانه در ایالات متحده وجود دارد ؟)
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] rivers-[River:2] are-[River:3] there-[River:3] in-[River:3] US-[CountryName:5])
</augsyn>
<mrl lang="geo-funql">
answer(count(river(loc_2(countryid('usa')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,count(B,(river(B),loc(B,C),const(C,countryid(usa))),A))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ count ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ loc_2 ( *n:Country ) }) </node>
<node id="4"> *n:Country -> ({ countryid ( *n:CountryName ) }) </node>
<node id="5"> *n:CountryName -> ({ ' usa ' }) </node>
</mrl-parse>
</example>

<example id="123">
<nl lang="en">
چند رودخانه از ایالتی که مرکزش آلبانی است نمیگذرند ؟
</nl>
<syn lang="en">
(S چند رودخانه از ایالتی که مرکزش آلبانی است نمیگذرند ؟)
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] rivers-[River:3] do-[River:2] not-[River:2] traverse-[River:4] the state-[State:5] with-[State:6] the capital-[City:7] Albany-[CityName:9])
</augsyn>
<mrl lang="geo-funql">
answer(count(exclude(river(all), traverse_2(state(loc_1(capital(cityid('albany', _))))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,count(B,(river(B),not((traverse(B,C),state(C),loc(D,C),capital(D),const(D,cityid(albany,_))))),A))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ count ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ exclude ( *n:River , *n:River ) }) </node>
<node id="3"> *n:River -> ({ river ( all ) }) </node>
<node id="4"> *n:River -> ({ traverse_2 ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="6"> *n:State -> ({ loc_1 ( *n:City ) }) </node>
<node id="7"> *n:City -> ({ capital ( *n:City ) }) </node>
<node id="8"> *n:City -> ({ cityid ( *n:CityName , _ ) }) </node>
<node id="9"> *n:CityName -> ({ ' albany ' }) </node>
</mrl-parse>
</example>

<example id="124">
<nl lang="en">
آلاسکا چند رودخانه دارد ؟
</nl>
<nl lang="es">
cuantos rios tiene alaska ?
</nl>
<nl lang="ja">
arasuka wa kawa ga ikutsu arimasu ka ?
</nl>
<nl lang="tr">
alaska nun kac tane nehri vardir ?
</nl>
<syn lang="en">
(S آلاسکا چند رودخانه دارد ؟)
</syn>
<syn lang="es">
(S cuantos rios tiene alaska)
</syn>
<syn lang="ja">
(S arasuka wa kawa ga ikutsu arimasu ka)
</syn>
<syn lang="tr">
(S alaska nun kac tane nehri vardir)
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] rivers-[River:2] does-[River:3] Alaska-[StateName:5] have-[River:3])
</augsyn>
<mrl lang="geo-funql">
answer(count(river(loc_2(stateid('alaska')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,count(B,(river(B),const(C,stateid(alaska)),loc(B,C)),A))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ count ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' alaska ' }) </node>
</mrl-parse>
</example>

<example id="125">
<nl lang="en">
کلرادو چند رودخانه دارد ؟
</nl>
<nl lang="es">
cuantos rios tiene colorado ?
</nl>
<nl lang="ja">
kororado wa kawa ga ikutsu arimasu ka ?
</nl>
<nl lang="tr">
colorado nun kac tane nehri vardir ?
</nl>
<syn lang="en">
(S کلرادو چند رودخانه دارد ؟)
</syn>
<syn lang="es">
(S cuantos rios tiene colorado)
</syn>
<syn lang="ja">
(S kororado wa kawa ga ikutsu arimasu ka)
</syn>
<syn lang="tr">
(S colorado nun kac tane nehri vardir)
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] rivers-[River:2] does-[River:3] Colorado-[StateName:5] have-[River:3])
</augsyn>
<mrl lang="geo-funql">
answer(count(river(loc_2(stateid('colorado')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,count(B,(river(B),const(C,stateid(colorado)),loc(B,C)),A))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ count ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' colorado ' }) </node>
</mrl-parse>
</example>

<example id="126">
<nl lang="en">
چند رودخانه در تگزاس بلند تر از رد هست ؟
</nl>
<syn lang="en">
(S چند رودخانه در تگزاس بلند تر از رد هست ؟)
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] rivers-[River:3] in-[River:4] Texas-[StateName:6] are-[River:7] longer-[River:7] than-[River:7] the Red-[RiverName:9])
</augsyn>
<mrl lang="geo-funql">
answer(count(intersection(river(loc_2(stateid('texas'))), longer(riverid('red')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,count(B,(river(B),loc(B,C),const(C,stateid(texas)),longer(B,D),const(D,riverid(red))),A))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ count ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ intersection ( *n:River , *n:River ) }) </node>
<node id="3"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="4"> *n:River -> ({ loc_2 ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="6"> *n:StateName -> ({ ' texas ' }) </node>
<node id="7"> *n:River -> ({ longer ( *n:River ) }) </node>
<node id="8"> *n:River -> ({ riverid ( *n:RiverName ) }) </node>
<node id="9"> *n:RiverName -> ({ ' red ' }) </node>
</mrl-parse>
</example>

<example id="127">
<nl lang="en">
چند رودخانه در واشنگتن هست ؟
</nl>
<nl lang="es">
cuantos rios en washington ?
</nl>
<nl lang="ja">
washinton ni wa kawa ga ikutsu arimasu ka ?
</nl>
<nl lang="tr">
washington da kac tane nehir vardir ?
</nl>
<syn lang="en">
(S چند رودخانه در واشنگتن هست ؟)
</syn>
<syn lang="es">
(S cuantos rios en washington)
</syn>
<syn lang="ja">
(S washinton ni wa kawa ga ikutsu arimasu ka)
</syn>
<syn lang="tr">
(S washington da kac tane nehir vardir)
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] rivers-[River:2] in-[River:3] Washington-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(count(river(loc_2(stateid('washington')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,count(B,(river(B),loc(B,C),const(C,stateid(washington))),A))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ count ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' washington ' }) </node>
</mrl-parse>
</example>

<example id="128">
<nl lang="en">
چند رودخانه از تگزاس میگذرند ؟
</nl>
<syn lang="en">
(S چند رودخانه از تگزاس میگذرند ؟)
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] rivers-[River:2] run-[River:3] through-[River:3] Texas-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(count(river(traverse_2(stateid('texas')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,count(B,(river(B),traverse(B,C),const(C,stateid(texas))),A))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ count ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ traverse_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' texas ' }) </node>
</mrl-parse>
</example>

<example id="129">
<nl lang="en">
چند رودخانه از ایالات همجوار کلرادو میگذرند ؟
</nl>
<syn lang="en">
(S چند رودخانه از ایالات همجوار کلرادو میگذرند ؟)
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] rivers-[River:2] run-[River:3] through-[River:3] the states-[State:4] bordering-[State:5] Colorado-[StateName:7])
</augsyn>
<mrl lang="geo-funql">
answer(count(river(traverse_2(state(next_to_2(stateid('colorado')))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,count(B,(river(B),traverse(B,C),state(C),next_to(C,D),const(D,stateid(colorado))),A))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ count ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ traverse_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="6"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="7"> *n:StateName -> ({ ' colorado ' }) </node>
</mrl-parse>
</example>

<example id="130">
<nl lang="en">
ایالات متحد چند کیلومتر مربع وسعت دارد ؟
</nl>
<nl lang="es">
cuantos kilometros cuadrados en los us ?
</nl>
<nl lang="ja">
beikoku ni wa heihou kiromeetaa wa ikutsu arimasu ka ?
</nl>
<nl lang="tr">
us kac kilometrekaredir ?
</nl>
<syn lang="en">
(S ایالات متحد چند کیلومتر مربع وسعت دارد ؟)
</syn>
<syn lang="es">
(S cuantos kilometros cuadrados en los us)
</syn>
<syn lang="ja">
(S beikoku ni wa heihou kiromeetaa wa ikutsu arimasu ka)
</syn>
<syn lang="tr">
(S us kac kilometrekaredir)
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] square-[Num:1] kilometers-[Num:1] in-[Num:1] the US-[CountryName:3])
</augsyn>
<mrl lang="geo-funql">
answer(area_1(countryid('usa')))
</mrl>
<mrl lang="geo-prolog">
answer(A,(area(B,A),const(B,countryid(usa))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ area_1 ( *n:Country ) }) </node>
<node id="2"> *n:Country -> ({ countryid ( *n:CountryName ) }) </node>
<node id="3"> *n:CountryName -> ({ ' usa ' }) </node>
</mrl-parse>
</example>

<example id="131">
<nl lang="en">
ایالات متحده چند ایالت دارد ؟
</nl>
<syn lang="en">
(S ایالات متحده چند ایالت دارد ؟)
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] states-[State:2] are-[State:3] in-[State:3] the United-[CountryName:5] States-[CountryName:5])
</augsyn>
<mrl lang="geo-funql">
answer(count(state(loc_2(countryid('usa')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,count(B,(state(B),loc(B,C),const(C,countryid(usa))),A))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ count ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ loc_2 ( *n:Country ) }) </node>
<node id="4"> *n:Country -> ({ countryid ( *n:CountryName ) }) </node>
<node id="5"> *n:CountryName -> ({ ' usa ' }) </node>
</mrl-parse>
</example>

<example id="132">
<nl lang="en">
ایالات متحده چند ایالت دارد ؟
</nl>
<syn lang="en">
(S ایالات متحده چند ایالت دارد ؟)
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] states-[State:2] are-[State:3] in-[State:3] the USA-[CountryName:5])
</augsyn>
<mrl lang="geo-funql">
answer(count(state(loc_2(countryid('usa')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,count(B,(state(B),loc(B,C),const(C,countryid(usa))),A))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ count ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ loc_2 ( *n:Country ) }) </node>
<node id="4"> *n:Country -> ({ countryid ( *n:CountryName ) }) </node>
<node id="5"> *n:CountryName -> ({ ' usa ' }) </node>
</mrl-parse>
</example>

<example id="133">
<nl lang="en">
چند ایالت همجوار رودهای عمده هستند ؟
</nl>
<syn lang="en">
(S چند ایالت همجوار رودهای عمده هستند ؟)
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] states-[State:2] are-[State:3] next-[State:3] to-[State:3] major-[River:4] rivers-[River:5])
</augsyn>
<mrl lang="geo-funql">
answer(count(state(next_to_2(major(river(all))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,count(B,(state(B),next_to(B,C),major(C),river(C)),A))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ count ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ next_to_2 ( *n:River ) }) </node>
<node id="4"> *n:River -> ({ major ( *n:River ) }) </node>
<node id="5"> *n:River -> ({ river ( all ) }) </node>
</mrl-parse>
</example>

<example id="134">
<nl lang="en">
چند ایالت وجود دارد ؟
</nl>
<syn lang="en">
(S چند ایالت وجود دارد ؟)
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] states-[State:2] are-[Num:1] there-[Num:1])
</augsyn>
<mrl lang="geo-funql">
answer(count(state(all)))
</mrl>
<mrl lang="geo-prolog">
answer(A,count(B,state(B),A))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ count ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="135">
<nl lang="en">
چند ایالت در ایالات متحده وجود دارد ؟
</nl>
<syn lang="en">
(S چند ایالت در ایالات متحده وجود دارد ؟)
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] states-[State:2] are-[State:3] there-[State:3] in-[State:3] the USA-[CountryName:5])
</augsyn>
<mrl lang="geo-funql">
answer(count(state(loc_2(countryid('usa')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,count(B,(state(B),loc(B,C),const(C,countryid(usa))),A))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ count ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ loc_2 ( *n:Country ) }) </node>
<node id="4"> *n:Country -> ({ countryid ( *n:CountryName ) }) </node>
<node id="5"> *n:CountryName -> ({ ' usa ' }) </node>
</mrl-parse>
</example>

<example id="136">
<nl lang="en">
چند ایالت در ایالات متحده هست ؟
</nl>
<syn lang="en">
(S چند ایالت در ایالات متحده هست ؟)
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] states-[State:2] are-[State:3] there-[State:3] in-[State:3] United-[CountryName:5] States-[CountryName:5])
</augsyn>
<mrl lang="geo-funql">
answer(count(state(loc_2(countryid('usa')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,count(B,(state(B),loc(B,C),const(C,countryid(usa))),A))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ count ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ loc_2 ( *n:Country ) }) </node>
<node id="4"> *n:Country -> ({ countryid ( *n:CountryName ) }) </node>
<node id="5"> *n:CountryName -> ({ ' usa ' }) </node>
</mrl-parse>
</example>

<example id="137">
<nl lang="en">
چند ایالته همجوار آلاسکا هستند ؟
</nl>
<syn lang="en">
(S چند ایالته همجوار آلاسکا هستند ؟)
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] states-[State:2] border-[State:3] Alaska-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(count(state(next_to_2(stateid('alaska')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,count(B,(state(B),next_to(B,C),const(C,stateid(alaska))),A))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ count ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' alaska ' }) </node>
</mrl-parse>
</example>

<example id="138">
<nl lang="en">
چند ایالت حداقل یک ایالت هم جوار دارند ؟
</nl>
<syn lang="en">
(S چند ایالت حداقل یک ایالت هم جوار دارند ؟)
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] states-[State:2] border-[State:3] at-[State:4] least-[State:4] one-[State:4] other-[State:4] state-[State:4])
</augsyn>
<mrl lang="geo-funql">
answer(count(state(next_to_2(state(all)))))
</mrl>
<mrl lang="geo-prolog">
answer(A,count(B,(state(B),next_to(B,C),state(C)),A))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ count ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="139">
<nl lang="en">
چند ایالت همجوار کلرادو و نیومکزیکو هستند ؟
</nl>
<syn lang="en">
(S چند ایالت همجوار کلرادو و نیومکزیکو هستند ؟)
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] states-[State:2] border-[State:4] Colorado-[StateName:6] and-[State:3] border-[State:7] New-[StateName:9] Mexico-[StateName:9])
</augsyn>
<mrl lang="geo-funql">
answer(count(state(intersection(next_to_2(stateid('colorado')) , next_to_2(stateid('new mexico'))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,count(B,(state(B),next_to(B,C),const(C,stateid(colorado)),next_to(B,D),const(D,stateid('new mexico'))),A))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ count ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ intersection ( *n:State , *n:State ) }) </node>
<node id="4"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="6"> *n:StateName -> ({ ' colorado ' }) </node>
<node id="7"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="8"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="9"> *n:StateName -> ({ ' new mexico ' }) </node>
</mrl-parse>
</example>

<example id="140">
<nl lang="en">
چند ایالت همجوار هاوایی هستند ؟
</nl>
<syn lang="en">
(S چند ایالت همجوار هاوایی هستند ؟)
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] states-[State:2] border-[State:3] Hawaii-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(count(state(next_to_2(stateid('hawaii')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,count(B,(state(B),next_to(B,C),const(C,stateid(hawaii))),A))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ count ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' hawaii ' }) </node>
</mrl-parse>
</example>

<example id="141">
<nl lang="en">
چند ایالت همجوار آیووا هستند ؟
</nl>
<syn lang="en">
(S چند ایالت همجوار آیووا هستند ؟)
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] states-[State:2] border-[State:3] Iowa-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(count(state(next_to_2(stateid('iowa')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,count(B,(state(B),next_to(B,C),const(C,stateid(iowa))),A))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ count ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' iowa ' }) </node>
</mrl-parse>
</example>

<example id="142">
<nl lang="en">
چند ایالت همجاور ایالاتی هستند که مرکز آنها بوستون است ؟
</nl>
<syn lang="en">
(S چند ایالت همجاور ایالاتی هستند که مرکز آنها بوستون است ؟)
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] states-[State:2] border-[State:3] on-[State:3] the state-[State:4] whose-[State:5] capital-[City:6] is-[City:6] Boston-[CityName:8])
</augsyn>
<mrl lang="geo-funql">
answer(count(state(next_to_2(state(loc_1(capital(cityid('boston', _))))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,count(B,(state(B),next_to(B,C),state(C),loc(D,C),capital(D),const(D,cityid(boston,_))),A))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ count ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ loc_1 ( *n:City ) }) </node>
<node id="6"> *n:City -> ({ capital ( *n:City ) }) </node>
<node id="7"> *n:City -> ({ cityid ( *n:CityName , _ ) }) </node>
<node id="8"> *n:CityName -> ({ ' boston ' }) </node>
</mrl-parse>
</example>

<example id="143">
<nl lang="en">
چند ایالت همجوار تنسی هستند ؟
</nl>
<syn lang="en">
(S چند ایالت همجوار تنسی هستند ؟)
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] states-[State:2] border-[State:3] Tennessee-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(count(state(next_to_2(stateid('tennessee')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,count(B,(state(B),next_to(B,C),const(C,stateid(tennessee))),A))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ count ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' tennessee ' }) </node>
</mrl-parse>
</example>

<example id="144">
<nl lang="en">
چند ایالت همجوار تگزاس هستند ؟
</nl>
<syn lang="en">
(S چند ایالت همجوار تگزاس هستند ؟)
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] states-[State:2] border-[State:3] Texas-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(count(state(next_to_2(stateid('texas')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,count(B,(state(B),next_to(B,C),const(C,stateid(texas))),A))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ count ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' texas ' }) </node>
</mrl-parse>
</example>

<example id="145">
<nl lang="en">
چند ایالت همجوار بزگترین ایالت هستند ؟
</nl>
<syn lang="en">
(S چند ایالت همجوار بزگترین ایالت هستند ؟)
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] states-[State:2] border-[State:3] the largest-[State:4] state-[State:5])
</augsyn>
<mrl lang="geo-funql">
answer(count(state(next_to_2(largest(state(all))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,count(B,(state(B),next_to(B,C),largest(C,state(C))),A))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ count ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ largest ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="146">
<nl lang="en">
چند ایالت همجوار میسیسیپی هستند ؟
</nl>
<syn lang="en">
(S چند ایالت همجوار میسیسیپی هستند ؟)
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] states-[State:2] border-[State:3] the Mississippi-[RiverName:6] river-[River:4])
</augsyn>
<mrl lang="geo-funql">
answer(count(state(next_to_2(river(riverid('mississippi'))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,count(B,(state(B),next_to(B,C),const(C,riverid(mississippi)),river(C)),A))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ count ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ next_to_2 ( *n:River ) }) </node>
<node id="4"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="5"> *n:River -> ({ riverid ( *n:RiverName ) }) </node>
<node id="6"> *n:RiverName -> ({ ' mississippi ' }) </node>
</mrl-parse>
</example>

<example id="147">
<nl lang="en">
چند ایالت همجوار ایالتی هستند که همجوار ایالات بیشتری است ؟
</nl>
<syn lang="en">
(S چند ایالت همجوار ایالتی هستند که همجوار ایالات بیشتری است ؟)
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] states-[State:2] border-[State:3] the state-[State:5] that borders-[State:6] the most-[State:4] states-[State:7])
</augsyn>
<mrl lang="geo-funql">
answer(count(state(next_to_2(most(state(next_to_2(state(all))))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,count(B,(state(B),next_to(B,C),most(C,D,(state(C),next_to(C,D),state(D)))),A))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ count ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ most ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="6"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="7"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="148">
<nl lang="en">
چند ایالت همجوار ایالتی هستند که بیشترین جمعیت را دارد ؟
</nl>
<syn lang="en">
(S چند ایالت همجوار ایالتی هستند که بیشترین جمعیت را دارد ؟)
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] states-[State:2] border-[State:3] the state-[State:5] with-[State:4] the largest-[State:4] population-[State:4])
</augsyn>
<mrl lang="geo-funql">
answer(count(state(next_to_2(largest_one(population_1(state(all)))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,count(B,(state(B),next_to(B,C),largest(D,(state(C),population(C,D)))),A))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ count ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ largest_one ( population_1 ( *n:State ) ) }) </node>
<node id="5"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="149">
<nl lang="en">
چند ایالت رودخانه ندارند ؟
</nl>
<syn lang="en">
(S چند ایالت رودخانه ندارند ؟)
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] states-[State:3] do-[State:2] not-[State:2] have-[State:4] rivers-[River:5])
</augsyn>
<mrl lang="geo-funql">
answer(count(exclude(state(all), loc_1(river(all)))))
</mrl>
<mrl lang="geo-prolog">
answer(A,count(B,(state(B),not((loc(C,B),river(C)))),A))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ count ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ exclude ( *n:State , *n:State ) }) </node>
<node id="3"> *n:State -> ({ state ( all ) }) </node>
<node id="4"> *n:State -> ({ loc_1 ( *n:River ) }) </node>
<node id="5"> *n:River -> ({ river ( all ) }) </node>
</mrl-parse>
</example>

<example id="150">
<nl lang="en">
چند ایالت همجوار آیووا هستند ؟
</nl>
<syn lang="en">
(S چند ایالت همجوار آیووا هستند ؟)
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] states-[State:2] does-[State:3] Iowa-[StateName:5] border-[State:3])
</augsyn>
<mrl lang="geo-funql">
answer(count(state(next_to_1(stateid('iowa')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,count(B,(state(B),const(C,stateid(iowa)),next_to(C,B)),A))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ count ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ next_to_1 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' iowa ' }) </node>
</mrl-parse>
</example>

<example id="151">
<nl lang="en">
چند ایالت همجوار میسوری هستند ؟
</nl>
<syn lang="en">
(S چند ایالت همجوار میسوری هستند ؟)
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] states-[State:2] does-[State:3] Missouri-[StateName:5] border-[State:3])
</augsyn>
<mrl lang="geo-funql">
answer(count(state(next_to_1(stateid('missouri')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,count(B,(state(B),const(C,stateid(missouri)),next_to(C,B)),A))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ count ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ next_to_1 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' missouri ' }) </node>
</mrl-parse>
</example>

<example id="152">
<nl lang="en">
چند ایالت همجوار تنسی هستند ؟
</nl>
<syn lang="en">
(S چند ایالت همجوار تنسی هستند ؟)
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] states-[State:2] does-[State:3] Tennessee-[StateName:5] border-[State:3])
</augsyn>
<mrl lang="geo-funql">
answer(count(state(next_to_1(stateid('tennessee')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,count(B,(state(B),const(C,stateid(tennessee)),next_to(C,B)),A))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ count ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ next_to_1 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' tennessee ' }) </node>
</mrl-parse>
</example>

<example id="153">
<nl lang="en">
رودخانه کلرادو از چند ایالت عبور میکند ؟
</nl>
<syn lang="en">
(S رودخانه کلرادو از چند ایالت عبور میکند ؟)
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] states-[State:2] does-[State:3] the Colorado-[RiverName:6] river-[River:4] flow-[State:3] through-[State:3])
</augsyn>
<mrl lang="geo-funql">
answer(count(state(traverse_1(river(riverid('colorado'))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,count(B,(state(B),const(C,riverid(colorado)),river(C),traverse(C,B)),A))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ count ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ traverse_1 ( *n:River ) }) </node>
<node id="4"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="5"> *n:River -> ({ riverid ( *n:RiverName ) }) </node>
<node id="6"> *n:RiverName -> ({ ' colorado ' }) </node>
</mrl-parse>
</example>

<example id="154">
<nl lang="en">
رودخانه کلرادو از چند ایالت میگذرد ؟
</nl>
<nl lang="es">
por cuantos estados corre el rio colorado ?
</nl>
<nl lang="ja">
kororado kawa wa ikutsu no shuu wo nagarete imasu ka ?
</nl>
<nl lang="tr">
colorado nehri kac eyaletin icinden gecer ?
</nl>
<syn lang="en">
(S رودخانه کلرادو از چند ایالت میگذرد ؟)
</syn>
<syn lang="es">
(S por cuantos estados corre el rio colorado)
</syn>
<syn lang="ja">
(S kororado kawa wa ikutsu no shuu wo nagarete imasu ka)
</syn>
<syn lang="tr">
(S colorado nehri kac eyaletin icinden gecer)
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] states-[State:2] does-[State:3] the Colorado-[RiverName:6] river-[River:4] run-[State:3] through-[State:3])
</augsyn>
<mrl lang="geo-funql">
answer(count(state(traverse_1(river(riverid('colorado'))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,count(B,(state(B),const(C,riverid(colorado)),river(C),traverse(C,B)),A))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ count ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ traverse_1 ( *n:River ) }) </node>
<node id="4"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="5"> *n:River -> ({ riverid ( *n:RiverName ) }) </node>
<node id="6"> *n:RiverName -> ({ ' colorado ' }) </node>
</mrl-parse>
</example>

<example id="155">
<nl lang="en">
رودخانه میسیسیپی از چند ایالت میگذرد ؟
</nl>
<nl lang="es">
por cuantos estados corre el rio mississippi ?
</nl>
<nl lang="ja">
mishishippi kawa wa ikutsu no shuu wo nagarete imasu ka ?
</nl>
<nl lang="tr">
mississippi nehri kac tane eyaletten gecmektedir ?
</nl>
<syn lang="en">
(S رودخانه میسیسیپی از چند ایالت میگذرد ؟)
</syn>
<syn lang="es">
(S por cuantos estados corre el rio mississippi)
</syn>
<syn lang="ja">
(S mishishippi kawa wa ikutsu no shuu wo nagarete imasu ka)
</syn>
<syn lang="tr">
(S mississippi nehri kac tane eyaletten gecmektedir)
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] states-[State:2] does-[State:3] the Mississippi-[RiverName:6] river-[River:4] run-[State:3] through-[State:3])
</augsyn>
<mrl lang="geo-funql">
answer(count(state(traverse_1(river(riverid('mississippi'))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,count(B,(state(B),const(C,riverid(mississippi)),river(C),traverse(C,B)),A))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ count ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ traverse_1 ( *n:River ) }) </node>
<node id="4"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="5"> *n:River -> ({ riverid ( *n:RiverName ) }) </node>
<node id="6"> *n:RiverName -> ({ ' mississippi ' }) </node>
</mrl-parse>
</example>

<example id="156">
<nl lang="en">
رودخانه میسیسیپی از چند ایالت عبور میکند ؟
</nl>
<syn lang="en">
(S رودخانه میسیسیپی از چند ایالت عبور میکند ؟)
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] states-[State:2] does-[State:3] the Mississippi-[RiverName:5] run-[State:3] through-[State:3])
</augsyn>
<mrl lang="geo-funql">
answer(count(state(traverse_1(riverid('mississippi')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,count(B,(state(B),const(C,riverid(mississippi)),traverse(C,B)),A))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ count ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ traverse_1 ( *n:River ) }) </node>
<node id="4"> *n:River -> ({ riverid ( *n:RiverName ) }) </node>
<node id="5"> *n:RiverName -> ({ ' mississippi ' }) </node>
</mrl-parse>
</example>

<example id="157">
<nl lang="en">
رودخانه میسوری از چند ایالت میگذرد ؟
</nl>
<syn lang="en">
(S رودخانه میسوری از چند ایالت میگذرد ؟)
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] states-[State:2] does-[State:3] the Missouri-[RiverName:6] river-[River:4] run-[State:3] through-[State:3])
</augsyn>
<mrl lang="geo-funql">
answer(count(state(traverse_1(river(riverid('missouri'))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,count(B,(state(B),const(C,riverid(missouri)),river(C),traverse(C,B)),A))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ count ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ traverse_1 ( *n:River ) }) </node>
<node id="4"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="5"> *n:River -> ({ riverid ( *n:RiverName ) }) </node>
<node id="6"> *n:RiverName -> ({ ' missouri ' }) </node>
</mrl-parse>
</example>

<example id="158">
<nl lang="en">
ایالات متحده چند ایالت دارد ؟
</nl>
<syn lang="en">
(S ایالات متحده چند ایالت دارد ؟)
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] states-[State:2] does-[State:3] USA-[CountryName:5] have-[State:3])
</augsyn>
<mrl lang="geo-funql">
answer(count(state(loc_2(countryid('usa')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,count(B,(state(B),const(C,countryid(usa)),loc(B,C)),A))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ count ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ loc_2 ( *n:Country ) }) </node>
<node id="4"> *n:Country -> ({ countryid ( *n:CountryName ) }) </node>
<node id="5"> *n:CountryName -> ({ ' usa ' }) </node>
</mrl-parse>
</example>

<example id="159">
<nl lang="en">
چند ایلات شهری به نام روچستر دارند ؟
</nl>
<syn lang="en">
(S چند ایلات شهری به نام روچستر دارند ؟)
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] states-[State:2] have-[State:3] a-[City:4] city-[City:4] called-[City:4] Rochester-[CityName:6])
</augsyn>
<mrl lang="geo-funql">
answer(count(state(loc_1(city(cityid('rochester', _))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,count(B,(state(B),loc(C,B),const(C,cityid(rochester,_))),A))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ count ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ loc_1 ( *n:City ) }) </node>
<node id="4"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="5"> *n:City -> ({ cityid ( *n:CityName , _ ) }) </node>
<node id="6"> *n:CityName -> ({ ' rochester ' }) </node>
</mrl-parse>
</example>

<example id="160">
<nl lang="en">
چند ایلات شهری به نام اسپرینگفیلد دارند ؟
</nl>
<syn lang="en">
(S چند ایلات شهری به نام اسپرینگفیلد دارند ؟)
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] states-[State:2] have-[State:3] a-[City:4] city-[City:4] named-[City:4] Springfield-[CityName:6])
</augsyn>
<mrl lang="geo-funql">
answer(count(state(loc_1(city(cityid('springfield', _))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,count(B,(state(B),loc(C,B),const(C,cityid(springfield,_))),A))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ count ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ loc_1 ( *n:City ) }) </node>
<node id="4"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="5"> *n:City -> ({ cityid ( *n:CityName , _ ) }) </node>
<node id="6"> *n:CityName -> ({ ' springfield ' }) </node>
</mrl-parse>
</example>

<example id="161">
<nl lang="en">
چند ایالت نقطه ای مرتفع تر از مرتفعترین نقطه پرجمعیت ترین شهر آمریکا دارند ؟
</nl>
<syn lang="en">
(S چند ایالت نقطه ای مرتفع تر از مرتفعترین نقطه پرجمعیت ترین شهر آمریکا دارند ؟)
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] states-[State:2] have-[State:3] a-[Place:4] higher-[Place:5] point-[Place:4] than-[Place:5] the highest-[Place:6] point-[Place:7] of-[Place:8] the state-[State:9] with-[State:10] the largest-[City:11] capital-[City:12] city-[City:13] in-[City:14] the US-[CountryName:16])
</augsyn>
<mrl lang="geo-funql">
answer(count(state(loc_1(place(higher_2(highest(place(loc_2(state(loc_1(largest(capital(city(loc_2(countryid('usa'))))))))))))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,count(B,(state(B),loc(C,B),higher(C,D),place(C),highest(D,(place(D),loc(D,E),state(E),loc(F,E),largest(F,(capital(F),city(F),loc(F,G),const(G,countryid(usa))))))),A))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ count ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ loc_1 ( *n:Place ) }) </node>
<node id="4"> *n:Place -> ({ place ( *n:Place ) }) </node>
<node id="5"> *n:Place -> ({ higher_2 ( *n:Place ) }) </node>
<node id="6"> *n:Place -> ({ highest ( *n:Place ) }) </node>
<node id="7"> *n:Place -> ({ place ( *n:Place ) }) </node>
<node id="8"> *n:Place -> ({ loc_2 ( *n:State ) }) </node>
<node id="9"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="10"> *n:State -> ({ loc_1 ( *n:City ) }) </node>
<node id="11"> *n:City -> ({ largest ( *n:City ) }) </node>
<node id="12"> *n:City -> ({ capital ( *n:City ) }) </node>
<node id="13"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="14"> *n:City -> ({ loc_2 ( *n:Country ) }) </node>
<node id="15"> *n:Country -> ({ countryid ( *n:CountryName ) }) </node>
<node id="16"> *n:CountryName -> ({ ' usa ' }) </node>
</mrl-parse>
</example>

<example id="162">
<nl lang="en">
چند ایالت شهر یا دهکده ای به نام آستین دارند ؟
</nl>
<syn lang="en">
(S چند ایالت شهر یا دهکده ای به نام آستین دارند ؟)
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] states-[State:2] have-[State:3] cities-[City:4] named-[City:4] Austin-[CityName:6])
</augsyn>
<mrl lang="geo-funql">
answer(count(state(loc_1(city(cityid('austin', _))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,count(B,(state(B),loc(C,B),city(C),const(C,cityid(austin,_))),A))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ count ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ loc_1 ( *n:City ) }) </node>
<node id="4"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="5"> *n:City -> ({ cityid ( *n:CityName , _ ) }) </node>
<node id="6"> *n:CityName -> ({ ' austin ' }) </node>
</mrl-parse>
</example>

<example id="163">
<nl lang="en">
چند ایالت شهر یا دهکده ای به نام اسپرینگفیلد دارند ؟
</nl>
<syn lang="en">
(S چند ایالت شهر یا دهکده ای به نام اسپرینگفیلد دارند ؟)
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] states-[State:2] have-[State:3] cities-[City:4] or-[City:4] towns-[City:4] named-[City:4] Springfield-[CityName:6])
</augsyn>
<mrl lang="geo-funql">
answer(count(state(loc_1(city(cityid('springfield', _))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,count(B,(state(B),loc(C,B),city(C),const(C,cityid(springfield,_))),A))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ count ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ loc_1 ( *n:City ) }) </node>
<node id="4"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="5"> *n:City -> ({ cityid ( *n:CityName , _ ) }) </node>
<node id="6"> *n:CityName -> ({ ' springfield ' }) </node>
</mrl-parse>
</example>

<example id="164">
<nl lang="en">
چند ایالت رودخانه عمده ای دارند ؟
</nl>
<syn lang="en">
(S چند ایالت رودخانه عمده ای دارند ؟)
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] states-[State:2] have-[State:3] major-[River:4] rivers-[River:5])
</augsyn>
<mrl lang="geo-funql">
answer(count(state(loc_1(major(river(all))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,count(B,(state(B),loc(C,B),major(C),river(C)),A))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ count ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ loc_1 ( *n:River ) }) </node>
<node id="4"> *n:River -> ({ major ( *n:River ) }) </node>
<node id="5"> *n:River -> ({ river ( all ) }) </node>
</mrl-parse>
</example>

<example id="165">
<nl lang="en">
کوتاهترین رود از چند ایالت در ایالات متحده میگذرد ؟
</nl>
<syn lang="en">
(S کوتاهترین رود از چند ایالت در ایالات متحده میگذرد ؟)
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] states-[State:3] in-[State:4] the US-[CountryName:6] does-[State:7] the shortest-[River:8] river-[River:9] run-[State:7] through-[State:7])
</augsyn>
<mrl lang="geo-funql">
answer(count(intersection(state(loc_2(countryid('usa'))),traverse_1(shortest(river(all))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,count(B,(state(B),loc(B,C),const(C,countryid(usa)),shortest(D,river(D)),traverse(D,B)),A))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ count ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ intersection ( *n:State , *n:State ) }) </node>
<node id="3"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ loc_2 ( *n:Country ) }) </node>
<node id="5"> *n:Country -> ({ countryid ( *n:CountryName ) }) </node>
<node id="6"> *n:CountryName -> ({ ' usa ' }) </node>
<node id="7"> *n:State -> ({ traverse_1 ( *n:River ) }) </node>
<node id="8"> *n:River -> ({ shortest ( *n:River ) }) </node>
<node id="9"> *n:River -> ({ river ( all ) }) </node>
</mrl-parse>
</example>

<example id="166">
<nl lang="en">
تگزاس چقدر جمعیت دارد ؟
</nl>
<syn lang="en">
(S تگزاس چقدر جمعیت دارد ؟)
</syn>
<augsyn lang="en">
(S How-[Num:1] much-[Num:1] population-[Num:1] does-[Num:1] Texas-[StateName:3] have-[Num:1])
</augsyn>
<mrl lang="geo-funql">
answer(population_1(stateid('texas')))
</mrl>
<mrl lang="geo-prolog">
answer(A,(population(B,A),const(B,stateid(texas))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ population_1 ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="3"> *n:StateName -> ({ ' texas ' }) </node>
</mrl-parse>
</example>

<example id="167">
<nl lang="en">
ارتفاع مک کینلی چقدر است ؟
</nl>
<syn lang="en">
(S ارتفاع مک کینلی چقدر است ؟)
</syn>
<augsyn lang="en">
(S How-[Num:1] tall-[Num:1] is-[Num:1] Mount-[PlaceName:3] McKinley-[PlaceName:3])
</augsyn>
<mrl lang="geo-funql">
answer(elevation_1(placeid('mount mckinley')))
</mrl>
<mrl lang="geo-prolog">
answer(A,(elevation(B,A),const(B,placeid('mount mckinley'))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ elevation_1 ( *n:Place ) }) </node>
<node id="2"> *n:Place -> ({ placeid ( *n:PlaceName ) }) </node>
<node id="3"> *n:PlaceName -> ({ ' mount mckinley ' }) </node>
</mrl-parse>
</example>

<example id="168">
<nl lang="en">
مرتفع ترین نقطه مونتانا چقدر ارتفاع دارد ؟
</nl>
<syn lang="en">
(S مرتفع ترین نقطه مونتانا چقدر ارتفاع دارد ؟)
</syn>
<augsyn lang="en">
(S How-[Num:1] tall-[Num:1] is-[Num:1] the highest-[Place:2] point-[Place:3] in-[Place:4] Montana-[StateName:6])
</augsyn>
<mrl lang="geo-funql">
answer(elevation_1(highest(place(loc_2(stateid('montana'))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(elevation(B,A),highest(B,(place(B),loc(B,C),const(C,stateid(montana))))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ elevation_1 ( *n:Place ) }) </node>
<node id="2"> *n:Place -> ({ highest ( *n:Place ) }) </node>
<node id="3"> *n:Place -> ({ place ( *n:Place ) }) </node>
<node id="4"> *n:Place -> ({ loc_2 ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="6"> *n:StateName -> ({ ' montana ' }) </node>
</mrl-parse>
</example>

<example id="169">
<nl lang="en">
مونت مک کینلی در کدام ایالت واقع شده است ؟
</nl>
<syn lang="en">
(S مونت مک کینلی در کدام ایالت واقع شده است ؟)
</syn>
<augsyn lang="en">
(S In-[State:2] what-[Query:0] state-[State:1] is-[State:2] Mount-[PlaceName:4] McKinley-[PlaceName:4])
</augsyn>
<mrl lang="geo-funql">
answer(state(loc_1(placeid('mount mckinley'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(loc(B,A),state(A),const(B,placeid('mount mckinley'))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ loc_1 ( *n:Place ) }) </node>
<node id="3"> *n:Place -> ({ placeid ( *n:PlaceName ) }) </node>
<node id="4"> *n:PlaceName -> ({ ' mount mckinley ' }) </node>
</mrl-parse>
</example>

<example id="170">
<nl lang="en">
بلندترین نقطه ایالات متحده در کدام ایالت واقع شده است ؟
</nl>
<syn lang="en">
(S بلندترین نقطه ایالات متحده در کدام ایالت واقع شده است ؟)
</syn>
<augsyn lang="en">
(S In-[State:2] which state-[State:1] does-[State:2] the highest-[Place:3] point-[Place:4] in-[Place:5] USA-[CountryName:7] exist-[State:2])
</augsyn>
<mrl lang="geo-funql">
answer(state(loc_1(highest(place(loc_2(countryid('usa')))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(loc(B,A),state(A),highest(B,(place(B),loc(B,C),const(C,countryid(usa))))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ loc_1 ( *n:Place ) }) </node>
<node id="3"> *n:Place -> ({ highest ( *n:Place ) }) </node>
<node id="4"> *n:Place -> ({ place ( *n:Place ) }) </node>
<node id="5"> *n:Place -> ({ loc_2 ( *n:Country ) }) </node>
<node id="6"> *n:Country -> ({ countryid ( *n:CountryName ) }) </node>
<node id="7"> *n:CountryName -> ({ ' usa ' }) </node>
</mrl-parse>
</example>

<example id="171">
<nl lang="en">
روچستر در کدام ایالت واقع شده است ؟
</nl>
<syn lang="en">
(S روچستر در کدام ایالت واقع شده است ؟)
</syn>
<augsyn lang="en">
(S In-[State:2] which state-[State:1] is-[State:2] Rochester-[CityName:4])
</augsyn>
<mrl lang="geo-funql">
answer(state(loc_1(cityid('rochester', _))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(loc(B,A),state(A),const(B,cityid(rochester,_))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ loc_1 ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ cityid ( *n:CityName , _ ) }) </node>
<node id="4"> *n:CityName -> ({ ' rochester ' }) </node>
</mrl-parse>
</example>

<example id="172">
<nl lang="en">
آیووا با چند ایالت همجوار است ؟
</nl>
<syn lang="en">
(S آیووا با چند ایالت همجوار است ؟)
</syn>
<augsyn lang="en">
(S Iowa-[StateName:5] borders-[State:3] how-[Num:1] many-[Num:1] states-[State:2])
</augsyn>
<mrl lang="geo-funql">
answer(count(state(next_to_1(stateid('iowa')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,count(B,(const(C,stateid(iowa)),next_to(C,B),state(B)),A))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ count ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ next_to_1 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' iowa ' }) </node>
</mrl-parse>
</example>

<example id="173">
<nl lang="en">
ایالت ها را فهرست کن .
</nl>
<syn lang="en">
(S ایالت ها را فهرست کن .)
</syn>
<augsyn lang="en">
(S List-[Query:0] the states-[State:1])
</augsyn>
<mrl lang="geo-funql">
answer(state(all))
</mrl>
<mrl lang="geo-prolog">
answer(A,state(A))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="174">
<nl lang="en">
همه دریاچه های ایالات متحده را نام ببر .
</nl>
<syn lang="en">
(S همه دریاچه های ایالات متحده را نام ببر .)
</syn>
<augsyn lang="en">
(S Name-[Query:0] all-[Place:1] the lakes-[Place:1] of-[Place:2] US-[CountryName:4])
</augsyn>
<mrl lang="geo-funql">
answer(lake(loc_2(countryid('usa'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(lake(A),loc(A,B),const(B,countryid(usa))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Place ) }) </node>
<node id="1"> *n:Place -> ({ lake ( *n:Place ) }) </node>
<node id="2"> *n:Place -> ({ loc_2 ( *n:Country ) }) </node>
<node id="3"> *n:Country -> ({ countryid ( *n:CountryName ) }) </node>
<node id="4"> *n:CountryName -> ({ ' usa ' }) </node>
</mrl-parse>
</example>

<example id="175">
<nl lang="en">
همه رودخانه های کلرادو را نام ببر .
</nl>
<nl lang="es">
nombra todos los rios en colorado .
</nl>
<nl lang="ja">
kororado no kawa wo zenbu agete kudasai .
</nl>
<nl lang="tr">
colorado daki butun nehirlerin isimlerini ver .
</nl>
<syn lang="en">
(S همه رودخانه های کلرادو را نام ببر .)
</syn>
<syn lang="es">
(S nombra todos los rios en colorado)
</syn>
<syn lang="ja">
(S kororado no kawa wo zenbu agete kudasai)
</syn>
<syn lang="tr">
(S colorado daki butun nehirlerin isimlerini ver)
</syn>
<augsyn lang="en">
(S Name-[Query:0] all-[River:1] the rivers-[River:1] in-[River:2] Colorado-[StateName:4])
</augsyn>
<mrl lang="geo-funql">
answer(river(loc_2(stateid('colorado'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(river(A),loc(A,B),const(B,stateid(colorado))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:River ) }) </node>
<node id="1"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ loc_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="4"> *n:StateName -> ({ ' colorado ' }) </node>
</mrl-parse>
</example>

<example id="176">
<nl lang="en">
50 مرکز ایالت در ایالات متحده نام ببر .
</nl>
<syn lang="en">
(S 50 مرکز ایالت در ایالات متحده نام ببر .)
</syn>
<augsyn lang="en">
(S Name-[Query:0] the 50-[City:1] capitals-[City:1] in-[City:2] the USA-[CountryName:4])
</augsyn>
<mrl lang="geo-funql">
answer(capital(loc_2(countryid('usa'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(capital(A),loc(A,B),const(B,countryid(usa))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ capital ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ loc_2 ( *n:Country ) }) </node>
<node id="3"> *n:Country -> ({ countryid ( *n:CountryName ) }) </node>
<node id="4"> *n:CountryName -> ({ ' usa ' }) </node>
</mrl-parse>
</example>

<example id="177">
<nl lang="en">
بلندترین رودخانه ایالات متحده را نام ببر .
</nl>
<syn lang="en">
(S بلندترین رودخانه ایالات متحده را نام ببر .)
</syn>
<augsyn lang="en">
(S Name-[Query:0] the longest-[River:1] river-[River:2] in-[River:3] US-[CountryName:5])
</augsyn>
<mrl lang="geo-funql">
answer(longest(river(loc_2(countryid('usa')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,longest(A,(river(A),loc(A,B),const(B,countryid(usa)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:River ) }) </node>
<node id="1"> *n:River -> ({ longest ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ loc_2 ( *n:Country ) }) </node>
<node id="4"> *n:Country -> ({ countryid ( *n:CountryName ) }) </node>
<node id="5"> *n:CountryName -> ({ ' usa ' }) </node>
</mrl-parse>
</example>

<example id="178">
<nl lang="en">
دریاچه های عمده میشیگان را نام ببر .
</nl>
<syn lang="en">
(S دریاچه های عمده میشیگان را نام ببر .)
</syn>
<augsyn lang="en">
(S Name-[Query:0] the major-[Place:1] lakes-[Place:2] in-[Place:3] Michigan-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(major(lake(loc_2(stateid('michigan')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(major(A),lake(A),loc(A,B),const(B,stateid(michigan))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Place ) }) </node>
<node id="1"> *n:Place -> ({ major ( *n:Place ) }) </node>
<node id="2"> *n:Place -> ({ lake ( *n:Place ) }) </node>
<node id="3"> *n:Place -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' michigan ' }) </node>
</mrl-parse>
</example>

<example id="179">
<nl lang="en">
رودخانه های عمده فلوریدا را نام ببر .
</nl>
<syn lang="en">
(S رودخانه های عمده فلوریدا را نام ببر .)
</syn>
<augsyn lang="en">
(S Name-[Query:0] the major-[River:1] rivers-[River:2] in-[River:3] Florida-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(major(river(loc_2(stateid('florida')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(major(A),river(A),loc(A,B),const(B,stateid(florida))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:River ) }) </node>
<node id="1"> *n:River -> ({ major ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' florida ' }) </node>
</mrl-parse>
</example>

<example id="180">
<nl lang="en">
رودخانه های آرکانزاس را نام ببر .
</nl>
<syn lang="en">
(S رودخانه های آرکانزاس را نام ببر .)
</syn>
<augsyn lang="en">
(S Name-[Query:0] the rivers-[River:1] in-[River:2] Arkansas-[StateName:4])
</augsyn>
<mrl lang="geo-funql">
answer(river(loc_2(stateid('arkansas'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(river(A),loc(A,B),const(B,stateid(arkansas))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:River ) }) </node>
<node id="1"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ loc_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="4"> *n:StateName -> ({ ' arkansas ' }) </node>
</mrl-parse>
</example>

<example id="181">
<nl lang="en">
ایالت هایی که ایالت همجواری ندارد را نام ببر .
</nl>
<syn lang="en">
(S ایالت هایی که ایالت همجواری ندارد را نام ببر .)
</syn>
<augsyn lang="en">
(S Name-[Query:0] the states-[State:2] which have-[State:1] no-[State:1] surrounding-[State:3] states-[State:4])
</augsyn>
<mrl lang="geo-funql">
answer(exclude(state(all), next_to_2(state(all))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),not((next_to(A,B),state(B)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ exclude ( *n:State , *n:State ) }) </node>
<node id="2"> *n:State -> ({ state ( all ) }) </node>
<node id="3"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="182">
<nl lang="en">
در بولدر چند شهروند سکونت دارند ؟
</nl>
<syn lang="en">
(S در بولدر چند شهروند سکونت دارند ؟)
</syn>
<augsyn lang="en">
(S Number-[Num:1] of-[Num:1] citizens-[Num:1] in-[Num:1] Boulder-[CityName:3])
</augsyn>
<mrl lang="geo-funql">
answer(population_1(cityid('boulder', _)))
</mrl>
<mrl lang="geo-prolog">
answer(A,(population(B,A),const(B,cityid(boulder,_))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ population_1 ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ cityid ( *n:CityName , _ ) }) </node>
<node id="3"> *n:CityName -> ({ ' boulder ' }) </node>
</mrl-parse>
</example>

<example id="183">
<nl lang="en">
چند نفر در بولدر هستند ؟
</nl>
<syn lang="en">
(S چند نفر در بولدر هستند ؟)
</syn>
<augsyn lang="en">
(S Number-[Num:1] of-[Num:1] people-[Num:1] in-[Num:1] Boulder-[CityName:3])
</augsyn>
<mrl lang="geo-funql">
answer(population_1(cityid('boulder', _)))
</mrl>
<mrl lang="geo-prolog">
answer(A,(population(B,A),const(B,cityid(boulder,_))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ population_1 ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ cityid ( *n:CityName , _ ) }) </node>
<node id="3"> *n:CityName -> ({ ' boulder ' }) </node>
</mrl-parse>
</example>

<example id="184">
<nl lang="en">
چند ایالت با آیووا همجوار هستند ؟
</nl>
<syn lang="en">
(S چند ایالت با آیووا همجوار هستند ؟)
</syn>
<augsyn lang="en">
(S Number-[Num:1] of-[Num:1] states-[State:2] bordering-[State:3] Iowa-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(count(state(next_to_2(stateid('iowa')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,count(B,(state(B),next_to(B,C),const(C,stateid(iowa))),A))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ count ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' iowa ' }) </node>
</mrl-parse>
</example>

<example id="185">
<nl lang="en">
در میان ایالت هایی که رودخانه میسیسیپی از آنها عبور میکند کدام یک کم ارتفاع تر هستند ؟
</nl>
<syn lang="en">
(S در میان ایالت هایی که رودخانه میسیسیپی از آنها عبور میکند کدام یک کم ارتفاع تر هستند ؟)
</syn>
<augsyn lang="en">
(S Of-[State:6] the states-[State:6] washed-[State:7] by-[State:7] the Mississippi-[RiverName:10] river-[River:8] which has-[State:2] the lowest-[Place:3] point-[Place:4])
</augsyn>
<mrl lang="geo-funql">
answer(state(loc_1(lowest(place(loc_2(state(traverse_1(river(riverid('mississippi'))))))))))
</mrl>
<mrl lang="geo-prolog">
answer(D,(state(D),loc(B,D),lowest(B,(state(A),traverse(C,A),const(C,riverid(mississippi)),loc(B,A),place(B)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ loc_1 ( *n:Place ) }) </node>
<node id="3"> *n:Place -> ({ lowest ( *n:Place ) }) </node>
<node id="4"> *n:Place -> ({ place ( *n:Place ) }) </node>
<node id="5"> *n:Place -> ({ loc_2 ( *n:State ) }) </node>
<node id="6"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="7"> *n:State -> ({ traverse_1 ( *n:River ) }) </node>
<node id="8"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="9"> *n:River -> ({ riverid ( *n:RiverName ) }) </node>
<node id="10"> *n:RiverName -> ({ ' mississippi ' }) </node>
</mrl-parse>
</example>

<example id="186">
<nl lang="en">
جمعیت بولدر ؟
</nl>
<syn lang="en">
(S جمعیت بولدر ؟)
</syn>
<augsyn lang="en">
(S People-[Num:1] in-[Num:1] Boulder-[CityName:3])
</augsyn>
<mrl lang="geo-funql">
answer(population_1(cityid('boulder', _)))
</mrl>
<mrl lang="geo-prolog">
answer(A,(population(B,A),const(B,cityid(boulder,_))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ population_1 ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ cityid ( *n:CityName , _ ) }) </node>
<node id="3"> *n:CityName -> ({ ' boulder ' }) </node>
</mrl-parse>
</example>

<example id="187">
<nl lang="en">
جمعیت بولدر ؟
</nl>
<syn lang="en">
(S جمعیت بولدر ؟)
</syn>
<augsyn lang="en">
(S Population-[Num:1] of-[Num:1] Boulder-[CityName:3])
</augsyn>
<mrl lang="geo-funql">
answer(population_1(cityid('boulder', _)))
</mrl>
<mrl lang="geo-prolog">
answer(A,(population(B,A),const(B,cityid(boulder,_))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ population_1 ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ cityid ( *n:CityName , _ ) }) </node>
<node id="3"> *n:CityName -> ({ ' boulder ' }) </node>
</mrl-parse>
</example>

<example id="188">
<nl lang="en">
رودخانه های نیویورک ؟
</nl>
<nl lang="es">
rios en new york ?
</nl>
<nl lang="ja">
nyuu yooku no kawa ka ?
</nl>
<nl lang="tr">
new york taki nehirler nelerdir ?
</nl>
<syn lang="en">
(S رودخانه های نیویورک ؟)
</syn>
<syn lang="es">
(S rios en new_york)
</syn>
<syn lang="ja">
(S nyuu_yooku no kawa ka)
</syn>
<syn lang="tr">
(S new_york taki nehirler nelerdir)
</syn>
<augsyn lang="en">
(S Rivers-[River:1] in-[River:2] New-[StateName:4] York-[StateName:4])
</augsyn>
<mrl lang="geo-funql">
answer(river(loc_2(stateid('new york'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(river(A),loc(A,B),const(B,stateid('new york'))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:River ) }) </node>
<node id="1"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ loc_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="4"> *n:StateName -> ({ ' new york ' }) </node>
</mrl-parse>
</example>

<example id="189">
<nl lang="en">
ساکرامنتو مرکز کدام ایالت است ؟
</nl>
<syn lang="en">
(S ساکرامنتو مرکز کدام ایالت است ؟)
</syn>
<augsyn lang="en">
(S Sacramento-[CityName:5] is-[City:3] the capital-[City:3] of-[State:2] which state-[State:1])
</augsyn>
<mrl lang="geo-funql">
answer(state(loc_1(capital(cityid('sacramento', _)))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(const(B,cityid(sacramento,_)),capital(B),loc(B,A),state(A)))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ loc_1 ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ capital ( *n:City ) }) </node>
<node id="4"> *n:City -> ({ cityid ( *n:CityName , _ ) }) </node>
<node id="5"> *n:CityName -> ({ ' sacramento ' }) </node>
</mrl-parse>
</example>

<example id="190">
<nl lang="en">
سن آنتونیو در کدام ایالت واقع است ؟
</nl>
<syn lang="en">
(S سن آنتونیو در کدام ایالت واقع است ؟)
</syn>
<augsyn lang="en">
(S San-[CityName:4] Antonio-[CityName:4] is-[State:2] in-[State:2] what-[Query:0] state-[State:1])
</augsyn>
<mrl lang="geo-funql">
answer(state(loc_1(cityid('san antonio', _))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(const(B,cityid('san antonio',_)),loc(B,A),state(A)))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ loc_1 ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ cityid ( *n:CityName , _ ) }) </node>
<node id="4"> *n:CityName -> ({ ' san antonio ' }) </node>
</mrl-parse>
</example>

<example id="191">
<nl lang="en">
شهرهای عمده کلرادو را نشان بده .
</nl>
<syn lang="en">
(S شهرهای عمده کلرادو را نشان بده .)
</syn>
<augsyn lang="en">
(S Show-[Query:0] major-[City:1] cities-[City:2] in-[City:3] Colorado-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(major(city(loc_2(stateid('colorado')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(major(A),city(A),loc(A,B),const(B,stateid(colorado))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ major ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' colorado ' }) </node>
</mrl-parse>
</example>

<example id="192">
<nl lang="en">
همه دریاچه های عمده ایالات متحده را نشان بده .
</nl>
<syn lang="en">
(S همه دریاچه های عمده ایالات متحده را نشان بده .)
</syn>
<augsyn lang="en">
(S Show-[Query:0] me-[Query:0] all-[Place:1] the major-[Place:1] lakes-[Place:2] in-[Place:3] the US-[CountryName:5])
</augsyn>
<mrl lang="geo-funql">
answer(major(lake(loc_2(countryid('usa')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(major(A),lake(A),loc(A,B),const(B,countryid(usa))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Place ) }) </node>
<node id="1"> *n:Place -> ({ major ( *n:Place ) }) </node>
<node id="2"> *n:Place -> ({ lake ( *n:Place ) }) </node>
<node id="3"> *n:Place -> ({ loc_2 ( *n:Country ) }) </node>
<node id="4"> *n:Country -> ({ countryid ( *n:CountryName ) }) </node>
<node id="5"> *n:CountryName -> ({ ' usa ' }) </node>
</mrl-parse>
</example>

<example id="193">
<nl lang="en">
کدام ایالت بیشترین وسعت را داراست ؟
</nl>
<syn lang="en">
(S کدام ایالت بیشترین وسعت را داراست ؟)
</syn>
<augsyn lang="en">
(S State-[Query:0] the state-[State:2] with-[State:1] the largest-[State:1] area-[State:1])
</augsyn>
<mrl lang="geo-funql">
answer(largest_one(area_1(state(all))))
</mrl>
<mrl lang="geo-prolog">
answer(A,largest(B,(state(A),area(A,B))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ largest_one ( area_1 ( *n:State ) ) }) </node>
<node id="2"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="194">
<nl lang="en">
ایالت های همجوار آیووا کدامند ؟
</nl>
<syn lang="en">
(S ایالت های همجوار آیووا کدامند ؟)
</syn>
<augsyn lang="en">
(S States-[State:1] bordering-[State:2] Iowa-[StateName:4])
</augsyn>
<mrl lang="geo-funql">
answer(state(next_to_2(stateid('iowa'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),next_to(A,B),const(B,stateid(iowa))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="4"> *n:StateName -> ({ ' iowa ' }) </node>
</mrl-parse>
</example>

<example id="195">
<nl lang="en">
به من بگو چه شهر هایی در تگزاس هستند ؟
</nl>
<syn lang="en">
(S به من بگو چه شهر هایی در تگزاس هستند ؟)
</syn>
<augsyn lang="en">
(S Tell-[Query:0] me-[Query:0] what-[Query:0] cities-[City:1] are-[City:2] in-[City:2] Texas-[StateName:4])
</augsyn>
<mrl lang="geo-funql">
answer(city(loc_2(stateid('texas'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(city(A),loc(A,B),const(B,stateid(texas))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="4"> *n:StateName -> ({ ' texas ' }) </node>
</mrl-parse>
</example>

<example id="196">
<nl lang="en">
طولانی ترین رودخانه تگزاس از کدام ایالت ها میگذرد ؟
</nl>
<syn lang="en">
(S طولانی ترین رودخانه تگزاس از کدام ایالت ها میگذرد ؟)
</syn>
<augsyn lang="en">
(S Through-[Query:0] which states-[State:1] does-[State:2] the longest-[River:3] river-[River:4] in-[River:5] Texas-[StateName:7] run-[State:2])
</augsyn>
<mrl lang="geo-funql">
answer(state(traverse_1(longest(river(loc_2(stateid('texas')))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(longest(B,(river(B),loc(B,C),const(C,stateid(texas)))),traverse(B,A)))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ traverse_1 ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ longest ( *n:River ) }) </node>
<node id="4"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="5"> *n:River -> ({ loc_2 ( *n:State ) }) </node>
<node id="6"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="7"> *n:StateName -> ({ ' texas ' }) </node>
</mrl-parse>
</example>

<example id="197">
<nl lang="en">
میسیپی از میان کدام ایالت ها میگذرد ؟
</nl>
<syn lang="en">
(S میسیپی از میان کدام ایالت ها میگذرد ؟)
</syn>
<augsyn lang="en">
(S Through-[Query:0] which states-[State:1] does-[State:2] the Mississippi-[RiverName:4] flow-[State:2])
</augsyn>
<mrl lang="geo-funql">
answer(state(traverse_1(riverid('mississippi'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),const(B,riverid(mississippi)),traverse(B,A)))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ traverse_1 ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ riverid ( *n:RiverName ) }) </node>
<node id="4"> *n:RiverName -> ({ ' mississippi ' }) </node>
</mrl-parse>
</example>

<example id="198">
<nl lang="en">
میسیسیپی از کدام ایالت ها عبور میکند ؟
</nl>
<nl lang="es">
por cuales estados corre el mississippi ?
</nl>
<nl lang="ja">
mishishippi kawa wa dono shuu wo nagarete imasu ka ?
</nl>
<nl lang="tr">
mississippi hangi eyaletlerden gecer ?
</nl>
<syn lang="en">
(S میسیسیپی از کدام ایالت ها عبور میکند ؟)
</syn>
<syn lang="es">
(S por cuales estados corre el mississippi)
</syn>
<syn lang="ja">
(S mishishippi kawa wa dono shuu wo nagarete imasu ka)
</syn>
<syn lang="tr">
(S mississippi hangi eyaletlerden gecer)
</syn>
<augsyn lang="en">
(S Through-[Query:0] which states-[State:1] does-[State:2] the Mississippi-[RiverName:4] run-[State:2])
</augsyn>
<mrl lang="geo-funql">
answer(state(traverse_1(riverid('mississippi'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),const(B,riverid(mississippi)),traverse(B,A)))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ traverse_1 ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ riverid ( *n:RiverName ) }) </node>
<node id="4"> *n:RiverName -> ({ ' mississippi ' }) </node>
</mrl-parse>
</example>

<example id="199">
<nl lang="en">
رودخانه های تگزاس کدامند ؟
</nl>
<nl lang="es">
que son todos los rios en texas ?
</nl>
<nl lang="ja">
tekisasu no kawa wa nani zenbu desu ka ?
</nl>
<nl lang="tr">
texas daki nehirler nelerdir ?
</nl>
<syn lang="en">
(S رودخانه های تگزاس کدامند ؟)
</syn>
<syn lang="es">
(S que son todos los rios en texas)
</syn>
<syn lang="ja">
(S tekisasu no kawa wa nani zenbu desu ka)
</syn>
<syn lang="tr">
(S texas daki nehirler nelerdir)
</syn>
<augsyn lang="en">
(S What are-[Query:0] all-[River:1] the rivers-[River:1] in-[River:2] Texas-[StateName:4])
</augsyn>
<mrl lang="geo-funql">
answer(river(loc_2(stateid('texas'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(river(A),loc(A,B),const(B,stateid(texas))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:River ) }) </node>
<node id="1"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ loc_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="4"> *n:StateName -> ({ ' texas ' }) </node>
</mrl-parse>
</example>

<example id="200">
<nl lang="en">
رودخانه های عمده تگزاس کدامند ؟
</nl>
<syn lang="en">
(S رودخانه های عمده تگزاس کدامند ؟)
</syn>
<augsyn lang="en">
(S What are-[Query:0] major-[River:1] rivers-[River:2] in-[River:3] Texas-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(major(river(loc_2(stateid('texas')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(major(A),river(A),loc(A,B),const(B,stateid(texas))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:River ) }) </node>
<node id="1"> *n:River -> ({ major ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' texas ' }) </node>
</mrl-parse>
</example>

<example id="201">
<nl lang="en">
بزرگترین رودخانه های تگزاس کدامند ؟
</nl>
<syn lang="en">
(S بزرگترین رودخانه های تگزاس کدامند ؟)
</syn>
<augsyn lang="en">
(S What are-[Query:0] the biggest-[River:1] rivers-[River:2] in-[River:3] Texas-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(longest(river(loc_2(stateid('texas')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,longest(A,(river(A),loc(A,B),const(B,stateid(texas)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:River ) }) </node>
<node id="1"> *n:River -> ({ longest ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' texas ' }) </node>
</mrl-parse>
</example>

<example id="202">
<nl lang="en">
مرکز شهرهایی همجوار تگزاس کدامند ؟
</nl>
<syn lang="en">
(S مرکز شهرهایی همجوار تگزاس کدامند ؟)
</syn>
<augsyn lang="en">
(S What are-[Query:0] the capital-[City:1] cities-[City:2] of-[City:3] the states-[State:4] which border-[State:5] Texas-[StateName:7])
</augsyn>
<mrl lang="geo-funql">
answer(capital(city(loc_2(state(next_to_2(stateid('texas')))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(capital(A),city(A),loc(A,B),state(B),next_to(B,C),const(C,stateid(texas))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ capital ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="6"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="7"> *n:StateName -> ({ ' texas ' }) </node>
</mrl-parse>
</example>

<example id="203">
<nl lang="en">
مرکز شهر تگزاس کدام است ؟
</nl>
<syn lang="en">
(S مرکز شهر تگزاس کدام است ؟)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the capital-[City:1] city-[City:2] in-[City:3] Texas-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(capital(city(loc_2(stateid('texas')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(capital(A),city(A),loc(A,B),const(B,stateid(texas))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ capital ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' texas ' }) </node>
</mrl-parse>
</example>

<example id="204">
<nl lang="en">
مراکز ایالت های همجوار میسوری کدامند ؟
</nl>
<syn lang="en">
(S مراکز ایالت های همجوار میسوری کدامند ؟)
</syn>
<augsyn lang="en">
(S What are-[Query:0] the capitals-[City:1] of-[City:2] states-[State:3] that border-[State:4] Missouri-[StateName:6])
</augsyn>
<mrl lang="geo-funql">
answer(capital(loc_2(state(next_to_2(stateid('missouri'))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(capital(A),loc(A,B),state(B),next_to(B,C),const(C,stateid(missouri))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ capital ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="6"> *n:StateName -> ({ ' missouri ' }) </node>
</mrl-parse>
</example>

<example id="205">
<nl lang="en">
مرکز ایالت های همجوار تگزاس کدامند ؟
</nl>
<syn lang="en">
(S مرکز ایالت های همجوار تگزاس کدامند ؟)
</syn>
<augsyn lang="en">
(S What are-[Query:0] the capitals-[City:1] of-[City:2] the states-[State:3] that border-[State:4] Texas-[StateName:6])
</augsyn>
<mrl lang="geo-funql">
answer(capital(loc_2(state(next_to_2(stateid('texas'))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(capital(A),loc(A,B),state(B),next_to(B,C),const(C,stateid(texas))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ capital ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="6"> *n:StateName -> ({ ' texas ' }) </node>
</mrl-parse>
</example>

<example id="206">
<nl lang="en">
شهر های کالیفرنیا کدامند ؟
</nl>
<syn lang="en">
(S شهر های کالیفرنیا کدامند ؟)
</syn>
<augsyn lang="en">
(S What are-[Query:0] the cities-[City:1] in-[City:2] California-[StateName:4])
</augsyn>
<mrl lang="geo-funql">
answer(city(loc_2(stateid('california'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(city(A),loc(A,B),const(B,stateid(california))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="4"> *n:StateName -> ({ ' california ' }) </node>
</mrl-parse>
</example>

<example id="207">
<nl lang="en">
شهرهای ایالت هایی که میسیسپی از آنها میگذرد کدامند ؟
</nl>
<syn lang="en">
(S شهرهای ایالت هایی که میسیسپی از آنها میگذرد کدامند ؟)
</syn>
<augsyn lang="en">
(S What are-[Query:0] the cities-[City:1] in-[City:2] states-[State:3] through-[State:4] which the Mississippi-[RiverName:6] runs-[State:4])
</augsyn>
<mrl lang="geo-funql">
answer(city(loc_2(state(traverse_1(riverid('mississippi'))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(city(A),loc(A,B),state(B),traverse(C,B),const(C,riverid(mississippi))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ traverse_1 ( *n:River ) }) </node>
<node id="5"> *n:River -> ({ riverid ( *n:RiverName ) }) </node>
<node id="6"> *n:RiverName -> ({ ' mississippi ' }) </node>
</mrl-parse>
</example>

<example id="208">
<nl lang="en">
شهر های ایالتی که بیشترین نقاط مرتفع را دارد کدامند ؟
</nl>
<syn lang="en">
(S شهر های ایالتی که بیشترین نقاط مرتفع را دارد کدامند ؟)
</syn>
<augsyn lang="en">
(S What are-[Query:0] the cities-[City:1] of-[City:2] the state-[State:3] with-[State:4] the highest-[Place:5] point-[Place:6])
</augsyn>
<mrl lang="geo-funql">
answer(city(loc_2(state(loc_1(highest(place(all)))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(city(A),loc(A,B),state(B),loc(C,B),highest(C,place(C))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ loc_1 ( *n:Place ) }) </node>
<node id="5"> *n:Place -> ({ highest ( *n:Place ) }) </node>
<node id="6"> *n:Place -> ({ place ( all ) }) </node>
</mrl-parse>
</example>

<example id="209">
<nl lang="en">
بلندترین نقطه در میان همه ایالت ها کدام است ؟
</nl>
<syn lang="en">
(S بلندترین نقطه در میان همه ایالت ها کدام است ؟)
</syn>
<augsyn lang="en">
(S What are-[Query:0] the highest-[Place:1] points-[Place:2] of-[Place:3] all-[State:4] the states-[State:4])
</augsyn>
<mrl lang="geo-funql">
answer(highest(place(loc_2(state(all)))))
</mrl>
<mrl lang="geo-prolog">
answer(A,highest(A,(place(A),loc(A,B),state(B))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Place ) }) </node>
<node id="1"> *n:Place -> ({ highest ( *n:Place ) }) </node>
<node id="2"> *n:Place -> ({ place ( *n:Place ) }) </node>
<node id="3"> *n:Place -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="210">
<nl lang="en">
بلندترین نقاط ایالت های همجوار میسیسیپی کدامند ؟
</nl>
<syn lang="en">
(S بلندترین نقاط ایالت های همجوار میسیسیپی کدامند ؟)
</syn>
<augsyn lang="en">
(S What are-[Query:0] the highest-[Place:1] points-[Place:2] of-[Place:3] states-[State:4] surrounding-[State:5] Mississippi-[StateName:7])
</augsyn>
<mrl lang="geo-funql">
answer(highest(place(loc_2(state(next_to_2(stateid('mississippi')))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(highest(A,(place(A),loc(A,B),state(B))),next_to(B,C),const(C,stateid(mississippi))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Place ) }) </node>
<node id="1"> *n:Place -> ({ highest ( *n:Place ) }) </node>
<node id="2"> *n:Place -> ({ place ( *n:Place ) }) </node>
<node id="3"> *n:Place -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="6"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="7"> *n:StateName -> ({ ' mississippi ' }) </node>
</mrl-parse>
</example>

<example id="211">
<nl lang="en">
دریاچه های ایالت های مجاور تگزاس کدامند ؟
</nl>
<syn lang="en">
(S دریاچه های ایالت های مجاور تگزاس کدامند ؟)
</syn>
<augsyn lang="en">
(S What are-[Query:0] the lakes-[Place:1] in-[Place:2] states-[State:3] bordering-[State:4] Texas-[StateName:6])
</augsyn>
<mrl lang="geo-funql">
answer(lake(loc_2(state(next_to_2(stateid('texas'))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(lake(A),loc(A,B),state(B),next_to(B,C),const(C,stateid(texas))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Place ) }) </node>
<node id="1"> *n:Place -> ({ lake ( *n:Place ) }) </node>
<node id="2"> *n:Place -> ({ loc_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="6"> *n:StateName -> ({ ' texas ' }) </node>
</mrl-parse>
</example>

<example id="212">
<nl lang="en">
بزگترین شهر های ایالت های مجاور بزرگترین ایالت کدامند ؟
</nl>
<syn lang="en">
(S بزگترین شهر های ایالت های مجاور بزرگترین ایالت کدامند ؟)
</syn>
<augsyn lang="en">
(S What are-[Query:0] the largest-[City:1] cities-[City:2] in-[City:3] the states-[State:4] that border-[State:5] the largest-[State:6] state-[State:7])
</augsyn>
<mrl lang="geo-funql">
answer(largest(city(loc_2(state(next_to_2(largest(state(all))))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,largest(A,(city(A),loc(A,B),state(B),next_to(B,C),largest(C,state(C)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ largest ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="6"> *n:State -> ({ largest ( *n:State ) }) </node>
<node id="7"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="213">
<nl lang="en">
شهر های مجاور آلاباما کدامند ؟
</nl>
<syn lang="en">
(S شهر های مجاور آلاباما کدامند ؟)
</syn>
<augsyn lang="en">
(S What are-[Query:0] the major-[City:1] cities-[City:2] in-[City:3] Alabama-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(major(city(loc_2(stateid('alabama')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(major(A),city(A),loc(A,B),const(B,stateid(alabama))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ major ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' alabama ' }) </node>
</mrl-parse>
</example>

<example id="214">
<nl lang="en">
شهرهای مجاور آلاسکا کدامند ؟
</nl>
<nl lang="es">
que son las ciudades mayores en alaska ?
</nl>
<nl lang="ja">
arasuka ni wa donna daitoshi ga arimasu ka ?
</nl>
<nl lang="tr">
alaska daki baslica sehirler nelerdir ?
</nl>
<syn lang="en">
(S شهرهای مجاور آلاسکا کدامند ؟)
</syn>
<syn lang="es">
(S que son las ciudades mayores en alaska)
</syn>
<syn lang="ja">
(S arasuka ni wa donna daitoshi ga arimasu ka)
</syn>
<syn lang="tr">
(S alaska daki baslica sehirler nelerdir)
</syn>
<augsyn lang="en">
(S What are-[Query:0] the major-[City:1] cities-[City:2] in-[City:3] Alaska-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(major(city(loc_2(stateid('alaska')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(major(A),city(A),loc(A,B),const(B,stateid(alaska))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ major ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' alaska ' }) </node>
</mrl-parse>
</example>

<example id="215">
<nl lang="en">
شهرهای عمده کالیفرنیا کدامند ؟
</nl>
<nl lang="es">
que son las ciudades mayores en california ?
</nl>
<nl lang="ja">
karifuorunia no ookina toshi wa nan desu ka ?
</nl>
<nl lang="tr">
california daki baslica sehirler nelerdir ?
</nl>
<syn lang="en">
(S شهرهای عمده کالیفرنیا کدامند ؟)
</syn>
<syn lang="es">
(S que son las ciudades mayores en california)
</syn>
<syn lang="ja">
(S karifuorunia no ookina toshi wa nan desu ka)
</syn>
<syn lang="tr">
(S california daki baslica sehirler nelerdir)
</syn>
<augsyn lang="en">
(S What are-[Query:0] the major-[City:1] cities-[City:2] in-[City:3] California-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(major(city(loc_2(stateid('california')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(major(A),city(A),loc(A,B),const(B,stateid(california))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ major ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' california ' }) </node>
</mrl-parse>
</example>

<example id="216">
<nl lang="en">
شهرهای عمده دلاور کدامند ؟
</nl>
<syn lang="en">
(S شهرهای عمده دلاور کدامند ؟)
</syn>
<augsyn lang="en">
(S What are-[Query:0] the major-[City:1] cities-[City:2] in-[City:3] Delaware-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(major(city(loc_2(stateid('delaware')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(major(A),city(A),loc(A,B),const(B,stateid(delaware))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ major ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' delaware ' }) </node>
</mrl-parse>
</example>

<example id="217">
<nl lang="en">
شهرهای عمده کانزاس کدامند ؟
</nl>
<nl lang="es">
que son las ciudades mayores en kansas ?
</nl>
<nl lang="ja">
kanzasu no ookina toshi wa nan desu ka ?
</nl>
<nl lang="tr">
kansas daki baslica sehirler nelerdir ?
</nl>
<syn lang="en">
(S شهرهای عمده کانزاس کدامند ؟)
</syn>
<syn lang="es">
(S que son las ciudades mayores en kansas)
</syn>
<syn lang="ja">
(S kanzasu no ookina toshi wa nan desu ka)
</syn>
<syn lang="tr">
(S kansas daki baslica sehirler nelerdir)
</syn>
<augsyn lang="en">
(S What are-[Query:0] the major-[City:1] cities-[City:2] in-[City:3] Kansas-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(major(city(loc_2(stateid('kansas')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(major(A),city(A),loc(A,B),const(B,stateid(kansas))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ major ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' kansas ' }) </node>
</mrl-parse>
</example>

<example id="218">
<nl lang="en">
شهرهای عمده میسوری کدامند ؟
</nl>
<syn lang="en">
(S شهرهای عمده میسوری کدامند ؟)
</syn>
<augsyn lang="en">
(S What are-[Query:0] the major-[City:1] cities-[City:2] in-[City:3] Missouri-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(major(city(loc_2(stateid('missouri')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(major(A),city(A),loc(A,B),const(B,stateid(missouri))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ major ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' missouri ' }) </node>
</mrl-parse>
</example>

<example id="219">
<nl lang="en">
شهرهای عمده نیومکزیکو کدامند ؟
</nl>
<syn lang="en">
(S شهرهای عمده نیومکزیکو کدامند ؟)
</syn>
<augsyn lang="en">
(S What are-[Query:0] the major-[City:1] cities-[City:2] in-[City:3] New-[StateName:5] Mexico-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(major(city(loc_2(stateid('new mexico')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(major(A),city(A),loc(A,B),const(B,stateid('new mexico'))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ major ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' new mexico ' }) </node>
</mrl-parse>
</example>

<example id="220">
<nl lang="en">
شهره های عمده نیویورک کدامند ؟
</nl>
<syn lang="en">
(S شهره های عمده نیویورک کدامند ؟)
</syn>
<augsyn lang="en">
(S What are-[Query:0] the major-[City:1] cities-[City:2] in-[City:3] New-[StateName:5] York-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(major(city(loc_2(stateid('new york')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(major(A),city(A),loc(A,B),const(B,stateid('new york'))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ major ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' new york ' }) </node>
</mrl-parse>
</example>

<example id="221">
<nl lang="en">
شهرهای عمده نورث کارولینا کدامند ؟
</nl>
<syn lang="en">
(S شهرهای عمده نورث کارولینا کدامند ؟)
</syn>
<augsyn lang="en">
(S What are-[Query:0] the major-[City:1] cities-[City:2] in-[City:3] North-[StateName:5] Carolina-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(major(city(loc_2(stateid('north carolina')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(major(A),city(A),loc(A,B),const(B,stateid('north carolina'))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ major ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' north carolina ' }) </node>
</mrl-parse>
</example>

<example id="222">
<nl lang="en">
شهرهای عمده اوهایو کدامند ؟
</nl>
<nl lang="es">
que son las ciudades mayores en ohio ?
</nl>
<nl lang="ja">
ohaio ni wa donna daitoshi ga arimasu ka ?
</nl>
<nl lang="tr">
ohio daki baslica sehirler nelerdir ?
</nl>
<syn lang="en">
(S شهرهای عمده اوهایو کدامند ؟)
</syn>
<syn lang="es">
(S que son las ciudades mayores en ohio)
</syn>
<syn lang="ja">
(S ohaio ni wa donna daitoshi ga arimasu ka)
</syn>
<syn lang="tr">
(S ohio daki baslica sehirler nelerdir)
</syn>
<augsyn lang="en">
(S What are-[Query:0] the major-[City:1] cities-[City:2] in-[City:3] Ohio-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(major(city(loc_2(stateid('ohio')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(major(A),city(A),loc(A,B),const(B,stateid(ohio))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ major ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' ohio ' }) </node>
</mrl-parse>
</example>

<example id="223">
<nl lang="en">
شهرهای عمده اکلاهما کدامند ؟
</nl>
<nl lang="es">
que son las ciudades mayores en oklahoma ?
</nl>
<nl lang="ja">
okurahoma ni wa donna daitoshi ga arimasu ka ?
</nl>
<nl lang="tr">
oklahoma daki baslica sehirler nelerdir ?
</nl>
<syn lang="en">
(S شهرهای عمده اکلاهما کدامند ؟)
</syn>
<syn lang="es">
(S que son las ciudades mayores en oklahoma)
</syn>
<syn lang="ja">
(S okurahoma ni wa donna daitoshi ga arimasu ka)
</syn>
<syn lang="tr">
(S oklahoma daki baslica sehirler nelerdir)
</syn>
<augsyn lang="en">
(S What are-[Query:0] the major-[City:1] cities-[City:2] in-[City:3] Oklahoma-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(major(city(loc_2(stateid('oklahoma')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(major(A),city(A),loc(A,B),const(B,stateid(oklahoma))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ major ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' oklahoma ' }) </node>
</mrl-parse>
</example>

<example id="224">
<nl lang="en">
شهرهای عمده اکلاهما کدامند ؟
</nl>
<nl lang="es">
que son las ciudades mayores en rhode island ?
</nl>
<nl lang="ja">
roodoairando ni wa donna daitoshi ga arimasu ka ?
</nl>
<nl lang="tr">
rhode island daki baslica sehirler nelerdir ?
</nl>
<syn lang="en">
(S شهرهای عمده اکلاهما کدامند ؟)
</syn>
<syn lang="es">
(S que son las ciudades mayores en rhode_island)
</syn>
<syn lang="ja">
(S roodoairando ni wa donna daitoshi ga arimasu ka)
</syn>
<syn lang="tr">
(S rhode_island daki baslica sehirler nelerdir)
</syn>
<augsyn lang="en">
(S What are-[Query:0] the major-[City:1] cities-[City:2] in-[City:3] Rhode-[StateName:5] Island-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(major(city(loc_2(stateid('rhode island')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(major(A),city(A),loc(A,B),const(B,stateid('rhode island'))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ major ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' rhode island ' }) </node>
</mrl-parse>
</example>

<example id="225">
<nl lang="en">
شهرهای عمده ایالت هایی که میسیسیپی از آنها میگذرد کدامند ؟
</nl>
<syn lang="en">
(S شهرهای عمده ایالت هایی که میسیسیپی از آنها میگذرد کدامند ؟)
</syn>
<augsyn lang="en">
(S What are-[Query:0] the major-[City:1] cities-[City:2] in-[City:3] states-[State:4] through-[State:5] which the Mississippi-[RiverName:7] runs-[State:5])
</augsyn>
<mrl lang="geo-funql">
answer(major(city(loc_2(state(traverse_1(riverid('mississippi')))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(major(A),city(A),loc(A,B),state(B),traverse(C,B),const(C,riverid(mississippi))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ major ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ traverse_1 ( *n:River ) }) </node>
<node id="6"> *n:River -> ({ riverid ( *n:RiverName ) }) </node>
<node id="7"> *n:RiverName -> ({ ' mississippi ' }) </node>
</mrl-parse>
</example>

<example id="226">
<nl lang="en">
شهرهای عمده تگزاس کدامند ؟
</nl>
<nl lang="es">
que son las ciudades mayores en texas ?
</nl>
<nl lang="ja">
tekisasu ni wa donna daitoshi ga arimasu ka ?
</nl>
<nl lang="tr">
texas daki baslica sehirler nelerdir ?
</nl>
<syn lang="en">
(S شهرهای عمده تگزاس کدامند ؟)
</syn>
<syn lang="es">
(S que son las ciudades mayores en texas)
</syn>
<syn lang="ja">
(S tekisasu ni wa donna daitoshi ga arimasu ka)
</syn>
<syn lang="tr">
(S texas daki baslica sehirler nelerdir)
</syn>
<augsyn lang="en">
(S What are-[Query:0] the major-[City:1] cities-[City:2] in-[City:3] Texas-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(major(city(loc_2(stateid('texas')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(major(A),city(A),loc(A,B),const(B,stateid(texas))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ major ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' texas ' }) </node>
</mrl-parse>
</example>

<example id="227">
<nl lang="en">
شهرهای عمده بزرگترین ایالت کدامند ؟
</nl>
<syn lang="en">
(S شهرهای عمده بزرگترین ایالت کدامند ؟)
</syn>
<augsyn lang="en">
(S What are-[Query:0] the major-[City:1] cities-[City:2] in-[City:3] the largest-[State:4] state-[State:5])
</augsyn>
<mrl lang="geo-funql">
answer(major(city(loc_2(largest(state(all))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(major(A),city(A),loc(A,B),largest(B,state(B))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ major ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ largest ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="228">
<nl lang="en">
شهرهای عمده کوچکترین ایالت کدامند ؟
</nl>
<syn lang="en">
(S شهرهای عمده کوچکترین ایالت کدامند ؟)
</syn>
<augsyn lang="en">
(S What are-[Query:0] the major-[City:1] cities-[City:2] in-[City:3] the smallest-[State:4] state-[State:5] in-[State:6] the US-[CountryName:8])
</augsyn>
<mrl lang="geo-funql">
answer(major(city(loc_2(smallest(state(loc_2(countryid('usa'))))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(major(A),city(A),loc(A,B),smallest(B,(state(B),loc(B,C),const(C,countryid(usa))))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ major ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ smallest ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="6"> *n:State -> ({ loc_2 ( *n:Country ) }) </node>
<node id="7"> *n:Country -> ({ countryid ( *n:CountryName ) }) </node>
<node id="8"> *n:CountryName -> ({ ' usa ' }) </node>
</mrl-parse>
</example>

<example id="229">
<nl lang="en">
شهرهای عمده ایالت کالیفرنیا کدامند ؟
</nl>
<syn lang="en">
(S شهرهای عمده ایالت کالیفرنیا کدامند ؟)
</syn>
<augsyn lang="en">
(S What are-[Query:0] the major-[City:1] cities-[City:2] in-[City:3] the state-[State:4] of-[State:4] California-[StateName:6])
</augsyn>
<mrl lang="geo-funql">
answer(major(city(loc_2(state(stateid('california'))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(major(A),city(A),loc(A,B),state(B),const(B,stateid(california))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ major ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="6"> *n:StateName -> ({ ' california ' }) </node>
</mrl-parse>
</example>

<example id="230">
<nl lang="en">
شهرهای عمده ایالت هایی که رود عمده ای در ویرجینیا از آنها میگذرد کدامند ؟
</nl>
<syn lang="en">
(S شهرهای عمده ایالت هایی که رود عمده ای در ویرجینیا از آنها میگذرد کدامند ؟)
</syn>
<augsyn lang="en">
(S What are-[Query:0] the major-[City:1] cities-[City:2] in-[City:3] the states-[State:4] through-[State:5] which the major-[River:6] river-[River:7] in-[River:8] Virginia-[StateName:10] runs-[State:5])
</augsyn>
<mrl lang="geo-funql">
answer(major(city(loc_2(state(traverse_1(major(river(loc_2(stateid('virginia'))))))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(major(A),city(A),loc(A,B),state(B),major(C),river(C),loc(C,D),const(D,stateid(virginia)),traverse(C,B)))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ major ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ traverse_1 ( *n:River ) }) </node>
<node id="6"> *n:River -> ({ major ( *n:River ) }) </node>
<node id="7"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="8"> *n:River -> ({ loc_2 ( *n:State ) }) </node>
<node id="9"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="10"> *n:StateName -> ({ ' virginia ' }) </node>
</mrl-parse>
</example>

<example id="231">
<nl lang="en">
شهرهای عمده ایالات متحده کدامند ؟
</nl>
<syn lang="en">
(S شهرهای عمده ایالات متحده کدامند ؟)
</syn>
<augsyn lang="en">
(S What are-[Query:0] the major-[City:1] cities-[City:2] in-[City:3] the USA-[CountryName:5])
</augsyn>
<mrl lang="geo-funql">
answer(major(city(loc_2(countryid('usa')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(major(A),city(A),loc(A,B),const(B,countryid(usa))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ major ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ loc_2 ( *n:Country ) }) </node>
<node id="4"> *n:Country -> ({ countryid ( *n:CountryName ) }) </node>
<node id="5"> *n:CountryName -> ({ ' usa ' }) </node>
</mrl-parse>
</example>

<example id="232">
<nl lang="en">
شهرهای عمده ورمونت کدامند ؟
</nl>
<syn lang="en">
(S شهرهای عمده ورمونت کدامند ؟)
</syn>
<augsyn lang="en">
(S What are-[Query:0] the major-[City:1] cities-[City:2] in-[City:3] Vermont-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(major(city(loc_2(stateid('vermont')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(major(A),city(A),loc(A,B),const(B,stateid(vermont))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ major ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' vermont ' }) </node>
</mrl-parse>
</example>

<example id="233">
<nl lang="en">
شهرهای عمده وایومینگ کدامند ؟
</nl>
<nl lang="es">
que son las ciudades mayores en wyoming ?
</nl>
<nl lang="ja">
waiomingu ni wa donna daitoshi ga arimasu ka ?
</nl>
<nl lang="tr">
wyoming daki baslica sehirler nelerdir ?
</nl>
<syn lang="en">
(S شهرهای عمده وایومینگ کدامند ؟)
</syn>
<syn lang="es">
(S que son las ciudades mayores en wyoming)
</syn>
<syn lang="ja">
(S waiomingu ni wa donna daitoshi ga arimasu ka)
</syn>
<syn lang="tr">
(S wyoming daki baslica sehirler nelerdir)
</syn>
<augsyn lang="en">
(S What are-[Query:0] the major-[City:1] cities-[City:2] in-[City:3] Wyoming-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(major(city(loc_2(stateid('wyoming')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(major(A),city(A),loc(A,B),const(B,stateid(wyoming))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ major ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' wyoming ' }) </node>
</mrl-parse>
</example>

<example id="234">
<nl lang="en">
شهرهای عمده تگزاس کدامند ؟
</nl>
<nl lang="es">
que son las ciudades mayores de texas ?
</nl>
<nl lang="ja">
tekisasu no ookina toshi wa nan desu ka ?
</nl>
<nl lang="tr">
texas in baslica sehirleri nelerdir ?
</nl>
<syn lang="en">
(S شهرهای عمده تگزاس کدامند ؟)
</syn>
<syn lang="es">
(S que son las ciudades mayores de texas)
</syn>
<syn lang="ja">
(S tekisasu no ookina toshi wa nan desu ka)
</syn>
<syn lang="tr">
(S texas in baslica sehirleri nelerdir)
</syn>
<augsyn lang="en">
(S What are-[Query:0] the major-[City:1] cities-[City:2] of-[City:3] Texas-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(major(city(loc_2(stateid('texas')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(major(A),city(A),loc(A,B),const(B,stateid(texas))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ major ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' texas ' }) </node>
</mrl-parse>
</example>

<example id="235">
<nl lang="en">
شهرهای عمده ایالات متحده کدامند ؟
</nl>
<syn lang="en">
(S شهرهای عمده ایالات متحده کدامند ؟)
</syn>
<augsyn lang="en">
(S What are-[Query:0] the major-[City:1] cities-[City:2] of-[City:3] the United-[CountryName:5] States-[CountryName:5])
</augsyn>
<mrl lang="geo-funql">
answer(major(city(loc_2(countryid('usa')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(major(A),city(A),loc(A,B),const(B,countryid(usa))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ major ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ loc_2 ( *n:Country ) }) </node>
<node id="4"> *n:Country -> ({ countryid ( *n:CountryName ) }) </node>
<node id="5"> *n:CountryName -> ({ ' usa ' }) </node>
</mrl-parse>
</example>

<example id="236">
<nl lang="en">
چند شهر عمده در ایالات متحده وجود دارد ؟
</nl>
<syn lang="en">
(S چند شهر عمده در ایالات متحده وجود دارد ؟)
</syn>
<augsyn lang="en">
(S What are-[Query:0] the major-[City:1] cities-[City:2] of-[City:3] the US-[CountryName:5])
</augsyn>
<mrl lang="geo-funql">
answer(major(city(loc_2(countryid('usa')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(major(A),city(A),loc(A,B),const(B,countryid(usa))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ major ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ loc_2 ( *n:Country ) }) </node>
<node id="4"> *n:Country -> ({ countryid ( *n:CountryName ) }) </node>
<node id="5"> *n:CountryName -> ({ ' usa ' }) </node>
</mrl-parse>
</example>

<example id="237">
<nl lang="en">
چند دریاچه عمده در ایالات متحده وجود دارد ؟
</nl>
<syn lang="en">
(S چند دریاچه عمده در ایالات متحده وجود دارد ؟)
</syn>
<augsyn lang="en">
(S What are-[Query:0] the major-[Place:1] lakes-[Place:2] in-[Place:3] United-[CountryName:5] States-[CountryName:5])
</augsyn>
<mrl lang="geo-funql">
answer(major(lake(loc_2(countryid('usa')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(major(A),lake(A),loc(A,B),const(B,countryid(usa))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Place ) }) </node>
<node id="1"> *n:Place -> ({ major ( *n:Place ) }) </node>
<node id="2"> *n:Place -> ({ lake ( *n:Place ) }) </node>
<node id="3"> *n:Place -> ({ loc_2 ( *n:Country ) }) </node>
<node id="4"> *n:Country -> ({ countryid ( *n:CountryName ) }) </node>
<node id="5"> *n:CountryName -> ({ ' usa ' }) </node>
</mrl-parse>
</example>

<example id="238">
<nl lang="en">
رودخانه های عمده اوهایو کدامند ؟
</nl>
<nl lang="es">
que son los rios mayores en ohio ?
</nl>
<nl lang="ja">
ohaio no ookina kawa wa nan desu ka ?
</nl>
<nl lang="tr">
ohio daki baslica nehirler nelerdir ?
</nl>
<syn lang="en">
(S رودخانه های عمده اوهایو کدامند ؟)
</syn>
<syn lang="es">
(S que son los rios mayores en ohio)
</syn>
<syn lang="ja">
(S ohaio no ookina kawa wa nan desu ka)
</syn>
<syn lang="tr">
(S ohio daki baslica nehirler nelerdir)
</syn>
<augsyn lang="en">
(S What are-[Query:0] the major-[River:1] rivers-[River:2] in-[River:3] Ohio-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(major(river(loc_2(stateid('ohio')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(major(A),river(A),loc(A,B),const(B,stateid(ohio))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:River ) }) </node>
<node id="1"> *n:River -> ({ major ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' ohio ' }) </node>
</mrl-parse>
</example>

<example id="239">
<nl lang="en">
رودخانه های عمده ایالات متحده کدامند ؟
</nl>
<syn lang="en">
(S رودخانه های عمده ایالات متحده کدامند ؟)
</syn>
<augsyn lang="en">
(S What are-[Query:0] the major-[River:1] rivers-[River:2] in-[River:3] the US-[CountryName:5])
</augsyn>
<mrl lang="geo-funql">
answer(major(river(loc_2(countryid('usa')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(major(A),river(A),loc(A,B),const(B,countryid(usa))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:River ) }) </node>
<node id="1"> *n:River -> ({ major ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ loc_2 ( *n:Country ) }) </node>
<node id="4"> *n:Country -> ({ countryid ( *n:CountryName ) }) </node>
<node id="5"> *n:CountryName -> ({ ' usa ' }) </node>
</mrl-parse>
</example>

<example id="240">
<nl lang="en">
نام شهرهای عمده ایلینویز چیست ؟
</nl>
<syn lang="en">
(S نام شهرهای عمده ایلینویز چیست ؟)
</syn>
<augsyn lang="en">
(S What are-[Query:0] the names-[Query:0] of-[Query:0] the major-[City:1] cities-[City:2] in-[City:3] Illinois-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(major(city(loc_2(stateid('illinois')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(major(A),city(A),loc(A,B),const(B,stateid(illinois))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ major ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' illinois ' }) </node>
</mrl-parse>
</example>

<example id="241">
<nl lang="en">
ایالات مجاور میشیگان کدامند ؟
</nl>
<syn lang="en">
(S ایالات مجاور میشیگان کدامند ؟)
</syn>
<augsyn lang="en">
(S What are-[Query:0] the neighboring-[State:2] states-[State:1] for-[State:2] Michigan-[StateName:4])
</augsyn>
<mrl lang="geo-funql">
answer(state(next_to_2(stateid('michigan'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(next_to(A,B),state(A),const(B,stateid(michigan))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="4"> *n:StateName -> ({ ' michigan ' }) </node>
</mrl-parse>
</example>

<example id="242">
<nl lang="en">
تمرکز جمعیت همه ایالت های آمریکا را به من بگو .
</nl>
<syn lang="en">
(S تمرکز جمعیت همه ایالت های آمریکا را به من بگو .)
</syn>
<augsyn lang="en">
(S What are-[Query:0] the population-[Num:1] densities-[Num:1] of-[Num:1] each-[State:2] US-[State:2] state-[State:2])
</augsyn>
<mrl lang="geo-funql">
answer(density_1(state(all)))
</mrl>
<mrl lang="geo-prolog">
answer(A,(density(B,A),state(B)))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ density_1 ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="243">
<nl lang="en">
جمعیت میسیسیپی چقدر است ؟
</nl>
<syn lang="en">
(S جمعیت میسیسیپی چقدر است ؟)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the population-[Num:1] of-[Num:1] Mississippi-[StateName:3])
</augsyn>
<mrl lang="geo-funql">
answer(population_1(stateid('mississippi')))
</mrl>
<mrl lang="geo-prolog">
answer(A,(population(B,A),const(B,stateid(mississippi))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ population_1 ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="3"> *n:StateName -> ({ ' mississippi ' }) </node>
</mrl-parse>
</example>

<example id="244">
<nl lang="en">
جمعیت همه شهرهای عمده مونتانا را به من بگو .
</nl>
<syn lang="en">
(S جمعیت همه شهرهای عمده مونتانا را به من بگو .)
</syn>
<augsyn lang="en">
(S What are-[Query:0] the populations-[Num:1] of-[Num:1] all-[City:2] the major-[City:2] cities-[City:3] in-[City:4] Montana-[StateName:6])
</augsyn>
<mrl lang="geo-funql">
answer(population_1(major(city(loc_2(stateid('montana'))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(population(B,A),major(B),city(B),loc(B,C),const(C,stateid(montana))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ population_1 ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ major ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="4"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="6"> *n:StateName -> ({ ' montana ' }) </node>
</mrl-parse>
</example>

<example id="245">
<nl lang="en">
جمعیت های همه ایالت های عمده ای که میسیسیپی از آنها میگذرد را به من بگو .
</nl>
<syn lang="en">
(S جمعیت های همه ایالت های عمده ای که میسیسیپی از آنها میگذرد را به من بگو .)
</syn>
<augsyn lang="en">
(S What are-[Query:0] the populations-[Num:1] of-[Num:1] states-[State:2] through-[State:3] which the Mississippi-[RiverName:6] river-[River:4] runs-[State:3])
</augsyn>
<mrl lang="geo-funql">
answer(population_1(state(traverse_1(river(riverid('mississippi'))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(population(B,A),state(B),const(C,riverid(mississippi)),river(C),traverse(C,B)))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ population_1 ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ traverse_1 ( *n:River ) }) </node>
<node id="4"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="5"> *n:River -> ({ riverid ( *n:RiverName ) }) </node>
<node id="6"> *n:RiverName -> ({ ' mississippi ' }) </node>
</mrl-parse>
</example>

<example id="246">
<nl lang="en">
جمعیت های همه ایالت های عمده ای که میسیسیپی از آنها عبور میکند را به من بگو .
</nl>
<nl lang="es">
que son las poblaciones de los estados por cual corre el rio mississippi ?
</nl>
<nl lang="ja">
mishishippi kawa ga nagareru shuu no jinkou wa ikura desu ka ?
</nl>
<nl lang="tr">
mississippi nehrinin icinden gectigi eyaletlerin nufuslari nelerdir ?
</nl>
<syn lang="en">
(S جمعیت های همه ایالت های عمده ای که میسیسیپی از آنها عبور میکند را به من بگو .)
</syn>
<syn lang="es">
(S que son las poblaciones de los estados por cual corre el rio mississippi)
</syn>
<syn lang="ja">
(S mishishippi kawa ga nagareru shuu no jinkou wa ikura desu ka)
</syn>
<syn lang="tr">
(S mississippi nehrinin icinden gectigi eyaletlerin nufuslari nelerdir)
</syn>
<augsyn lang="en">
(S What are-[Query:0] the populations-[Num:1] of-[Num:1] states-[State:2] through-[State:3] which the Mississippi-[RiverName:6] river-[River:4] runs-[State:3])
</augsyn>
<mrl lang="geo-funql">
answer(population_1(state(traverse_1(river(riverid('mississippi'))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(population(B,A),state(B),const(C,riverid(mississippi)),river(C),traverse(C,B)))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ population_1 ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ traverse_1 ( *n:River ) }) </node>
<node id="4"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="5"> *n:River -> ({ riverid ( *n:RiverName ) }) </node>
<node id="6"> *n:RiverName -> ({ ' mississippi ' }) </node>
</mrl-parse>
</example>

<example id="247">
<nl lang="en">
جمعیت های همه ایالت های عمده ای که میسیسیپی از آنها میگذرد را به من بگو .
</nl>
<syn lang="en">
(S جمعیت های همه ایالت های عمده ای که میسیسیپی از آنها میگذرد را به من بگو .)
</syn>
<augsyn lang="en">
(S What are-[Query:0] the populations-[Num:1] of-[Num:1] states-[State:2] through-[State:3] which the Mississippi-[RiverName:5] runs-[State:3])
</augsyn>
<mrl lang="geo-funql">
answer(population_1(state(traverse_1(riverid('mississippi')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(population(B,A),state(B),const(C,riverid(mississippi)),traverse(C,B)))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ population_1 ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ traverse_1 ( *n:River ) }) </node>
<node id="4"> *n:River -> ({ riverid ( *n:RiverName ) }) </node>
<node id="5"> *n:RiverName -> ({ ' mississippi ' }) </node>
</mrl-parse>
</example>

<example id="248">
<nl lang="en">
جمعیت های همه ایالت های عمده ای که میسیسیپی از آنها میگذرد را به من بگو .
</nl>
<syn lang="en">
(S جمعیت های همه ایالت های عمده ای که میسیسیپی از آنها میگذرد را به من بگو .)
</syn>
<augsyn lang="en">
(S What are-[Query:0] the populations-[Num:1] of-[Num:1] states-[State:2] through-[State:3] which the Mississippi-[RiverName:5] runs-[State:3])
</augsyn>
<mrl lang="geo-funql">
answer(population_1(state(traverse_1(riverid('mississippi')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(population(B,A),state(B),const(C,riverid(mississippi)),traverse(C,B)))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ population_1 ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ traverse_1 ( *n:River ) }) </node>
<node id="4"> *n:River -> ({ riverid ( *n:RiverName ) }) </node>
<node id="5"> *n:RiverName -> ({ ' mississippi ' }) </node>
</mrl-parse>
</example>

<example id="249">
<nl lang="en">
جمعیت های همه ایالت های عمده مجاور تگزاس را به من بگو .
</nl>
<syn lang="en">
(S جمعیت های همه ایالت های عمده مجاور تگزاس را به من بگو .)
</syn>
<augsyn lang="en">
(S What are-[Query:0] the populations-[Num:1] of-[Num:1] states-[State:2] which border-[State:3] Texas-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(population_1(state(next_to_2(stateid('texas')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(population(B,A),state(B),next_to(B,C),const(C,stateid(texas))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ population_1 ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' texas ' }) </node>
</mrl-parse>
</example>

<example id="250">
<nl lang="en">
جمعیت های همه شهرهای عمده تگزاس را به من بگو .
</nl>
<syn lang="en">
(S جمعیت های همه شهرهای عمده تگزاس را به من بگو .)
</syn>
<augsyn lang="en">
(S What are-[Query:0] the populations-[Num:1] of-[Num:1] the major-[City:2] cities-[City:3] of-[City:4] Texas-[StateName:6])
</augsyn>
<mrl lang="geo-funql">
answer(population_1(major(city(loc_2(stateid('texas'))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(population(B,A),major(B),city(B),loc(B,C),const(C,stateid(texas))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ population_1 ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ major ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="4"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="6"> *n:StateName -> ({ ' texas ' }) </node>
</mrl-parse>
</example>

<example id="251">
<nl lang="en">
جمعیت های همه شهرهای عمده تگزاس را به من بگو .
</nl>
<syn lang="en">
(S جمعیت های همه شهرهای عمده تگزاس را به من بگو .)
</syn>
<augsyn lang="en">
(S What are-[Query:0] the populations-[Num:1] of-[Num:1] the states-[State:2] through-[State:3] which the Mississippi-[RiverName:6] river-[River:4] runs-[State:3])
</augsyn>
<mrl lang="geo-funql">
answer(population_1(state(traverse_1(river(riverid('mississippi'))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(population(B,A),state(B),const(C,riverid(mississippi)),river(C),traverse(C,B)))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ population_1 ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ traverse_1 ( *n:River ) }) </node>
<node id="4"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="5"> *n:River -> ({ riverid ( *n:RiverName ) }) </node>
<node id="6"> *n:RiverName -> ({ ' mississippi ' }) </node>
</mrl-parse>
</example>

<example id="252">
<nl lang="en">
جمعیت های همه شهرهایی که میسیسیپی از آنها میگذرد را به من بگو .
</nl>
<syn lang="en">
(S جمعیت های همه شهرهایی که میسیسیپی از آنها میگذرد را به من بگو .)
</syn>
<augsyn lang="en">
(S What are-[Query:0] the populations-[Num:1] of-[Num:1] the states-[State:2] through-[State:3] which the Mississippi-[RiverName:6] river-[River:4] runs-[State:3])
</augsyn>
<mrl lang="geo-funql">
answer(population_1(state(traverse_1(river(riverid('mississippi'))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(population(B,A),state(B),const(C,riverid(mississippi)),river(C),traverse(C,B)))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ population_1 ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ traverse_1 ( *n:River ) }) </node>
<node id="4"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="5"> *n:River -> ({ riverid ( *n:RiverName ) }) </node>
<node id="6"> *n:RiverName -> ({ ' mississippi ' }) </node>
</mrl-parse>
</example>

<example id="253">
<nl lang="en">
جمعیت های همه شهرهایی که میسیسیپی از آنها میگذرد را به من بگو .
</nl>
<syn lang="en">
(S جمعیت های همه شهرهایی که میسیسیپی از آنها میگذرد را به من بگو .)
</syn>
<augsyn lang="en">
(S What are-[Query:0] the populations-[Num:1] of-[Num:1] the states-[State:2] through-[State:3] which the Mississippi-[RiverName:5] runs-[State:3])
</augsyn>
<mrl lang="geo-funql">
answer(population_1(state(traverse_1(riverid('mississippi')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(population(B,A),state(B),const(C,riverid(mississippi)),traverse(C,B)))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ population_1 ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ traverse_1 ( *n:River ) }) </node>
<node id="4"> *n:River -> ({ riverid ( *n:RiverName ) }) </node>
<node id="5"> *n:RiverName -> ({ ' mississippi ' }) </node>
</mrl-parse>
</example>

<example id="254">
<nl lang="en">
جمعیت های همه شهرهایی که میسیسیپی از آنها میگذرد را به من بگو .
</nl>
<syn lang="en">
(S جمعیت های همه شهرهایی که میسیسیپی از آنها میگذرد را به من بگو .)
</syn>
<augsyn lang="en">
(S What are-[Query:0] the populations-[Num:1] of-[Num:1] the states-[State:2] through-[State:3] which the Mississippi-[RiverName:5] runs-[State:3])
</augsyn>
<mrl lang="geo-funql">
answer(population_1(state(traverse_1(riverid('mississippi')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(population(B,A),state(B),const(C,riverid(mississippi)),traverse(C,B)))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ population_1 ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ traverse_1 ( *n:River ) }) </node>
<node id="4"> *n:River -> ({ riverid ( *n:RiverName ) }) </node>
<node id="5"> *n:RiverName -> ({ ' mississippi ' }) </node>
</mrl-parse>
</example>

<example id="255">
<nl lang="en">
رودخانه های آلاسکا کدامند ؟
</nl>
<nl lang="es">
cuales son los rios en alaska ?
</nl>
<nl lang="ja">
arasuka no kawa wa nan desu ka ?
</nl>
<nl lang="tr">
alaska daki nehirler nelerdir ?
</nl>
<syn lang="en">
(S رودخانه های آلاسکا کدامند ؟)
</syn>
<syn lang="es">
(S cuales son los rios en alaska)
</syn>
<syn lang="ja">
(S arasuka no kawa wa nan desu ka)
</syn>
<syn lang="tr">
(S alaska daki nehirler nelerdir)
</syn>
<augsyn lang="en">
(S What are-[Query:0] the rivers-[River:1] in-[River:2] Alaska-[StateName:4])
</augsyn>
<mrl lang="geo-funql">
answer(river(loc_2(stateid('alaska'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(river(A),loc(A,B),const(B,stateid(alaska))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:River ) }) </node>
<node id="1"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ loc_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="4"> *n:StateName -> ({ ' alaska ' }) </node>
</mrl-parse>
</example>

<example id="256">
<nl lang="en">
رودخانه های ایالت ایندیانا کدامند ؟
</nl>
<syn lang="en">
(S رودخانه های ایالت ایندیانا کدامند ؟)
</syn>
<augsyn lang="en">
(S What are-[Query:0] the rivers-[River:1] in-[River:2] the state-[State:3] of-[State:3] Indiana-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(river(loc_2(state(stateid('indiana')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(river(A),loc(A,B),state(B),const(B,stateid(indiana))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:River ) }) </node>
<node id="1"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ loc_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' indiana ' }) </node>
</mrl-parse>
</example>

<example id="257">
<nl lang="en">
رودخانه های ایالت تگزاس کدامند ؟
</nl>
<syn lang="en">
(S رودخانه های ایالت تگزاس کدامند ؟)
</syn>
<augsyn lang="en">
(S What are-[Query:0] the rivers-[River:1] in-[River:2] the state-[State:3] of-[State:3] Texas-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(river(loc_2(state(stateid('texas')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(river(A),loc(A,B),state(B),const(B,stateid(texas))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:River ) }) </node>
<node id="1"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ loc_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' texas ' }) </node>
</mrl-parse>
</example>

<example id="258">
<nl lang="en">
رودخانه های ایالت مونتانا کدامند ؟
</nl>
<syn lang="en">
(S رودخانه های ایالت مونتانا کدامند ؟)
</syn>
<augsyn lang="en">
(S What are-[Query:0] the rivers-[River:1] of-[River:2] Montana-[StateName:4])
</augsyn>
<mrl lang="geo-funql">
answer(river(loc_2(stateid('montana'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(river(A),loc(A,B),const(B,stateid(montana))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:River ) }) </node>
<node id="1"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ loc_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="4"> *n:StateName -> ({ ' montana ' }) </node>
</mrl-parse>
</example>

<example id="259">
<nl lang="en">
ایالت ها را نام ببر .
</nl>
<syn lang="en">
(S ایالت ها را نام ببر .)
</syn>
<augsyn lang="en">
(S What are-[Query:0] the states-[State:1])
</augsyn>
<mrl lang="geo-funql">
answer(state(all))
</mrl>
<mrl lang="geo-prolog">
answer(A,state(A))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="260">
<nl lang="en">
چه ایالت هایی با پرجمعیت ترین ایالت مجاور هستند ؟
</nl>
<syn lang="en">
(S چه ایالت هایی با پرجمعیت ترین ایالت مجاور هستند ؟)
</syn>
<augsyn lang="en">
(S What are-[Query:0] the states-[State:1] that border-[State:2] the state-[State:4] with-[State:3] the greatest-[State:3] population-[State:3])
</augsyn>
<mrl lang="geo-funql">
answer(state(next_to_2(largest_one(population_1(state(all))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),next_to(B,A),largest(C,(state(B),population(B,C)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ largest_one ( population_1 ( *n:State ) ) }) </node>
<node id="4"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="261">
<nl lang="en">
پوتوماک از چه ایالت هایی میگذرد ؟
</nl>
<syn lang="en">
(S پوتوماک از چه ایالت هایی میگذرد ؟)
</syn>
<augsyn lang="en">
(S What are-[Query:0] the states-[State:1] that the Potomac-[RiverName:4] runs-[State:2] through-[State:2])
</augsyn>
<mrl lang="geo-funql">
answer(state(traverse_1(riverid('potomac'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),const(B,riverid(potomac)),traverse(B,A)))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ traverse_1 ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ riverid ( *n:RiverName ) }) </node>
<node id="4"> *n:RiverName -> ({ ' potomac ' }) </node>
</mrl-parse>
</example>

<example id="262">
<nl lang="en">
بلندترین رود از چه ایالت هایی میگذرد ؟
</nl>
<syn lang="en">
(S بلندترین رود از چه ایالت هایی میگذرد ؟)
</syn>
<augsyn lang="en">
(S What are-[Query:0] the states-[State:1] through-[State:2] which the longest-[River:3] river-[River:4] runs-[State:2])
</augsyn>
<mrl lang="geo-funql">
answer(state(traverse_1(longest(river(all)))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),traverse(B,A),longest(B,(river(B)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ traverse_1 ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ longest ( *n:River ) }) </node>
<node id="4"> *n:River -> ({ river ( all ) }) </node>
</mrl-parse>
</example>

<example id="263">
<nl lang="en">
در مورد جمعیت میسوری چه میتوانی به من بگویی ؟
</nl>
<syn lang="en">
(S در مورد جمعیت میسوری چه میتوانی به من بگویی ؟)
</syn>
<augsyn lang="en">
(S What can-[Query:0] you-[Query:0] tell-[Query:0] me-[Query:0] about-[Query:0] the population-[Num:1] of-[Num:1] Missouri-[StateName:3])
</augsyn>
<mrl lang="geo-funql">
answer(population_1(stateid('missouri')))
</mrl>
<mrl lang="geo-prolog">
answer(A,(population(B,A),const(B,stateid(missouri))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ population_1 ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="3"> *n:StateName -> ({ ' missouri ' }) </node>
</mrl-parse>
</example>

<example id="264">
<nl lang="en">
کدام مرکز استان ها دارای بیشترین جمعیت هستند ؟
</nl>
<syn lang="en">
(S کدام مرکز استان ها دارای بیشترین جمعیت هستند ؟)
</syn>
<augsyn lang="en">
(S What capital-[City:2] has-[City:1] the largest-[City:1] population-[City:1])
</augsyn>
<mrl lang="geo-funql">
answer(largest_one(population_1(capital(all))))
</mrl>
<mrl lang="geo-prolog">
answer(A,largest(B,(capital(A),population(A,B))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ largest_one ( population_1 ( *n:City ) ) }) </node>
<node id="2"> *n:City -> ({ capital ( all ) }) </node>
</mrl-parse>
</example>

<example id="265">
<nl lang="en">
بزگترین مرکز استان در ایالات متحده کدام است ؟
</nl>
<nl lang="es">
que capital es la mas grande en los us ?
</nl>
<nl lang="ja">
beikoku no mottomo ookii shuto wa nan desu ka ?
</nl>
<nl lang="tr">
us deki en genis baskent hangisidir ?
</nl>
<syn lang="en">
(S بزگترین مرکز استان در ایالات متحده کدام است ؟)
</syn>
<syn lang="es">
(S que capital es la mas grande en los us)
</syn>
<syn lang="ja">
(S beikoku no mottomo ookii shuto wa nan desu ka)
</syn>
<syn lang="tr">
(S us deki en genis baskent hangisidir)
</syn>
<augsyn lang="en">
(S What capital-[City:2] is-[City:1] the largest-[City:1] in-[City:3] the US-[CountryName:5])
</augsyn>
<mrl lang="geo-funql">
answer(largest(capital(loc_2(countryid('usa')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,largest(A,(capital(A),loc(A,B),const(B,countryid(usa)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ largest ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ capital ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ loc_2 ( *n:Country ) }) </node>
<node id="4"> *n:Country -> ({ countryid ( *n:CountryName ) }) </node>
<node id="5"> *n:CountryName -> ({ ' usa ' }) </node>
</mrl-parse>
</example>

<example id="266">
<nl lang="en">
چه شهرهایی در پنسیلوانیا واقع شده اند ؟
</nl>
<syn lang="en">
(S چه شهرهایی در پنسیلوانیا واقع شده اند ؟)
</syn>
<augsyn lang="en">
(S What cities-[City:1] are-[City:2] located-[City:2] in-[City:2] Pennsylvania-[StateName:4])
</augsyn>
<mrl lang="geo-funql">
answer(city(loc_2(stateid('pennsylvania'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(city(A),loc(A,B),const(B,stateid(pennsylvania))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="4"> *n:StateName -> ({ ' pennsylvania ' }) </node>
</mrl-parse>
</example>

<example id="267">
<nl lang="en">
کدام شهر ها در کالیفرنیا واقع شده ند ؟
</nl>
<syn lang="en">
(S کدام شهر ها در کالیفرنیا واقع شده ند ؟)
</syn>
<augsyn lang="en">
(S What cities-[City:1] in-[City:2] California-[StateName:4])
</augsyn>
<mrl lang="geo-funql">
answer(city(loc_2(stateid('california'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(city(A),loc(A,B),const(B,stateid(california))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="4"> *n:StateName -> ({ ' california ' }) </node>
</mrl-parse>
</example>

<example id="268">
<nl lang="en">
کدامیک از شهرهای تگزاس بیشرین تعداد شهروند را دارند ؟
</nl>
<syn lang="en">
(S کدامیک از شهرهای تگزاس بیشرین تعداد شهروند را دارند ؟)
</syn>
<augsyn lang="en">
(S What cities-[City:2] in-[City:3] Texas-[StateName:5] have-[City:1] the highest-[City:1] number-[City:1] of-[City:1] citizens-[City:1])
</augsyn>
<mrl lang="geo-funql">
answer(largest_one(population_1(city(loc_2(stateid('texas'))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,largest(B,(city(A),loc(A,C),const(C,stateid(texas)),population(A,B))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ largest_one ( population_1 ( *n:City ) ) }) </node>
<node id="2"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' texas ' }) </node>
</mrl-parse>
</example>

<example id="269">
<nl lang="en">
کدامیک از شهرهای تگزاس بیشرین تعداد شهروند را دارند ؟
</nl>
<syn lang="en">
(S کدامیک از شهرهای تگزاس بیشرین تعداد شهروند را دارند ؟)
</syn>
<augsyn lang="en">
(S What cities-[City:2] in-[City:3] Texas-[StateName:5] have-[City:1] the highest-[City:1] populations-[City:1])
</augsyn>
<mrl lang="geo-funql">
answer(largest_one(population_1(city(loc_2(stateid('texas'))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,largest(B,(city(A),loc(A,C),const(C,stateid(texas)),population(A,B))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ largest_one ( population_1 ( *n:City ) ) }) </node>
<node id="2"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' texas ' }) </node>
</mrl-parse>
</example>

<example id="270">
<nl lang="en">
کدام شهرهای تگزاس بیشترین جمعیت را دارند ؟
</nl>
<syn lang="en">
(S کدام شهرهای تگزاس بیشترین جمعیت را دارند ؟)
</syn>
<augsyn lang="en">
(S What city-[City:2] has-[City:1] the largest-[City:1] population-[City:1])
</augsyn>
<mrl lang="geo-funql">
answer(largest_one(population_1(city(all))))
</mrl>
<mrl lang="geo-prolog">
answer(A,largest(B,(city(A),population(A,B))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ largest_one ( population_1 ( *n:City ) ) }) </node>
<node id="2"> *n:City -> ({ city ( all ) }) </node>
</mrl-parse>
</example>

<example id="271">
<nl lang="en">
کدام شهر بیشترین جمعیت را دارد ؟
</nl>
<syn lang="en">
(S کدام شهر بیشترین جمعیت را دارد ؟)
</syn>
<augsyn lang="en">
(S What city-[City:2] has-[City:1] the least-[City:1] population-[City:1])
</augsyn>
<mrl lang="geo-funql">
answer(smallest_one(population_1(city(all))))
</mrl>
<mrl lang="geo-prolog">
answer(A,smallest(B,(city(A),population(A,B))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ smallest_one ( population_1 ( *n:City ) ) }) </node>
<node id="2"> *n:City -> ({ city ( all ) }) </node>
</mrl-parse>
</example>

<example id="272">
<nl lang="en">
کدام شهر بیشترین جمعیت را دارد ؟
</nl>
<nl lang="es">
que ciudad tiene mas personas ?
</nl>
<nl lang="ja">
hotondo no hito ga iru toshi wa nan desu ka ?
</nl>
<nl lang="tr">
hangi sehir en cok insana sahiptir ?
</nl>
<syn lang="en">
(S کدام شهر بیشترین جمعیت را دارد ؟)
</syn>
<syn lang="es">
(S que ciudad tiene mas personas)
</syn>
<syn lang="ja">
(S hotondo no hito ga iru toshi wa nan desu ka)
</syn>
<syn lang="tr">
(S hangi sehir en cok insana sahiptir)
</syn>
<augsyn lang="en">
(S What city-[City:2] has-[City:1] the most-[City:1] people-[City:1])
</augsyn>
<mrl lang="geo-funql">
answer(largest_one(population_1(city(all))))
</mrl>
<mrl lang="geo-prolog">
answer(A,largest(B,(city(A),population(A,B))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ largest_one ( population_1 ( *n:City ) ) }) </node>
<node id="2"> *n:City -> ({ city ( all ) }) </node>
</mrl-parse>
</example>

<example id="273">
<nl lang="en">
کدام شهر ایالات متحده بیشترین چگالی جمعیت را دارد ؟
</nl>
<syn lang="en">
(S کدام شهر ایالات متحده بیشترین چگالی جمعیت را دارد ؟)
</syn>
<augsyn lang="en">
(S What city-[City:2] in-[City:3] the United-[CountryName:5] States-[CountryName:5] has-[City:1] the highest-[City:1] population-[City:1] density-[City:1])
</augsyn>
<mrl lang="geo-funql">
answer(largest_one(density_1(city(loc_2(countryid('usa'))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,largest(B,(city(A),loc(A,C),const(C,countryid(usa)),density(A,B))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ largest_one ( density_1 ( *n:City ) ) }) </node>
<node id="2"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ loc_2 ( *n:Country ) }) </node>
<node id="4"> *n:Country -> ({ countryid ( *n:CountryName ) }) </node>
<node id="5"> *n:CountryName -> ({ ' usa ' }) </node>
</mrl-parse>
</example>

<example id="274">
<nl lang="en">
مرکز ایالت آیووا کجاست ؟
</nl>
<syn lang="en">
(S مرکز ایالت آیووا کجاست ؟)
</syn>
<augsyn lang="en">
(S What is-[Query:0] capital-[City:1] of-[City:2] Iowa-[StateName:4])
</augsyn>
<mrl lang="geo-funql">
answer(capital(loc_2(stateid('iowa'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(capital(A),loc(A,B),const(B,stateid(iowa))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ capital ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="4"> *n:StateName -> ({ ' iowa ' }) </node>
</mrl-parse>
</example>

<example id="275">
<nl lang="en">
مرکز ایالتی که کم ارتفاع ترین نقاط را داراست کجاست ؟
</nl>
<syn lang="en">
(S مرکز ایالتی که کم ارتفاع ترین نقاط را داراست کجاست ؟)
</syn>
<augsyn lang="en">
(S What is-[Query:0] capital-[City:1] of-[City:2] the state-[State:3] with-[State:4] the lowest-[Place:5] point-[Place:6])
</augsyn>
<mrl lang="geo-funql">
answer(capital(loc_2(state(loc_1(lowest(place(all)))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(capital(A),loc(A,B),state(B),loc(C,B),lowest(C,place(C))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ capital ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ loc_1 ( *n:Place ) }) </node>
<node id="5"> *n:Place -> ({ lowest ( *n:Place ) }) </node>
<node id="6"> *n:Place -> ({ place ( all ) }) </node>
</mrl-parse>
</example>

<example id="276">
<nl lang="en">
بزرگترین مرکز استان کدام است ؟
</nl>
<syn lang="en">
(S بزرگترین مرکز استان کدام است ؟)
</syn>
<augsyn lang="en">
(S What is-[Query:0] largest-[City:1] capital-[City:2])
</augsyn>
<mrl lang="geo-funql">
answer(largest(capital(all)))
</mrl>
<mrl lang="geo-prolog">
answer(A,largest(A,capital(A)))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ largest ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ capital ( all ) }) </node>
</mrl-parse>
</example>

<example id="277">
<nl lang="en">
ایالت مجاور کالیفرنیا چیست ؟
</nl>
<syn lang="en">
(S ایالت مجاور کالیفرنیا چیست ؟)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the adjacent-[State:2] state-[State:1] of-[State:2] California-[StateName:4])
</augsyn>
<mrl lang="geo-funql">
answer(state(next_to_2(stateid('california'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(next_to(A,B),state(A),const(B,stateid(california))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="4"> *n:StateName -> ({ ' california ' }) </node>
</mrl-parse>
</example>

<example id="278">
<nl lang="en">
مساحت آلاسکا چقدر است ؟
</nl>
<nl lang="es">
que es la area de alaska ?
</nl>
<nl lang="ja">
arasuka no chiiki wa nan desu ka ?
</nl>
<nl lang="tr">
alaska nin yuzolcumu nedir ?
</nl>
<syn lang="en">
(S مساحت آلاسکا چقدر است ؟)
</syn>
<syn lang="es">
(S que es la area de alaska)
</syn>
<syn lang="ja">
(S arasuka no chiiki wa nan desu ka)
</syn>
<syn lang="tr">
(S alaska nin yuzolcumu nedir)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the area-[Num:1] of-[Num:1] Alaska-[StateName:3])
</augsyn>
<mrl lang="geo-funql">
answer(area_1(stateid('alaska')))
</mrl>
<mrl lang="geo-prolog">
answer(A,(area(B,A),const(B,stateid(alaska))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ area_1 ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="3"> *n:StateName -> ({ ' alaska ' }) </node>
</mrl-parse>
</example>

<example id="279">
<nl lang="en">
مجموع مساحت همه ایالت ها چقدر است ؟
</nl>
<syn lang="en">
(S مجموع مساحت همه ایالت ها چقدر است ؟)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the area-[Num:2] of-[Num:2] all-[State:3] the states-[State:3] combined-[Num:1])
</augsyn>
<mrl lang="geo-funql">
answer(sum(area_1(state(all))))
</mrl>
<mrl lang="geo-prolog">
answer(A,sum(B,(area(C,B),state(C)),A))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ sum ( *n:Num ) }) </node>
<node id="2"> *n:Num -> ({ area_1 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="280">
<nl lang="en">
مساحت کالیفرنیا چقدر است ؟
</nl>
<syn lang="en">
(S مساحت کالیفرنیا چقدر است ؟)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the area-[Num:1] of-[Num:1] California-[StateName:3])
</augsyn>
<mrl lang="geo-funql">
answer(area_1(stateid('california')))
</mrl>
<mrl lang="geo-prolog">
answer(A,(area(B,A),const(B,stateid(california))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ area_1 ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="3"> *n:StateName -> ({ ' california ' }) </node>
</mrl-parse>
</example>

<example id="281">
<nl lang="en">
مساحت فلوریدا چقدر است ؟
</nl>
<syn lang="en">
(S مساحت فلوریدا چقدر است ؟)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the area-[Num:1] of-[Num:1] Florida-[StateName:3])
</augsyn>
<mrl lang="geo-funql">
answer(area_1(stateid('florida')))
</mrl>
<mrl lang="geo-prolog">
answer(A,(area(B,A),const(B,stateid(florida))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ area_1 ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="3"> *n:StateName -> ({ ' florida ' }) </node>
</mrl-parse>
</example>

<example id="282">
<nl lang="en">
مساحت آیداهو چقدر است ؟
</nl>
<nl lang="es">
que es la area de idaho ?
</nl>
<nl lang="ja">
aidahou no chiiki wa nan desu ka ?
</nl>
<nl lang="tr">
idaho nin yuzolcumu nedir ?
</nl>
<syn lang="en">
(S مساحت آیداهو چقدر است ؟)
</syn>
<syn lang="es">
(S que es la area de idaho)
</syn>
<syn lang="ja">
(S aidahou no chiiki wa nan desu ka)
</syn>
<syn lang="tr">
(S idaho nin yuzolcumu nedir)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the area-[Num:1] of-[Num:1] Idaho-[StateName:3])
</augsyn>
<mrl lang="geo-funql">
answer(area_1(stateid('idaho')))
</mrl>
<mrl lang="geo-prolog">
answer(A,(area(B,A),const(B,stateid(idaho))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ area_1 ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="3"> *n:StateName -> ({ ' idaho ' }) </node>
</mrl-parse>
</example>

<example id="283">
<nl lang="en">
مساحت ماین چقدر است ؟
</nl>
<nl lang="es">
que es la area de maine ?
</nl>
<nl lang="ja">
meen no chiiki wa nan desu ka ?
</nl>
<nl lang="tr">
maine nin yuzolcumu nedir ?
</nl>
<syn lang="en">
(S مساحت ماین چقدر است ؟)
</syn>
<syn lang="es">
(S que es la area de maine)
</syn>
<syn lang="ja">
(S meen no chiiki wa nan desu ka)
</syn>
<syn lang="tr">
(S maine nin yuzolcumu nedir)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the area-[Num:1] of-[Num:1] Maine-[StateName:3])
</augsyn>
<mrl lang="geo-funql">
answer(area_1(stateid('maine')))
</mrl>
<mrl lang="geo-prolog">
answer(A,(area(B,A),const(B,stateid(maine))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ area_1 ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="3"> *n:StateName -> ({ ' maine ' }) </node>
</mrl-parse>
</example>

<example id="284">
<nl lang="en">
مساحت مریلند برحسب کیلومتر مربع چقدر است ؟
</nl>
<syn lang="en">
(S مساحت مریلند برحسب کیلومتر مربع چقدر است ؟)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the area-[Num:1] of-[Num:1] Maryland-[StateName:3] in-[Num:1] square-[Num:1] kilometers-[Num:1])
</augsyn>
<mrl lang="geo-funql">
answer(area_1(stateid('maryland')))
</mrl>
<mrl lang="geo-prolog">
answer(A,(area(B,A),const(B,stateid(maryland))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ area_1 ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="3"> *n:StateName -> ({ ' maryland ' }) </node>
</mrl-parse>
</example>

<example id="285">
<nl lang="en">
مساحت نیومکزیکو چقدر است ؟
</nl>
<syn lang="en">
(S مساحت نیومکزیکو چقدر است ؟)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the area-[Num:1] of-[Num:1] New-[StateName:3] Mexico-[StateName:3])
</augsyn>
<mrl lang="geo-funql">
answer(area_1(stateid('new mexico')))
</mrl>
<mrl lang="geo-prolog">
answer(A,(area(B,A),const(B,stateid('new mexico'))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ area_1 ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="3"> *n:StateName -> ({ ' new mexico ' }) </node>
</mrl-parse>
</example>

<example id="286">
<nl lang="en">
مساحت اوهایو چقدر است ؟
</nl>
<syn lang="en">
(S مساحت اوهایو چقدر است ؟)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the area-[Num:1] of-[Num:1] Ohio-[StateName:3])
</augsyn>
<mrl lang="geo-funql">
answer(area_1(stateid('ohio')))
</mrl>
<mrl lang="geo-prolog">
answer(A,(area(B,A),const(B,stateid(ohio))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ area_1 ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="3"> *n:StateName -> ({ ' ohio ' }) </node>
</mrl-parse>
</example>

<example id="287">
<nl lang="en">
مساحت سیاتل چقدر است ؟
</nl>
<syn lang="en">
(S مساحت سیاتل چقدر است ؟)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the area-[Num:1] of-[Num:1] Seattle-[CityName:3])
</augsyn>
<mrl lang="geo-funql">
answer(area_1(cityid('seattle', _)))
</mrl>
<mrl lang="geo-prolog">
answer(A,(area(B,A),const(B,cityid(seattle,_))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ area_1 ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ cityid ( *n:CityName , _ ) }) </node>
<node id="3"> *n:CityName -> ({ ' seattle ' }) </node>
</mrl-parse>
</example>

<example id="288">
<nl lang="en">
مساحت کالیفرنیای جنوبی چقدر است ؟
</nl>
<nl lang="es">
que es la area de south carolina ?
</nl>
<nl lang="ja">
sausu karoraina no chiiki wa nan desu ka ?
</nl>
<nl lang="tr">
south carolina nin yuzolcumu nedir ?
</nl>
<syn lang="en">
(S مساحت کالیفرنیای جنوبی چقدر است ؟)
</syn>
<syn lang="es">
(S que es la area de south_carolina)
</syn>
<syn lang="ja">
(S sausu_karoraina no chiiki wa nan desu ka)
</syn>
<syn lang="tr">
(S south_carolina nin yuzolcumu nedir)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the area-[Num:1] of-[Num:1] South-[StateName:3] Carolina-[StateName:3])
</augsyn>
<mrl lang="geo-funql">
answer(area_1(stateid('south carolina')))
</mrl>
<mrl lang="geo-prolog">
answer(A,(area(B,A),const(B,stateid('south carolina'))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ area_1 ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="3"> *n:StateName -> ({ ' south carolina ' }) </node>
</mrl-parse>
</example>

<example id="289">
<nl lang="en">
مساحت تگزاس چقدر است ؟
</nl>
<syn lang="en">
(S مساحت تگزاس چقدر است ؟)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the area-[Num:1] of-[Num:1] Texas-[StateName:3])
</augsyn>
<mrl lang="geo-funql">
answer(area_1(stateid('texas')))
</mrl>
<mrl lang="geo-prolog">
answer(A,(area(B,A),const(B,stateid(texas))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ area_1 ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="3"> *n:StateName -> ({ ' texas ' }) </node>
</mrl-parse>
</example>

<example id="290">
<nl lang="en">
مساحت بزرگترین ایالت چقدر است ؟
</nl>
<nl lang="es">
que es la area de el estado mas grande ?
</nl>
<nl lang="ja">
mottomo ookii shuu no chiiki wa nan desu ka ?
</nl>
<nl lang="tr">
en genis eyaletin yuzolcumu nedir ?
</nl>
<syn lang="en">
(S مساحت بزرگترین ایالت چقدر است ؟)
</syn>
<syn lang="es">
(S que es la area de el estado mas grande)
</syn>
<syn lang="ja">
(S mottomo ookii shuu no chiiki wa nan desu ka)
</syn>
<syn lang="tr">
(S en genis eyaletin yuzolcumu nedir)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the area-[Num:1] of-[Num:1] the largest-[State:2] state-[State:3])
</augsyn>
<mrl lang="geo-funql">
answer(area_1(largest(state(all))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(area(B,A),largest(B,state(B))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ area_1 ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ largest ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="291">
<nl lang="en">
مساحت کوچکترین ایالت چقدر است ؟
</nl>
<nl lang="es">
que es la area de el estado mas pequeno ?
</nl>
<nl lang="ja">
mottomo chiisai shuu no chiiki wa nan desu ka ?
</nl>
<nl lang="tr">
en kucuk eyaletin yuzolcumu nedir ?
</nl>
<syn lang="en">
(S مساحت کوچکترین ایالت چقدر است ؟)
</syn>
<syn lang="es">
(S que es la area de el estado mas pequeno)
</syn>
<syn lang="ja">
(S mottomo chiisai shuu no chiiki wa nan desu ka)
</syn>
<syn lang="tr">
(S en kucuk eyaletin yuzolcumu nedir)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the area-[Num:1] of-[Num:1] the smallest-[State:2] state-[State:3])
</augsyn>
<mrl lang="geo-funql">
answer(area_1(smallest(state(all))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(area(B,A),smallest(B,state(B))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ area_1 ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ smallest ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="292">
<nl lang="en">
مساحت ایالتی که مرکز آن آلبانی است چقدر است ؟
</nl>
<syn lang="en">
(S مساحت ایالتی که مرکز آن آلبانی است چقدر است ؟)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the area-[Num:1] of-[Num:1] the state-[State:2] with-[State:3] the capital-[City:4] Albany-[CityName:6])
</augsyn>
<mrl lang="geo-funql">
answer(area_1(state(loc_1(capital(cityid('albany', _))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(area(B,A),state(B),loc(C,B),capital(C),const(C,cityid(albany,_))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ area_1 ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ loc_1 ( *n:City ) }) </node>
<node id="4"> *n:City -> ({ capital ( *n:City ) }) </node>
<node id="5"> *n:City -> ({ cityid ( *n:CityName , _ ) }) </node>
<node id="6"> *n:CityName -> ({ ' albany ' }) </node>
</mrl-parse>
</example>

<example id="293">
<nl lang="en">
مساحت ایالتی که کمترین چگالی جمعیت را دارد چقدر است ؟
</nl>
<syn lang="en">
(S مساحت ایالتی که کمترین چگالی جمعیت را دارد چقدر است ؟)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the area-[Num:1] of-[Num:1] the state-[State:3] with-[State:2] the smallest-[State:2] population-[State:2] density-[State:2])
</augsyn>
<mrl lang="geo-funql">
answer(area_1(smallest_one(density_1(state(all)))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(area(B,A),smallest(C,(state(B),density(B,C)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ area_1 ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ smallest_one ( density_1 ( *n:State ) ) }) </node>
<node id="3"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="294">
<nl lang="en">
مساحت همه ایالات چقدر است ؟
</nl>
<syn lang="en">
(S مساحت همه ایالات چقدر است ؟)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the area-[Num:1] of-[Num:1] the states-[State:2])
</augsyn>
<mrl lang="geo-funql">
answer(area_1(state(all)))
</mrl>
<mrl lang="geo-prolog">
answer(A,(area(B,A),state(B)))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ area_1 ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="295">
<nl lang="en">
مساحت ایالت تگزاس چقدر است ؟
</nl>
<syn lang="en">
(S مساحت ایالت تگزاس چقدر است ؟)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the area-[Num:1] of-[Num:1] the Texas-[StateName:4] state-[State:2])
</augsyn>
<mrl lang="geo-funql">
answer(area_1(state(stateid('texas'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(area(B,A),const(B,stateid(texas))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ area_1 ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="4"> *n:StateName -> ({ ' texas ' }) </node>
</mrl-parse>
</example>

<example id="296">
<nl lang="en">
مساحت ایالت ویسکونسین چقدر است ؟
</nl>
<nl lang="es">
que es la area de wisconsin ?
</nl>
<nl lang="ja">
uisukonshin no chiiki wa nan desu ka ?
</nl>
<nl lang="tr">
wisconsin nin yuzolcumu nedir ?
</nl>
<syn lang="en">
(S مساحت ایالت ویسکونسین چقدر است ؟)
</syn>
<syn lang="es">
(S que es la area de wisconsin)
</syn>
<syn lang="ja">
(S uisukonshin no chiiki wa nan desu ka)
</syn>
<syn lang="tr">
(S wisconsin nin yuzolcumu nedir)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the area-[Num:1] of-[Num:1] Wisconsin-[StateName:3])
</augsyn>
<mrl lang="geo-funql">
answer(area_1(stateid('wisconsin')))
</mrl>
<mrl lang="geo-prolog">
answer(A,(area(B,A),const(B,stateid(wisconsin))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ area_1 ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="3"> *n:StateName -> ({ ' wisconsin ' }) </node>
</mrl-parse>
</example>

<example id="297">
<nl lang="en">
چگالی جمعیت در ایالات متحده چقدر است ؟
</nl>
<syn lang="en">
(S چگالی جمعیت در ایالات متحده چقدر است ؟)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the average-[Num:1] population-[Num:1] of-[Num:1] the US-[CountryName:3] by-[Num:1] state-[Num:1])
</augsyn>
<mrl lang="geo-funql">
answer(density_1(countryid('usa')))
</mrl>
<mrl lang="geo-prolog">
answer(A,(density(B,A),const(B,countryid(usa))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ density_1 ( *n:Country ) }) </node>
<node id="2"> *n:Country -> ({ countryid ( *n:CountryName ) }) </node>
<node id="3"> *n:CountryName -> ({ ' usa ' }) </node>
</mrl-parse>
</example>

<example id="298">
<nl lang="en">
میانگین جمعیت بر کیلومتر مربع در پنسیلوانیا چقدر است ؟
</nl>
<syn lang="en">
(S میانگین جمعیت بر کیلومتر مربع در پنسیلوانیا چقدر است ؟)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the average-[Num:1] population-[Num:1] per-[Num:1] square-[Num:1] km-[Num:1] in-[Num:1] Pennsylvania-[StateName:3])
</augsyn>
<mrl lang="geo-funql">
answer(density_1(stateid('pennsylvania')))
</mrl>
<mrl lang="geo-prolog">
answer(A,(density(B,A),const(B,stateid(pennsylvania))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ density_1 ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="3"> *n:StateName -> ({ ' pennsylvania ' }) </node>
</mrl-parse>
</example>

<example id="299">
<nl lang="en">
میانگین جمعیت بر کیلومتر مربع در ایالات متحده چقدر است ؟
</nl>
<syn lang="en">
(S میانگین جمعیت بر کیلومتر مربع در ایالات متحده چقدر است ؟)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the average-[Num:1] population-[Num:1] per-[Num:1] square-[Num:1] km-[Num:1] in-[Num:1] the US-[CountryName:3])
</augsyn>
<mrl lang="geo-funql">
answer(density_1(countryid('usa')))
</mrl>
<mrl lang="geo-prolog">
answer(A,(density(B,A),const(B,countryid(usa))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ density_1 ( *n:Country ) }) </node>
<node id="2"> *n:Country -> ({ countryid ( *n:CountryName ) }) </node>
<node id="3"> *n:CountryName -> ({ ' usa ' }) </node>
</mrl-parse>
</example>

<example id="300">
<nl lang="en">
بزگترین شهر آمریکایی که در ایالتی که در آن رودخانه ای وجود دارد واقع شده است کدام است ؟
</nl>
<syn lang="en">
(S بزگترین شهر آمریکایی که در ایالتی که در آن رودخانه ای وجود دارد واقع شده است کدام است ؟)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the biggest-[City:1] American-[City:2] city-[City:2] in-[City:3] a-[State:4] state-[State:4] with-[State:5] a-[River:6] river-[River:6])
</augsyn>
<mrl lang="geo-funql">
answer(largest(city(loc_2(state(loc_1(river(all)))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,largest(A,(city(A),loc(A,B),state(B),loc(C,B),river(C))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ largest ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ loc_1 ( *n:River ) }) </node>
<node id="6"> *n:River -> ({ river ( all ) }) </node>
</mrl-parse>
</example>

<example id="301">
<nl lang="en">
بزرگترین مرکز استان در ایالت متحده کدام است ؟
</nl>
<syn lang="en">
(S بزرگترین مرکز استان در ایالت متحده کدام است ؟)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the biggest-[City:1] capital-[City:2] city-[City:3] in-[City:4] the US-[CountryName:6])
</augsyn>
<mrl lang="geo-funql">
answer(largest(capital(city(loc_2(countryid('usa'))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,largest(A,(capital(A),loc(A,B),const(B,countryid(usa)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ largest ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ capital ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="4"> *n:City -> ({ loc_2 ( *n:Country ) }) </node>
<node id="5"> *n:Country -> ({ countryid ( *n:CountryName ) }) </node>
<node id="6"> *n:CountryName -> ({ ' usa ' }) </node>
</mrl-parse>
</example>

<example id="302">
<nl lang="en">
بزرگترین شهر آریزونا کدام است ؟
</nl>
<nl lang="es">
que es la ciudad mas grande en arizona ?
</nl>
<nl lang="ja">
arizona no mottomo ookii toshi wa nan desu ka ?
</nl>
<nl lang="tr">
arizona daki en buyuk sehir nedir ?
</nl>
<syn lang="en">
(S بزرگترین شهر آریزونا کدام است ؟)
</syn>
<syn lang="es">
(S que es la ciudad mas grande en arizona)
</syn>
<syn lang="ja">
(S arizona no mottomo ookii toshi wa nan desu ka)
</syn>
<syn lang="tr">
(S arizona daki en buyuk sehir nedir)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the biggest-[City:1] city-[City:2] in-[City:3] Arizona-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(largest(city(loc_2(stateid('arizona')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,largest(A,(city(A),loc(A,B),const(B,stateid(arizona)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ largest ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' arizona ' }) </node>
</mrl-parse>
</example>

<example id="303">
<nl lang="en">
بزرگترین شهر جورجیا کدام است ؟
</nl>
<nl lang="es">
que es la ciudad mas grande en georgia ?
</nl>
<nl lang="ja">
joojaa no mottomo ookii toshi wa nan desu ka ?
</nl>
<nl lang="tr">
georgia daki en buyuk sehir nedir ?
</nl>
<syn lang="en">
(S بزرگترین شهر جورجیا کدام است ؟)
</syn>
<syn lang="es">
(S que es la ciudad mas grande en georgia)
</syn>
<syn lang="ja">
(S joojaa no mottomo ookii toshi wa nan desu ka)
</syn>
<syn lang="tr">
(S georgia daki en buyuk sehir nedir)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the biggest-[City:1] city-[City:2] in-[City:3] Georgia-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(largest(city(loc_2(stateid('georgia')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,largest(A,(city(A),loc(A,B),const(B,stateid(georgia)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ largest ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' georgia ' }) </node>
</mrl-parse>
</example>

<example id="304">
<nl lang="en">
بزرگترین شهر کانزاس کدام است ؟
</nl>
<syn lang="en">
(S بزرگترین شهر کانزاس کدام است ؟)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the biggest-[City:1] city-[City:2] in-[City:3] Kansas-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(largest(city(loc_2(stateid('kansas')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,largest(A,(city(A),loc(A,B),const(B,stateid(kansas)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ largest ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' kansas ' }) </node>
</mrl-parse>
</example>

<example id="305">
<nl lang="en">
بزرگترین شهر لوئیزیانا کدام است ؟
</nl>
<nl lang="es">
que es la ciudad mas grande en louisiana ?
</nl>
<nl lang="ja">
ruijiana no mottomo ookii toshi wa nan desu ka ?
</nl>
<nl lang="tr">
louisiana daki en buyuk sehir nedir ?
</nl>
<syn lang="en">
(S بزرگترین شهر لوئیزیانا کدام است ؟)
</syn>
<syn lang="es">
(S que es la ciudad mas grande en louisiana)
</syn>
<syn lang="ja">
(S ruijiana no mottomo ookii toshi wa nan desu ka)
</syn>
<syn lang="tr">
(S louisiana daki en buyuk sehir nedir)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the biggest-[City:1] city-[City:2] in-[City:3] Louisiana-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(largest(city(loc_2(stateid('louisiana')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,largest(A,(city(A),loc(A,B),const(B,stateid(louisiana)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ largest ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' louisiana ' }) </node>
</mrl-parse>
</example>

<example id="306">
<nl lang="en">
بزرگترین شهر نبراسکا کدام است ؟
</nl>
<syn lang="en">
(S بزرگترین شهر نبراسکا کدام است ؟)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the biggest-[City:1] city-[City:2] in-[City:3] Nebraska-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(largest(city(loc_2(stateid('nebraska')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,largest(A,(city(A),loc(A,B),const(B,stateid(nebraska)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ largest ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' nebraska ' }) </node>
</mrl-parse>
</example>

<example id="307">
<nl lang="en">
بزرگترین شهر اورگان کدام است ؟
</nl>
<nl lang="es">
que es la ciudad mas grande en oregon ?
</nl>
<nl lang="ja">
oregon no mottomo ookii toshi wa nan desu ka ?
</nl>
<nl lang="tr">
oregon daki en buyuk sehir nedir ?
</nl>
<syn lang="en">
(S بزرگترین شهر اورگان کدام است ؟)
</syn>
<syn lang="es">
(S que es la ciudad mas grande en oregon)
</syn>
<syn lang="ja">
(S oregon no mottomo ookii toshi wa nan desu ka)
</syn>
<syn lang="tr">
(S oregon daki en buyuk sehir nedir)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the biggest-[City:1] city-[City:2] in-[City:3] Oregon-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(largest(city(loc_2(stateid('oregon')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,largest(A,(city(A),loc(A,B),const(B,stateid(oregon)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ largest ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' oregon ' }) </node>
</mrl-parse>
</example>

<example id="308">
<nl lang="en">
بزرگترین شهر در تگزاس کدام است ؟
</nl>
<nl lang="es">
que es la ciudad mas grande en texas ?
</nl>
<nl lang="ja">
tekisasu no mottomo ookii toshi wa nan desu ka ?
</nl>
<nl lang="tr">
texas daki en buyuk sehir nedir ?
</nl>
<syn lang="en">
(S بزرگترین شهر در تگزاس کدام است ؟)
</syn>
<syn lang="es">
(S que es la ciudad mas grande en texas)
</syn>
<syn lang="ja">
(S tekisasu no mottomo ookii toshi wa nan desu ka)
</syn>
<syn lang="tr">
(S texas daki en buyuk sehir nedir)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the biggest-[City:1] city-[City:2] in-[City:3] Texas-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(largest(city(loc_2(stateid('texas')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,largest(A,(city(A),loc(A,B),const(B,stateid(texas)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ largest ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' texas ' }) </node>
</mrl-parse>
</example>

<example id="309">
<nl lang="en">
بزرگترین شهر کوچکترین ایالت کدام است ؟
</nl>
<syn lang="en">
(S بزرگترین شهر کوچکترین ایالت کدام است ؟)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the biggest-[City:1] city-[City:2] in-[City:3] the smallest-[State:4] state-[State:5])
</augsyn>
<mrl lang="geo-funql">
answer(largest(city(loc_2(smallest(state(all))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,largest(A,(city(A),loc(A,B),smallest(B,state(B)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ largest ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ smallest ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="310">
<nl lang="en">
بزرگترین شهر ایالات متحده کدام است ؟
</nl>
<nl lang="es">
que es la ciudad mas grande en los usa ?
</nl>
<nl lang="ja">
amerika no mottomo ookii toshi wa nan desu ka ?
</nl>
<nl lang="tr">
usa deki en buyuk sehir nedir ?
</nl>
<syn lang="en">
(S بزرگترین شهر ایالات متحده کدام است ؟)
</syn>
<syn lang="es">
(S que es la ciudad mas grande en los usa)
</syn>
<syn lang="ja">
(S amerika no mottomo ookii toshi wa nan desu ka)
</syn>
<syn lang="tr">
(S usa deki en buyuk sehir nedir)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the biggest-[City:1] city-[City:2] in-[City:3] the US-[CountryName:5])
</augsyn>
<mrl lang="geo-funql">
answer(largest(city(loc_2(countryid('usa')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,largest(A,(city(A),loc(A,B),const(B,countryid(usa)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ largest ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ loc_2 ( *n:Country ) }) </node>
<node id="4"> *n:Country -> ({ countryid ( *n:CountryName ) }) </node>
<node id="5"> *n:CountryName -> ({ ' usa ' }) </node>
</mrl-parse>
</example>

<example id="311">
<nl lang="en">
بزرگترین شهر ایالات متحده کدام است ؟
</nl>
<nl lang="es">
que es la ciudad mas grande en los usa ?
</nl>
<nl lang="ja">
amerika no mottomo ookii toshi wa nan desu ka ?
</nl>
<nl lang="tr">
usa deki en buyuk sehir nedir ?
</nl>
<syn lang="en">
(S بزرگترین شهر ایالات متحده کدام است ؟)
</syn>
<syn lang="es">
(S que es la ciudad mas grande en los usa)
</syn>
<syn lang="ja">
(S amerika no mottomo ookii toshi wa nan desu ka)
</syn>
<syn lang="tr">
(S usa deki en buyuk sehir nedir)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the biggest-[City:1] city-[City:2] in-[City:3] the USA-[CountryName:5])
</augsyn>
<mrl lang="geo-funql">
answer(largest(city(loc_2(countryid('usa')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,largest(A,(city(A),loc(A,B),const(B,countryid(usa)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ largest ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ loc_2 ( *n:Country ) }) </node>
<node id="4"> *n:Country -> ({ countryid ( *n:CountryName ) }) </node>
<node id="5"> *n:CountryName -> ({ ' usa ' }) </node>
</mrl-parse>
</example>

<example id="312">
<nl lang="en">
بزرگترین شهر ایالات متحده کدام است ؟
</nl>
<syn lang="en">
(S بزرگترین شهر ایالات متحده کدام است ؟)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the biggest-[City:1] city-[City:2] in-[City:3] USA-[CountryName:5])
</augsyn>
<mrl lang="geo-funql">
answer(largest(city(loc_2(countryid('usa')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,largest(A,(city(A),loc(A,B),const(B,countryid(usa)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ largest ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ loc_2 ( *n:Country ) }) </node>
<node id="4"> *n:Country -> ({ countryid ( *n:CountryName ) }) </node>
<node id="5"> *n:CountryName -> ({ ' usa ' }) </node>
</mrl-parse>
</example>

<example id="313">
<nl lang="en">
بزرگترین شهر وایومینگ کدام است ؟
</nl>
<nl lang="es">
que es la ciudad mas grande en wyoming ?
</nl>
<nl lang="ja">
waiomingu no mottomo ookii toshi wa nan desu ka ?
</nl>
<nl lang="tr">
wyoming daki en buyuk sehir nedir ?
</nl>
<syn lang="en">
(S بزرگترین شهر وایومینگ کدام است ؟)
</syn>
<syn lang="es">
(S que es la ciudad mas grande en wyoming)
</syn>
<syn lang="ja">
(S waiomingu no mottomo ookii toshi wa nan desu ka)
</syn>
<syn lang="tr">
(S wyoming daki en buyuk sehir nedir)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the biggest-[City:1] city-[City:2] in-[City:3] Wyoming-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(largest(city(loc_2(stateid('wyoming')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,largest(A,(city(A),loc(A,B),const(B,stateid(wyoming)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ largest ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' wyoming ' }) </node>
</mrl-parse>
</example>

<example id="314">
<nl lang="en">
بزرگترین رودخانه ایلینوی کدام است ؟
</nl>
<nl lang="es">
que es el rio mas grande en illinois ?
</nl>
<nl lang="ja">
irinoi no mottomo ookii kawa wa nan desu ka ?
</nl>
<nl lang="tr">
illinois deki en buyuk nehir nedir ?
</nl>
<syn lang="en">
(S بزرگترین رودخانه ایلینوی کدام است ؟)
</syn>
<syn lang="es">
(S que es el rio mas grande en illinois)
</syn>
<syn lang="ja">
(S irinoi no mottomo ookii kawa wa nan desu ka)
</syn>
<syn lang="tr">
(S illinois deki en buyuk nehir nedir)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the biggest-[River:1] river-[River:2] in-[River:3] Illinois-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(longest(river(loc_2(stateid('illinois')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,largest(A,(river(A),loc(A,B),const(B,stateid(illinois)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:River ) }) </node>
<node id="1"> *n:River -> ({ longest ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' illinois ' }) </node>
</mrl-parse>
</example>

<example id="315">
<nl lang="en">
بزرگترین ایالت کدام است ؟
</nl>
<syn lang="en">
(S بزرگترین ایالت کدام است ؟)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the biggest-[State:1] state-[State:2])
</augsyn>
<mrl lang="geo-funql">
answer(largest(state(all)))
</mrl>
<mrl lang="geo-prolog">
answer(A,largest(A,state(A)))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ largest ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="316">
<nl lang="en">
بزرگترین ایالت در قاره امریکا کدام است ؟
</nl>
<syn lang="en">
(S بزرگترین ایالت در قاره امریکا کدام است ؟)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the biggest-[State:1] state-[State:2] in-[State:3] continental-[CountryName:5] US-[CountryName:5])
</augsyn>
<mrl lang="geo-funql">
answer(largest(state(loc_2(countryid('usa')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,largest(A,(state(A),loc(A,B),const(B,countryid(usa)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ largest ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ loc_2 ( *n:Country ) }) </node>
<node id="4"> *n:Country -> ({ countryid ( *n:CountryName ) }) </node>
<node id="5"> *n:CountryName -> ({ ' usa ' }) </node>
</mrl-parse>
</example>

<example id="317">
<nl lang="en">
بزرگترین ایالت در ایالات متحده امریکا کدام است ؟
</nl>
<syn lang="en">
(S بزرگترین ایالت در ایالات متحده امریکا کدام است ؟)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the biggest-[State:1] state-[State:2] in-[State:3] the USA-[CountryName:5])
</augsyn>
<mrl lang="geo-funql">
answer(largest(state(loc_2(countryid('usa')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,largest(A,(state(A),loc(A,B),const(B,countryid(usa)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ largest ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ loc_2 ( *n:Country ) }) </node>
<node id="4"> *n:Country -> ({ countryid ( *n:CountryName ) }) </node>
<node id="5"> *n:CountryName -> ({ ' usa ' }) </node>
</mrl-parse>
</example>

<example id="318">
<nl lang="en">
مرکز بزرگترین ایالت آمریکا کدام است ؟
</nl>
<syn lang="en">
(S مرکز بزرگترین ایالت آمریکا کدام است ؟)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the capital-[City:1] city-[City:2] of-[City:3] the largest-[State:4] state-[State:5] in-[State:6] the US-[CountryName:8])
</augsyn>
<mrl lang="geo-funql">
answer(capital(city(loc_2(largest(state(loc_2(countryid('usa'))))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(capital(A),city(A),loc(A,B),largest(B,(state(B),loc(B,C),const(C,countryid(usa))))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ capital ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ largest ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="6"> *n:State -> ({ loc_2 ( *n:Country ) }) </node>
<node id="7"> *n:Country -> ({ countryid ( *n:CountryName ) }) </node>
<node id="8"> *n:CountryName -> ({ ' usa ' }) </node>
</mrl-parse>
</example>

<example id="319">
<nl lang="en">
مرکز کالیفرنیا کجاست ؟
</nl>
<syn lang="en">
(S مرکز کالیفرنیا کجاست ؟)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the capital-[City:1] of-[City:2] California-[StateName:4])
</augsyn>
<mrl lang="geo-funql">
answer(capital(loc_2(stateid('california'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(capital(A),loc(A,B),const(B,stateid(california))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ capital ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="4"> *n:StateName -> ({ ' california ' }) </node>
</mrl-parse>
</example>

<example id="320">
<nl lang="en">
مرکز کلرادو کجاست ؟
</nl>
<syn lang="en">
(S مرکز کلرادو کجاست ؟)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the capital-[City:1] of-[City:2] Colorado-[StateName:4])
</augsyn>
<mrl lang="geo-funql">
answer(capital(loc_2(stateid('colorado'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(capital(A),loc(A,B),const(B,stateid(colorado))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ capital ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="4"> *n:StateName -> ({ ' colorado ' }) </node>
</mrl-parse>
</example>

<example id="321">
<nl lang="en">
مرکز جورجیا کجاست ؟
</nl>
<nl lang="es">
que es la capital de georgia ?
</nl>
<nl lang="ja">
joojaa no shuto wa nan desu ka ?
</nl>
<nl lang="tr">
georgia in baskenti nedir ?
</nl>
<syn lang="en">
(S مرکز جورجیا کجاست ؟)
</syn>
<syn lang="es">
(S que es la capital de georgia)
</syn>
<syn lang="ja">
(S joojaa no shuto wa nan desu ka)
</syn>
<syn lang="tr">
(S georgia in baskenti nedir)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the capital-[City:1] of-[City:2] Georgia-[StateName:4])
</augsyn>
<mrl lang="geo-funql">
answer(capital(loc_2(stateid('georgia'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(capital(A),loc(A,B),const(B,stateid(georgia))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ capital ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="4"> *n:StateName -> ({ ' georgia ' }) </node>
</mrl-parse>
</example>

<example id="322">
<nl lang="en">
مرکز هاوایی کجاست ؟
</nl>
<syn lang="en">
(S مرکز هاوایی کجاست ؟)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the capital-[City:1] of-[City:2] Hawaii-[StateName:4])
</augsyn>
<mrl lang="geo-funql">
answer(capital(loc_2(stateid('hawaii'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(capital(A),loc(A,B),const(B,stateid(hawaii))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ capital ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="4"> *n:StateName -> ({ ' hawaii ' }) </node>
</mrl-parse>
</example>

<example id="323">
<nl lang="en">
مرکز ایالت ایلینوی کجاست ؟
</nl>
<syn lang="en">
(S مرکز ایالت ایلینوی کجاست ؟)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the capital-[City:1] of-[City:2] Illinois-[StateName:4])
</augsyn>
<mrl lang="geo-funql">
answer(capital(loc_2(stateid('illinois'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(capital(A),loc(A,B),const(B,stateid(illinois))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ capital ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="4"> *n:StateName -> ({ ' illinois ' }) </node>
</mrl-parse>
</example>

<example id="324">
<nl lang="en">
مرکز ایالت ایندیانا کجاست ؟
</nl>
<syn lang="en">
(S مرکز ایالت ایندیانا کجاست ؟)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the capital-[City:1] of-[City:2] Indiana-[StateName:4])
</augsyn>
<mrl lang="geo-funql">
answer(capital(loc_2(stateid('indiana'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(capital(A),loc(A,B),const(B,stateid(indiana))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ capital ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="4"> *n:StateName -> ({ ' indiana ' }) </node>
</mrl-parse>
</example>

<example id="325">
<nl lang="en">
مرکز ایالت آیووا کجاست ؟
</nl>
<nl lang="es">
que es la capital de iowa ?
</nl>
<nl lang="ja">
aiowa no chuto wa nan desu ka ?
</nl>
<nl lang="tr">
iowa in baskenti nedir ?
</nl>
<syn lang="en">
(S مرکز ایالت آیووا کجاست ؟)
</syn>
<syn lang="es">
(S que es la capital de iowa)
</syn>
<syn lang="ja">
(S aiowa no chuto wa nan desu ka)
</syn>
<syn lang="tr">
(S iowa in baskenti nedir)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the capital-[City:1] of-[City:2] Iowa-[StateName:4])
</augsyn>
<mrl lang="geo-funql">
answer(capital(loc_2(stateid('iowa'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(capital(A),loc(A,B),const(B,stateid(iowa))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ capital ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="4"> *n:StateName -> ({ ' iowa ' }) </node>
</mrl-parse>
</example>

<example id="326">
<nl lang="en">
مرکز ایالت ماین کجاست ؟
</nl>
<nl lang="es">
que es la capital de maine ?
</nl>
<nl lang="ja">
meen no chuto wa nan desu ka ?
</nl>
<nl lang="tr">
maine in baskenti nedir ?
</nl>
<syn lang="en">
(S مرکز ایالت ماین کجاست ؟)
</syn>
<syn lang="es">
(S que es la capital de maine)
</syn>
<syn lang="ja">
(S meen no chuto wa nan desu ka)
</syn>
<syn lang="tr">
(S maine in baskenti nedir)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the capital-[City:1] of-[City:2] Maine-[StateName:4])
</augsyn>
<mrl lang="geo-funql">
answer(capital(loc_2(stateid('maine'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(capital(A),loc(A,B),const(B,stateid(maine))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ capital ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="4"> *n:StateName -> ({ ' maine ' }) </node>
</mrl-parse>
</example>

<example id="327">
<nl lang="en">
مرکز ایالت مریلند کجاست ؟
</nl>
<syn lang="en">
(S مرکز ایالت مریلند کجاست ؟)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the capital-[City:1] of-[City:2] Maryland-[StateName:4])
</augsyn>
<mrl lang="geo-funql">
answer(capital(loc_2(stateid('maryland'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(capital(A),loc(A,B),const(B,stateid(maryland))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ capital ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="4"> *n:StateName -> ({ ' maryland ' }) </node>
</mrl-parse>
</example>

<example id="328">
<nl lang="en">
مرکز ایالت ماساچوست کجاست ؟
</nl>
<syn lang="en">
(S مرکز ایالت ماساچوست کجاست ؟)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the capital-[City:1] of-[City:2] Massachusetts-[StateName:4])
</augsyn>
<mrl lang="geo-funql">
answer(capital(loc_2(stateid('massachusetts'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(capital(A),loc(A,B),const(B,stateid(massachusetts))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ capital ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="4"> *n:StateName -> ({ ' massachusetts ' }) </node>
</mrl-parse>
</example>

<example id="329">
<nl lang="en">
مرکز ایالت میشیگان کجاست ؟
</nl>
<syn lang="en">
(S مرکز ایالت میشیگان کجاست ؟)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the capital-[City:1] of-[City:2] Michigan-[StateName:4])
</augsyn>
<mrl lang="geo-funql">
answer(capital(loc_2(stateid('michigan'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(capital(A),loc(A,B),const(B,stateid(michigan))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ capital ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="4"> *n:StateName -> ({ ' michigan ' }) </node>
</mrl-parse>
</example>

<example id="330">
<nl lang="en">
مرکز ایالت نیوهمپشایر کجاست ؟
</nl>
<nl lang="es">
que es la capital de new hampshire ?
</nl>
<nl lang="ja">
nyuu hanpushaa no chuto wa nan desu ka ?
</nl>
<nl lang="tr">
new hampshire in baskenti nedir ?
</nl>
<syn lang="en">
(S مرکز ایالت نیوهمپشایر کجاست ؟)
</syn>
<syn lang="es">
(S que es la capital de new_hampshire)
</syn>
<syn lang="ja">
(S nyuu_hanpushaa no chuto wa nan desu ka)
</syn>
<syn lang="tr">
(S new_hampshire in baskenti nedir)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the capital-[City:1] of-[City:2] New-[StateName:4] Hampshire-[StateName:4])
</augsyn>
<mrl lang="geo-funql">
answer(capital(loc_2(stateid('new hampshire'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(capital(A),loc(A,B),const(B,stateid('new hampshire'))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ capital ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="4"> *n:StateName -> ({ ' new hampshire ' }) </node>
</mrl-parse>
</example>

<example id="331">
<nl lang="en">
مرکز ایالت نیوجرسی کجاست ؟
</nl>
<nl lang="es">
que es la capital de new jersey ?
</nl>
<nl lang="ja">
nyuu jaajii no chuto wa nan desu ka ?
</nl>
<nl lang="tr">
new jersey in baskenti nedir ?
</nl>
<syn lang="en">
(S مرکز ایالت نیوجرسی کجاست ؟)
</syn>
<syn lang="es">
(S que es la capital de new_jersey)
</syn>
<syn lang="ja">
(S nyuu_jaajii no chuto wa nan desu ka)
</syn>
<syn lang="tr">
(S new_jersey in baskenti nedir)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the capital-[City:1] of-[City:2] New-[StateName:4] Jersey-[StateName:4])
</augsyn>
<mrl lang="geo-funql">
answer(capital(loc_2(stateid('new jersey'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(capital(A),loc(A,B),const(B,stateid('new jersey'))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ capital ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="4"> *n:StateName -> ({ ' new jersey ' }) </node>
</mrl-parse>
</example>

<example id="332">
<nl lang="en">
مرکز ایالت نیویوک کجاست ؟
</nl>
<syn lang="en">
(S مرکز ایالت نیویوک کجاست ؟)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the capital-[City:1] of-[City:2] New-[StateName:4] York-[StateName:4])
</augsyn>
<mrl lang="geo-funql">
answer(capital(loc_2(stateid('new york'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(capital(A),loc(A,B),const(B,stateid('new york'))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ capital ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="4"> *n:StateName -> ({ ' new york ' }) </node>
</mrl-parse>
</example>

<example id="333">
<nl lang="en">
مرکز ایالت داکوتای شمالی کجاست ؟
</nl>
<nl lang="es">
que es la capital de north dakota ?
</nl>
<nl lang="ja">
noosu dakota no chuto wa nan desu ka ?
</nl>
<nl lang="tr">
north dakota in baskenti nedir ?
</nl>
<syn lang="en">
(S مرکز ایالت داکوتای شمالی کجاست ؟)
</syn>
<syn lang="es">
(S que es la capital de north_dakota)
</syn>
<syn lang="ja">
(S noosu_dakota no chuto wa nan desu ka)
</syn>
<syn lang="tr">
(S north_dakota in baskenti nedir)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the capital-[City:1] of-[City:2] North-[StateName:4] Dakota-[StateName:4])
</augsyn>
<mrl lang="geo-funql">
answer(capital(loc_2(stateid('north dakota'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(capital(A),loc(A,B),const(B,stateid('north dakota'))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ capital ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="4"> *n:StateName -> ({ ' north dakota ' }) </node>
</mrl-parse>
</example>

<example id="334">
<nl lang="en">
مرکز ایالت اوهایو کجاست ؟
</nl>
<syn lang="en">
(S مرکز ایالت اوهایو کجاست ؟)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the capital-[City:1] of-[City:2] Ohio-[StateName:4])
</augsyn>
<mrl lang="geo-funql">
answer(capital(loc_2(stateid('ohio'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(capital(A),loc(A,B),const(B,stateid(ohio))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ capital ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="4"> *n:StateName -> ({ ' ohio ' }) </node>
</mrl-parse>
</example>

<example id="335">
<nl lang="en">
مرکز ایالت پنسیلوانیا کجاست ؟
</nl>
<syn lang="en">
(S مرکز ایالت پنسیلوانیا کجاست ؟)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the capital-[City:1] of-[City:2] Pennsylvania-[StateName:4])
</augsyn>
<mrl lang="geo-funql">
answer(capital(loc_2(stateid('pennsylvania'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(capital(A),loc(A,B),const(B,stateid(pennsylvania))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ capital ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="4"> *n:StateName -> ({ ' pennsylvania ' }) </node>
</mrl-parse>
</example>

<example id="336">
<nl lang="en">
مرکز ایالت هایی را که شهری به نام دورهام دارند را نام ببر .
</nl>
<syn lang="en">
(S مرکز ایالت هایی را که شهری به نام دورهام دارند را نام ببر .)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the capital-[City:1] of-[City:2] states-[State:3] that have-[State:4] cities-[City:5] named-[City:5] Durham-[CityName:7])
</augsyn>
<mrl lang="geo-funql">
answer(capital(loc_2(state(loc_1(city(cityid('durham', _)))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(capital(A),loc(A,B),state(B),loc(C,B),city(C),const(C,cityid(durham,_))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ capital ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ loc_1 ( *n:City ) }) </node>
<node id="5"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="6"> *n:City -> ({ cityid ( *n:CityName , _ ) }) </node>
<node id="7"> *n:CityName -> ({ ' durham ' }) </node>
</mrl-parse>
</example>

<example id="337">
<nl lang="en">
مرکز ایالت تگزاس کجاست ؟
</nl>
<syn lang="en">
(S مرکز ایالت تگزاس کجاست ؟)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the capital-[City:1] of-[City:2] Texas-[StateName:4])
</augsyn>
<mrl lang="geo-funql">
answer(capital(loc_2(stateid('texas'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(capital(A),loc(A,B),const(B,stateid(texas))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ capital ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="4"> *n:StateName -> ({ ' texas ' }) </node>
</mrl-parse>
</example>

<example id="338">
<nl lang="en">
مرکز ایالت آلاباما کجاست ؟
</nl>
<syn lang="en">
(S مرکز ایالت آلاباما کجاست ؟)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the capital-[City:1] of-[City:2] the Alabama-[StateName:5] state-[State:3])
</augsyn>
<mrl lang="geo-funql">
answer(capital(loc_2(state(stateid('alabama')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(capital(A),loc(A,B),const(B,stateid(alabama)),state(B)))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ capital ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' alabama ' }) </node>
</mrl-parse>
</example>

<example id="339">
<nl lang="en">
مرکز ایالت فلوریدا کجاست ؟
</nl>
<syn lang="en">
(S مرکز ایالت فلوریدا کجاست ؟)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the capital-[City:1] of-[City:2] the Florida-[StateName:5] state-[State:3])
</augsyn>
<mrl lang="geo-funql">
answer(capital(loc_2(state(stateid('florida')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(capital(A),loc(A,B),const(B,stateid(florida)),state(B)))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ capital ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' florida ' }) </node>
</mrl-parse>
</example>

<example id="340">
<nl lang="en">
مرکز بزرگترین ایالت کجاست ؟
</nl>
<syn lang="en">
(S مرکز بزرگترین ایالت کجاست ؟)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the capital-[City:1] of-[City:2] the largest-[State:3] state-[State:4])
</augsyn>
<mrl lang="geo-funql">
answer(capital(loc_2(largest(state(all)))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(capital(A),loc(A,B),largest(B,state(B))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ capital ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ largest ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="341">
<nl lang="en">
مرکز کوچکترین ایالت کجاست ؟
</nl>
<syn lang="en">
(S مرکز کوچکترین ایالت کجاست ؟)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the capital-[City:1] of-[City:2] the smallest-[State:3] state-[State:4])
</augsyn>
<mrl lang="geo-funql">
answer(capital(loc_2(smallest(state(all)))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(capital(A),loc(A,B),smallest(B,state(B))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ capital ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ smallest ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="342">
<nl lang="en">
مرکزایالت تگزاس کجاست ؟
</nl>
<syn lang="en">
(S مرکزایالت تگزاس کجاست ؟)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the capital-[City:1] of-[City:2] the state-[State:3] Texas-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(capital(loc_2(state(stateid('texas')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(capital(A),loc(A,B),state(B),const(B,stateid(texas))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ capital ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' texas ' }) </node>
</mrl-parse>
</example>

<example id="343">
<nl lang="en">
مرکز ایالتی که با بیشتر ایالات همجوار است کجاست ؟
</nl>
<syn lang="en">
(S مرکز ایالتی که با بیشتر ایالات همجوار است کجاست ؟)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the capital-[City:1] of-[City:2] the state-[State:3] that borders-[State:5] the most-[State:3] states-[State:6])
</augsyn>
<mrl lang="geo-funql">
answer(capital(loc_2(most(state(next_to_2(state(all)))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(capital(A),loc(A,B),most(B,C,(state(B),next_to(B,C),state(C)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ capital ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ most ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="6"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="344">
<nl lang="en">
مرکز ایالت همجوار ایالت مجاور تگزاس کجاست ؟
</nl>
<syn lang="en">
(S مرکز ایالت همجوار ایالت مجاور تگزاس کجاست ؟)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the capital-[City:1] of-[City:2] the state-[State:3] that borders-[State:4] the state-[State:5] that borders-[State:6] Texas-[StateName:8])
</augsyn>
<mrl lang="geo-funql">
answer(capital(loc_2(state(next_to_2(state(next_to_2(stateid('texas'))))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(capital(A),loc(A,B),state(B),next_to(B,C),state(C),next_to(C,D),const(D,stateid(texas))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ capital ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="6"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="7"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="8"> *n:StateName -> ({ ' texas ' }) </node>
</mrl-parse>
</example>

<example id="345">
<nl lang="en">
مرکز ایالتی که بلندترین ارتفاع را دارد کجاست ؟
</nl>
<syn lang="en">
(S مرکز ایالتی که بلندترین ارتفاع را دارد کجاست ؟)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the capital-[City:1] of-[City:2] the state-[State:3] with-[State:4] the highest-[Place:5] elevation-[Place:6])
</augsyn>
<mrl lang="geo-funql">
answer(capital(loc_2(state(loc_1(highest(place(all)))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(capital(A),loc(A,B),state(B),loc(C,B),highest(C,place(C))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ capital ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ loc_1 ( *n:Place ) }) </node>
<node id="5"> *n:Place -> ({ highest ( *n:Place ) }) </node>
<node id="6"> *n:Place -> ({ place ( all ) }) </node>
</mrl-parse>
</example>

<example id="346">
<nl lang="en">
مرکز ایالتی که بلندترین نقطه در آن واقع شده است کجاست ؟
</nl>
<nl lang="es">
que es la capital de el estado con el punto mas alto ?
</nl>
<nl lang="ja">
mottomo takai chiten ga aru shuu no shuto wa nan desu ka ?
</nl>
<nl lang="tr">
en yuksek noktayi iceren eyaletin baskenti nedir ?
</nl>
<syn lang="en">
(S مرکز ایالتی که بلندترین نقطه در آن واقع شده است کجاست ؟)
</syn>
<syn lang="es">
(S que es la capital de el estado con el punto mas alto)
</syn>
<syn lang="ja">
(S mottomo takai chiten ga aru shuu no shuto wa nan desu ka)
</syn>
<syn lang="tr">
(S en yuksek noktayi iceren eyaletin baskenti nedir)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the capital-[City:1] of-[City:2] the state-[State:3] with-[State:4] the highest-[Place:5] point-[Place:6])
</augsyn>
<mrl lang="geo-funql">
answer(capital(loc_2(state(loc_1(highest(place(all)))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(capital(A),loc(A,B),state(B),loc(C,B),highest(C,(place(C)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ capital ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ loc_1 ( *n:Place ) }) </node>
<node id="5"> *n:Place -> ({ highest ( *n:Place ) }) </node>
<node id="6"> *n:Place -> ({ place ( all ) }) </node>
</mrl-parse>
</example>

<example id="347">
<nl lang="en">
مرکز ایالتی که بیشترین جمعیت را دارد کجاست ؟
</nl>
<nl lang="es">
que es la capital de el estado con la poblacion mas grande ?
</nl>
<nl lang="ja">
mottomo ookii jinkou ga aru shuu no shuto wa nan desu ka ?
</nl>
<nl lang="tr">
nufusu en fazla olan eyaletin baskenti nedir ?
</nl>
<syn lang="en">
(S مرکز ایالتی که بیشترین جمعیت را دارد کجاست ؟)
</syn>
<syn lang="es">
(S que es la capital de el estado con la poblacion mas grande)
</syn>
<syn lang="ja">
(S mottomo ookii jinkou ga aru shuu no shuto wa nan desu ka)
</syn>
<syn lang="tr">
(S nufusu en fazla olan eyaletin baskenti nedir)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the capital-[City:1] of-[City:2] the state-[State:4] with-[State:3] the largest-[State:3] population-[State:3])
</augsyn>
<mrl lang="geo-funql">
answer(capital(loc_2(largest_one(population_1(state(all))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(capital(A),loc(A,B),largest(C,(state(B),population(B,C)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ capital ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ largest_one ( population_1 ( *n:State ) ) }) </node>
<node id="4"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="348">
<nl lang="en">
مرکز ایالتی که بیشترین چگالی جمعیت را دارد کجاست ؟
</nl>
<syn lang="en">
(S مرکز ایالتی که بیشترین چگالی جمعیت را دارد کجاست ؟)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the capital-[City:1] of-[City:2] the state-[State:4] with-[State:3] the largest-[State:3] population-[State:3] density-[State:3])
</augsyn>
<mrl lang="geo-funql">
answer(capital(loc_2(largest_one(density_1(state(all))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(capital(A),loc(A,B),largest(C,(state(B),density(B,C)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ capital ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ largest_one ( density_1 ( *n:State ) ) }) </node>
<node id="4"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="349">
<nl lang="en">
مرکز ایالتی که بلندترین رود را دارد کجاست ؟
</nl>
<syn lang="en">
(S مرکز ایالتی که بلندترین رود را دارد کجاست ؟)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the capital-[City:1] of-[City:2] the state-[State:3] with-[State:4] the longest-[River:5] river-[River:6])
</augsyn>
<mrl lang="geo-funql">
answer(capital(loc_2(state(loc_1(longest(river(all)))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(capital(A),loc(A,B),state(B),loc(C,B),longest(C,(river(C)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ capital ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ loc_1 ( *n:River ) }) </node>
<node id="5"> *n:River -> ({ longest ( *n:River ) }) </node>
<node id="6"> *n:River -> ({ river ( all ) }) </node>
</mrl-parse>
</example>

<example id="350">
<nl lang="en">
مرکز ایالتی که بیشترین ساکنین را دارد کجاست ؟
</nl>
<syn lang="en">
(S مرکز ایالتی که بیشترین ساکنین را دارد کجاست ؟)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the capital-[City:1] of-[City:2] the state-[State:4] with-[State:3] the most-[State:3] inhabitants-[State:3])
</augsyn>
<mrl lang="geo-funql">
answer(capital(loc_2(largest_one(population_1(state(all))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(capital(A),loc(A,B),largest(C,(state(B),population(B,C)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ capital ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ largest_one ( population_1 ( *n:State ) ) }) </node>
<node id="4"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="351">
<nl lang="en">
مرکز یوتاه کجاست ؟
</nl>
<nl lang="es">
que es la capital de utah ?
</nl>
<nl lang="ja">
yuutaa no chuto wa nan desu ka ?
</nl>
<nl lang="tr">
utah in baskenti nedir ?
</nl>
<syn lang="en">
(S مرکز یوتاه کجاست ؟)
</syn>
<syn lang="es">
(S que es la capital de utah)
</syn>
<syn lang="ja">
(S yuutaa no chuto wa nan desu ka)
</syn>
<syn lang="tr">
(S utah in baskenti nedir)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the capital-[City:1] of-[City:2] Utah-[StateName:4])
</augsyn>
<mrl lang="geo-funql">
answer(capital(loc_2(stateid('utah'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(capital(A),loc(A,B),const(B,stateid(utah))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ capital ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="4"> *n:StateName -> ({ ' utah ' }) </node>
</mrl-parse>
</example>

<example id="352">
<nl lang="en">
مرکز ورمونت کجاست ؟
</nl>
<nl lang="es">
que es la capital de vermont ?
</nl>
<nl lang="ja">
baamonto no chuto wa nan desu ka ?
</nl>
<nl lang="tr">
vermont in baskenti nedir ?
</nl>
<syn lang="en">
(S مرکز ورمونت کجاست ؟)
</syn>
<syn lang="es">
(S que es la capital de vermont)
</syn>
<syn lang="ja">
(S baamonto no chuto wa nan desu ka)
</syn>
<syn lang="tr">
(S vermont in baskenti nedir)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the capital-[City:1] of-[City:2] Vermont-[StateName:4])
</augsyn>
<mrl lang="geo-funql">
answer(capital(loc_2(stateid('vermont'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(capital(A),loc(A,B),const(B,stateid(vermont))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ capital ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="4"> *n:StateName -> ({ ' vermont ' }) </node>
</mrl-parse>
</example>

<example id="353">
<nl lang="en">
مرکز واشنگتن کجاست ؟
</nl>
<nl lang="es">
que es la capital de washington ?
</nl>
<nl lang="ja">
washinton no chuto wa nan desu ka ?
</nl>
<nl lang="tr">
washington in baskenti nedir ?
</nl>
<syn lang="en">
(S مرکز واشنگتن کجاست ؟)
</syn>
<syn lang="es">
(S que es la capital de washington)
</syn>
<syn lang="ja">
(S washinton no chuto wa nan desu ka)
</syn>
<syn lang="tr">
(S washington in baskenti nedir)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the capital-[City:1] of-[City:2] Washington-[StateName:4])
</augsyn>
<mrl lang="geo-funql">
answer(capital(loc_2(stateid('washington'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(capital(A),loc(A,B),const(B,stateid(washington))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ capital ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="4"> *n:StateName -> ({ ' washington ' }) </node>
</mrl-parse>
</example>

<example id="354">
<nl lang="en">
کدام شهر تگزاس بیشترین جمعیت را دارد ؟
</nl>
<syn lang="en">
(S کدام شهر تگزاس بیشترین جمعیت را دارد ؟)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the city-[City:2] in-[City:3] Texas-[StateName:5] with-[City:1] the largest-[City:1] population-[City:1])
</augsyn>
<mrl lang="geo-funql">
answer(largest_one(population_1(city(loc_2(stateid('texas'))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,largest(B,(city(A),loc(A,C),const(C,stateid(texas)),population(A,B))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ largest_one ( population_1 ( *n:City ) ) }) </node>
<node id="2"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' texas ' }) </node>
</mrl-parse>
</example>

<example id="355">
<nl lang="en">
کدام شهر کمترین جمعیت را دارد ؟
</nl>
<nl lang="es">
que es la ciudad con la poblacion mas pequena ?
</nl>
<nl lang="ja">
mottomo chiisai jinkou ga aru toshi wa nan desu ka ?
</nl>
<nl lang="tr">
en az nufuslu sehir nedir ?
</nl>
<syn lang="en">
(S کدام شهر کمترین جمعیت را دارد ؟)
</syn>
<syn lang="es">
(S que es la ciudad con la poblacion mas pequena)
</syn>
<syn lang="ja">
(S mottomo chiisai jinkou ga aru toshi wa nan desu ka)
</syn>
<syn lang="tr">
(S en az nufuslu sehir nedir)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the city-[City:2] with-[City:1] the smallest-[City:1] population-[City:1])
</augsyn>
<mrl lang="geo-funql">
answer(smallest_one(population_1(city(all))))
</mrl>
<mrl lang="geo-prolog">
answer(A,smallest(B,(city(A),population(A,B))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ smallest_one ( population_1 ( *n:City ) ) }) </node>
<node id="2"> *n:City -> ({ city ( all ) }) </node>
</mrl-parse>
</example>

<example id="356">
<nl lang="en">
جمعیت همه 50 ایالت با هم چقدر است ؟
</nl>
<nl lang="es">
que es la area combinada de todos los 50 estados ?
</nl>
<nl lang="ja">
gojuu shuu zenbu no zentai no chiiki wa nan desu ka ?
</nl>
<nl lang="tr">
50 eyaletin toplam alani nedir ?
</nl>
<syn lang="en">
(S جمعیت همه 50 ایالت با هم چقدر است ؟)
</syn>
<syn lang="es">
(S que es la area combinada de todos los 50 estados)
</syn>
<syn lang="ja">
(S gojuu shuu zenbu no zentai no chiiki wa nan desu ka)
</syn>
<syn lang="tr">
(S 50 eyaletin toplam alani nedir)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the combined-[Num:1] area-[Num:2] of-[Num:2] all-[State:3] 50-[State:3] states-[State:3])
</augsyn>
<mrl lang="geo-funql">
answer(sum(area_1(state(all))))
</mrl>
<mrl lang="geo-prolog">
answer(A,sum(B,(area(C,B),state(C)),A))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ sum ( *n:Num ) }) </node>
<node id="2"> *n:Num -> ({ area_1 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="357">
<nl lang="en">
جمعیت 50 ایالت با هم چقدر است ؟
</nl>
<nl lang="es">
que es la poblacion combinada de todos los 50 estados ?
</nl>
<nl lang="ja">
gojuu shuu no zentai no jinkou wa ikura desu ka ?
</nl>
<nl lang="tr">
50 eyaletin toplam nufusu nedir ?
</nl>
<syn lang="en">
(S جمعیت 50 ایالت با هم چقدر است ؟)
</syn>
<syn lang="es">
(S que es la poblacion combinada de todos los 50 estados)
</syn>
<syn lang="ja">
(S gojuu shuu no zentai no jinkou wa ikura desu ka)
</syn>
<syn lang="tr">
(S 50 eyaletin toplam nufusu nedir)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the combined-[Num:1] population-[Num:2] of-[Num:2] all-[State:3] 50-[State:3] states-[State:3])
</augsyn>
<mrl lang="geo-funql">
answer(sum(population_1(state(all))))
</mrl>
<mrl lang="geo-prolog">
answer(A,sum(B,(population(C,B),state(C)),A))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ sum ( *n:Num ) }) </node>
<node id="2"> *n:Num -> ({ population_1 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="358">
<nl lang="en">
چگالی جمعیتی تگزاس چقدر است ؟
</nl>
<syn lang="en">
(S چگالی جمعیتی تگزاس چقدر است ؟)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the density-[Num:1] of-[Num:1] Texas-[StateName:3])
</augsyn>
<mrl lang="geo-funql">
answer(density_1(stateid('texas')))
</mrl>
<mrl lang="geo-prolog">
answer(A,(density(B,A),const(B,stateid(texas))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ density_1 ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="3"> *n:StateName -> ({ ' texas ' }) </node>
</mrl-parse>
</example>

<example id="359">
<nl lang="en">
چگالی جمعیتی نیویورک چقدر است ؟
</nl>
<syn lang="en">
(S چگالی جمعیتی نیویورک چقدر است ؟)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the density-[Num:1] of-[Num:1] the New-[StateName:3] York-[StateName:3])
</augsyn>
<mrl lang="geo-funql">
answer(density_1(stateid('new york')))
</mrl>
<mrl lang="geo-prolog">
answer(A,(density(B,A),const(B,stateid('new york'))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ density_1 ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="3"> *n:StateName -> ({ ' new york ' }) </node>
</mrl-parse>
</example>

<example id="360">
<nl lang="en">
ارتفاع دث ولی چقدر است ؟
</nl>
<syn lang="en">
(S ارتفاع دث ولی چقدر است ؟)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the elevation-[Num:1] of-[Num:1] Death-[PlaceName:3] Valley-[PlaceName:3])
</augsyn>
<mrl lang="geo-funql">
answer(elevation_1(placeid('death valley')))
</mrl>
<mrl lang="geo-prolog">
answer(A,(elevation(B,A),const(B,placeid('death valley'))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ elevation_1 ( *n:Place ) }) </node>
<node id="2"> *n:Place -> ({ placeid ( *n:PlaceName ) }) </node>
<node id="3"> *n:PlaceName -> ({ ' death valley ' }) </node>
</mrl-parse>
</example>

<example id="361">
<nl lang="en">
ارتفاع بلند ترین نقطه در آمریکا چقدر است ؟
</nl>
<syn lang="en">
(S ارتفاع بلند ترین نقطه در آمریکا چقدر است ؟)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the elevation-[Num:1] of-[Num:1] the highest-[Place:2] point-[Place:3] in-[Place:4] the USA-[CountryName:6])
</augsyn>
<mrl lang="geo-funql">
answer(elevation_1(highest(place(loc_2(countryid('usa'))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(elevation(B,A),highest(B,(place(B),loc(B,C),const(C,countryid(usa))))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ elevation_1 ( *n:Place ) }) </node>
<node id="2"> *n:Place -> ({ highest ( *n:Place ) }) </node>
<node id="3"> *n:Place -> ({ place ( *n:Place ) }) </node>
<node id="4"> *n:Place -> ({ loc_2 ( *n:Country ) }) </node>
<node id="5"> *n:Country -> ({ countryid ( *n:CountryName ) }) </node>
<node id="6"> *n:CountryName -> ({ ' usa ' }) </node>
</mrl-parse>
</example>

<example id="362">
<nl lang="en">
ارتفاع مونت مک کینلی چقدر است ؟
</nl>
<syn lang="en">
(S ارتفاع مونت مک کینلی چقدر است ؟)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the height-[Num:1] of-[Num:1] Mount-[PlaceName:3] McKinley-[PlaceName:3])
</augsyn>
<mrl lang="geo-funql">
answer(elevation_1(placeid('mount mckinley')))
</mrl>
<mrl lang="geo-prolog">
answer(A,(elevation(B,A),const(B,placeid('mount mckinley'))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ elevation_1 ( *n:Place ) }) </node>
<node id="2"> *n:Place -> ({ placeid ( *n:PlaceName ) }) </node>
<node id="3"> *n:PlaceName -> ({ ' mount mckinley ' }) </node>
</mrl-parse>
</example>

<example id="363">
<nl lang="en">
ارتفاع بلند ترین کوه در تگزاس چقدر است ؟
</nl>
<syn lang="en">
(S ارتفاع بلند ترین کوه در تگزاس چقدر است ؟)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the height-[Num:1] of-[Num:1] the highest-[Place:2] mountain-[Place:3] in-[Place:4] Texas-[StateName:6])
</augsyn>
<mrl lang="geo-funql">
answer(elevation_1(highest(mountain(loc_2(stateid('texas'))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(elevation(B,A),highest(B,(mountain(B),loc(B,C),const(C,stateid(texas))))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ elevation_1 ( *n:Place ) }) </node>
<node id="2"> *n:Place -> ({ highest ( *n:Place ) }) </node>
<node id="3"> *n:Place -> ({ mountain ( *n:Place ) }) </node>
<node id="4"> *n:Place -> ({ loc_2 ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="6"> *n:StateName -> ({ ' texas ' }) </node>
</mrl-parse>
</example>

<example id="364">
<nl lang="en">
ارتفاع بلندترین نقطه در آمریکا چقدر است ؟
</nl>
<syn lang="en">
(S ارتفاع بلندترین نقطه در آمریکا چقدر است ؟)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the height-[Num:1] of-[Num:1] the highest-[Place:2] point-[Place:3] in-[Place:4] the USA-[CountryName:6])
</augsyn>
<mrl lang="geo-funql">
answer(elevation_1(highest(place(loc_2(countryid('usa'))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(elevation(B,A),highest(B,(place(B),loc(B,C),const(C,countryid(usa))))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ elevation_1 ( *n:Place ) }) </node>
<node id="2"> *n:Place -> ({ highest ( *n:Place ) }) </node>
<node id="3"> *n:Place -> ({ place ( *n:Place ) }) </node>
<node id="4"> *n:Place -> ({ loc_2 ( *n:Country ) }) </node>
<node id="5"> *n:Country -> ({ countryid ( *n:CountryName ) }) </node>
<node id="6"> *n:CountryName -> ({ ' usa ' }) </node>
</mrl-parse>
</example>

<example id="365">
<nl lang="en">
نقطه بلند وایومینگ کجاست ؟
</nl>
<syn lang="en">
(S نقطه بلند وایومینگ کجاست ؟)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the high-[Place:1] point-[Place:1] of-[Place:1] Wyoming-[StateName:3])
</augsyn>
<mrl lang="geo-funql">
answer(high_point_1(stateid('wyoming')))
</mrl>
<mrl lang="geo-prolog">
answer(A,(high_point(B,A),const(B,stateid(wyoming))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Place ) }) </node>
<node id="1"> *n:Place -> ({ high_point_1 ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="3"> *n:StateName -> ({ ' wyoming ' }) </node>
</mrl-parse>
</example>

<example id="366">
<nl lang="en">
بلندترین ارتفاع در نیومکزیکو چقدر است ؟
</nl>
<nl lang="es">
que es la elevacion mas alta en new mexico ?
</nl>
<nl lang="ja">
nyuu mekishiko no mottomo takai kaibatsu wa nan desu ka ?
</nl>
<nl lang="tr">
new mexico de en yuksek yukselti nedir ?
</nl>
<syn lang="en">
(S بلندترین ارتفاع در نیومکزیکو چقدر است ؟)
</syn>
<syn lang="es">
(S que es la elevacion mas alta en new_mexico)
</syn>
<syn lang="ja">
(S nyuu_mekishiko no mottomo takai kaibatsu wa nan desu ka)
</syn>
<syn lang="tr">
(S new_mexico de en yuksek yukselti nedir)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the highest-[Place:1] elevation-[Place:2] in-[Place:3] New-[StateName:5] Mexico-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(highest(place(loc_2(stateid('new mexico')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,highest(A,(place(A),loc(A,B),const(B,stateid('new mexico')))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Place ) }) </node>
<node id="1"> *n:Place -> ({ highest ( *n:Place ) }) </node>
<node id="2"> *n:Place -> ({ place ( *n:Place ) }) </node>
<node id="3"> *n:Place -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' new mexico ' }) </node>
</mrl-parse>
</example>

<example id="367">
<nl lang="en">
بلندترین ارتفاع در کالیفرنیای جنوبی کجاست ؟
</nl>
<syn lang="en">
(S بلندترین ارتفاع در کالیفرنیای جنوبی کجاست ؟)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the highest-[Place:1] elevation-[Place:2] in-[Place:3] South-[StateName:5] Carolina-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(highest(place(loc_2(stateid('south carolina')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,highest(A,(place(A),loc(A,B),const(B,stateid('south carolina')))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Place ) }) </node>
<node id="1"> *n:Place -> ({ highest ( *n:Place ) }) </node>
<node id="2"> *n:Place -> ({ place ( *n:Place ) }) </node>
<node id="3"> *n:Place -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' south carolina ' }) </node>
</mrl-parse>
</example>

<example id="368">
<nl lang="en">
بلندترین ارتفاع در تگزاس کجاست ؟
</nl>
<syn lang="en">
(S بلندترین ارتفاع در تگزاس کجاست ؟)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the highest-[Place:1] elevation-[Place:2] in-[Place:3] Texas-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(highest(place(loc_2(stateid('texas')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(texas)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Place ) }) </node>
<node id="1"> *n:Place -> ({ highest ( *n:Place ) }) </node>
<node id="2"> *n:Place -> ({ place ( *n:Place ) }) </node>
<node id="3"> *n:Place -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' texas ' }) </node>
</mrl-parse>
</example>

<example id="369">
<nl lang="en">
بلندترین ارتفاع در ایالات متحده کجاست ؟
</nl>
<syn lang="en">
(S بلندترین ارتفاع در ایالات متحده کجاست ؟)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the highest-[Place:1] elevation-[Place:2] in-[Place:3] the United-[CountryName:5] States-[CountryName:5])
</augsyn>
<mrl lang="geo-funql">
answer(highest(place(loc_2(countryid('usa')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,highest(A,(place(A),loc(A,B),const(B,countryid(usa)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Place ) }) </node>
<node id="1"> *n:Place -> ({ highest ( *n:Place ) }) </node>
<node id="2"> *n:Place -> ({ place ( *n:Place ) }) </node>
<node id="3"> *n:Place -> ({ loc_2 ( *n:Country ) }) </node>
<node id="4"> *n:Country -> ({ countryid ( *n:CountryName ) }) </node>
<node id="5"> *n:CountryName -> ({ ' usa ' }) </node>
</mrl-parse>
</example>

<example id="370">
<nl lang="en">
بلند ترین کوه در آلاسکا کجاست ؟
</nl>
<syn lang="en">
(S بلند ترین کوه در آلاسکا کجاست ؟)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the highest-[Place:1] mountain-[Place:2] in-[Place:3] Alaska-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(highest(mountain(loc_2(stateid('alaska')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,highest(A,(mountain(A),loc(A,B),const(B,stateid(alaska)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Place ) }) </node>
<node id="1"> *n:Place -> ({ highest ( *n:Place ) }) </node>
<node id="2"> *n:Place -> ({ mountain ( *n:Place ) }) </node>
<node id="3"> *n:Place -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' alaska ' }) </node>
</mrl-parse>
</example>

<example id="371">
<nl lang="en">
بلندترین کوه در تگزاس کجاست ؟
</nl>
<syn lang="en">
(S بلندترین کوه در تگزاس کجاست ؟)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the highest-[Place:1] mountain-[Place:2] in-[Place:3] Texas-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(highest(mountain(loc_2(stateid('texas')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,highest(A,(mountain(A),loc(A,B),const(B,stateid(texas)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Place ) }) </node>
<node id="1"> *n:Place -> ({ highest ( *n:Place ) }) </node>
<node id="2"> *n:Place -> ({ mountain ( *n:Place ) }) </node>
<node id="3"> *n:Place -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' texas ' }) </node>
</mrl-parse>
</example>

<example id="372">
<nl lang="en">
بلندترین کوه در ایالات متحده کجاست ؟
</nl>
<nl lang="es">
que es la montana mas alta en los us ?
</nl>
<nl lang="ja">
beikoku no mottomo takai yama wa nan desu ka ?
</nl>
<nl lang="tr">
us deki en yuksek dag nedir ?
</nl>
<syn lang="en">
(S بلندترین کوه در ایالات متحده کجاست ؟)
</syn>
<syn lang="es">
(S que es la montana mas alta en los us)
</syn>
<syn lang="ja">
(S beikoku no mottomo takai yama wa nan desu ka)
</syn>
<syn lang="tr">
(S us deki en yuksek dag nedir)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the highest-[Place:1] mountain-[Place:2] in-[Place:3] the US-[CountryName:5])
</augsyn>
<mrl lang="geo-funql">
answer(highest(mountain(loc_2(countryid('usa')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,highest(A,(mountain(A),loc(A,B),const(B,countryid(usa)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Place ) }) </node>
<node id="1"> *n:Place -> ({ highest ( *n:Place ) }) </node>
<node id="2"> *n:Place -> ({ mountain ( *n:Place ) }) </node>
<node id="3"> *n:Place -> ({ loc_2 ( *n:Country ) }) </node>
<node id="4"> *n:Country -> ({ countryid ( *n:CountryName ) }) </node>
<node id="5"> *n:CountryName -> ({ ' usa ' }) </node>
</mrl-parse>
</example>

<example id="373">
<nl lang="en">
بلندترین کوه در ایالات متحده چیست ؟
</nl>
<syn lang="en">
(S بلندترین کوه در ایالات متحده چیست ؟)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the highest-[Place:1] mountain-[Place:2] in-[Place:3] US-[CountryName:5])
</augsyn>
<mrl lang="geo-funql">
answer(highest(mountain(loc_2(countryid('usa')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,highest(A,(mountain(A),loc(A,B),const(B,countryid(usa)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Place ) }) </node>
<node id="1"> *n:Place -> ({ highest ( *n:Place ) }) </node>
<node id="2"> *n:Place -> ({ mountain ( *n:Place ) }) </node>
<node id="3"> *n:Place -> ({ loc_2 ( *n:Country ) }) </node>
<node id="4"> *n:Country -> ({ countryid ( *n:CountryName ) }) </node>
<node id="5"> *n:CountryName -> ({ ' usa ' }) </node>
</mrl-parse>
</example>

<example id="374">
<nl lang="en">
بلندترین نقطه در کلرادو کجاست ؟
</nl>
<nl lang="es">
que es el punto mas alto en colorado ?
</nl>
<nl lang="ja">
kororado no mottomo takai chiten wa nan desu ka ?
</nl>
<nl lang="tr">
colorado daki en yuksek nokta nedir ?
</nl>
<syn lang="en">
(S بلندترین نقطه در کلرادو کجاست ؟)
</syn>
<syn lang="es">
(S que es el punto mas alto en colorado)
</syn>
<syn lang="ja">
(S kororado no mottomo takai chiten wa nan desu ka)
</syn>
<syn lang="tr">
(S colorado daki en yuksek nokta nedir)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the highest-[Place:1] point-[Place:2] in-[Place:3] Colorado-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(highest(place(loc_2(stateid('colorado')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(colorado)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Place ) }) </node>
<node id="1"> *n:Place -> ({ highest ( *n:Place ) }) </node>
<node id="2"> *n:Place -> ({ place ( *n:Place ) }) </node>
<node id="3"> *n:Place -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' colorado ' }) </node>
</mrl-parse>
</example>

<example id="375">
<nl lang="en">
بلندترین نقطه در دلاور کجاست ؟
</nl>
<syn lang="en">
(S بلندترین نقطه در دلاور کجاست ؟)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the highest-[Place:1] point-[Place:2] in-[Place:3] Delaware-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(highest(place(loc_2(stateid('delaware')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(delaware)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Place ) }) </node>
<node id="1"> *n:Place -> ({ highest ( *n:Place ) }) </node>
<node id="2"> *n:Place -> ({ place ( *n:Place ) }) </node>
<node id="3"> *n:Place -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' delaware ' }) </node>
</mrl-parse>
</example>

<example id="376">
<nl lang="en">
بلندترین نقاط همه ایالت هایی که کمترین ارتفاع آنها سطح دریاست نام ببر .
</nl>
<syn lang="en">
(S بلندترین نقاط همه ایالت هایی که کمترین ارتفاع آنها سطح دریاست نام ببر .)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the highest-[Place:1] point-[Place:2] in-[Place:3] each-[State:4] state-[State:4] whose-[State:5] lowest-[State:5] point-[State:5] is-[State:5] sea-[State:5] level-[State:5])
</augsyn>
<mrl lang="geo-funql">
answer(highest(place(loc_2(state(loc_1(place(elevation_2(0))))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(highest(A,(place(A),loc(A,B),state(B))),lowest(C,(loc(C,B),place(C))),elevation(C,0)))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Place ) }) </node>
<node id="1"> *n:Place -> ({ highest ( *n:Place ) }) </node>
<node id="2"> *n:Place -> ({ place ( *n:Place ) }) </node>
<node id="3"> *n:Place -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ loc_1 ( *n:Place ) }) </node>
<node id="6"> *n:Place -> ({ place ( *n:Place ) }) </node>
<node id="7"> *n:Place -> ({ elevation_2 ( *n:Num ) }) </node>
<node id="8"> *n:Num -> ({ 0 }) </node>
</mrl-parse>
</example>

<example id="377">
<nl lang="en">
بلندترین نقطه در فلوریدا کجاست ؟
</nl>
<syn lang="en">
(S بلندترین نقطه در فلوریدا کجاست ؟)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the highest-[Place:1] point-[Place:2] in-[Place:3] Florida-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(highest(place(loc_2(stateid('florida')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(florida)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Place ) }) </node>
<node id="1"> *n:Place -> ({ highest ( *n:Place ) }) </node>
<node id="2"> *n:Place -> ({ place ( *n:Place ) }) </node>
<node id="3"> *n:Place -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' florida ' }) </node>
</mrl-parse>
</example>

<example id="378">
<nl lang="en">
بلندترین نقطه در آیووا کجاست ؟
</nl>
<nl lang="es">
que es el punto mas alto en iowa ?
</nl>
<nl lang="ja">
aiowa no mottomo takai chiten wa nan desu ka ?
</nl>
<nl lang="tr">
iowa daki en yuksek nokta nedir ?
</nl>
<syn lang="en">
(S بلندترین نقطه در آیووا کجاست ؟)
</syn>
<syn lang="es">
(S que es el punto mas alto en iowa)
</syn>
<syn lang="ja">
(S aiowa no mottomo takai chiten wa nan desu ka)
</syn>
<syn lang="tr">
(S iowa daki en yuksek nokta nedir)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the highest-[Place:1] point-[Place:2] in-[Place:3] Iowa-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(highest(place(loc_2(stateid('iowa')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(iowa)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Place ) }) </node>
<node id="1"> *n:Place -> ({ highest ( *n:Place ) }) </node>
<node id="2"> *n:Place -> ({ place ( *n:Place ) }) </node>
<node id="3"> *n:Place -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' iowa ' }) </node>
</mrl-parse>
</example>

<example id="379">
<nl lang="en">
بلندترین نقطه در کانزاس کجاست ؟
</nl>
<nl lang="es">
que es el punto mas alto en kansas ?
</nl>
<nl lang="ja">
kanzasu no mottomo takai chiten wa nan desu ka ?
</nl>
<nl lang="tr">
kansas daki en yuksek nokta nedir ?
</nl>
<syn lang="en">
(S بلندترین نقطه در کانزاس کجاست ؟)
</syn>
<syn lang="es">
(S que es el punto mas alto en kansas)
</syn>
<syn lang="ja">
(S kanzasu no mottomo takai chiten wa nan desu ka)
</syn>
<syn lang="tr">
(S kansas daki en yuksek nokta nedir)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the highest-[Place:1] point-[Place:2] in-[Place:3] Kansas-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(highest(place(loc_2(stateid('kansas')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(kansas)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Place ) }) </node>
<node id="1"> *n:Place -> ({ highest ( *n:Place ) }) </node>
<node id="2"> *n:Place -> ({ place ( *n:Place ) }) </node>
<node id="3"> *n:Place -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' kansas ' }) </node>
</mrl-parse>
</example>

<example id="380">
<nl lang="en">
بلندترین نقطه در مین کجاست ؟
</nl>
<syn lang="en">
(S بلندترین نقطه در مین کجاست ؟)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the highest-[Place:1] point-[Place:2] in-[Place:3] Maine-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(highest(place(loc_2(stateid('maine')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(maine)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Place ) }) </node>
<node id="1"> *n:Place -> ({ highest ( *n:Place ) }) </node>
<node id="2"> *n:Place -> ({ place ( *n:Place ) }) </node>
<node id="3"> *n:Place -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' maine ' }) </node>
</mrl-parse>
</example>

<example id="381">
<nl lang="en">
بلندترین نقطه در مونتانا کجاست ؟
</nl>
<nl lang="es">
que es el punto mas alto en montana ?
</nl>
<nl lang="ja">
montana no mottomo takai chiten wa nan desu ka ?
</nl>
<nl lang="tr">
montana daki en yuksek nokta nedir ?
</nl>
<syn lang="en">
(S بلندترین نقطه در مونتانا کجاست ؟)
</syn>
<syn lang="es">
(S que es el punto mas alto en montana)
</syn>
<syn lang="ja">
(S montana no mottomo takai chiten wa nan desu ka)
</syn>
<syn lang="tr">
(S montana daki en yuksek nokta nedir)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the highest-[Place:1] point-[Place:2] in-[Place:3] Montana-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(highest(place(loc_2(stateid('montana')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(montana)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Place ) }) </node>
<node id="1"> *n:Place -> ({ highest ( *n:Place ) }) </node>
<node id="2"> *n:Place -> ({ place ( *n:Place ) }) </node>
<node id="3"> *n:Place -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' montana ' }) </node>
</mrl-parse>
</example>

<example id="382">
<nl lang="en">
بلندترین نقطه در نوادا کجاست ؟
</nl>
<nl lang="es">
que es el punto mas alto en nevada en metros ?
</nl>
<nl lang="ja">
nebaada no mottomo takai chiten wa nan metoru desu ka ?
</nl>
<nl lang="tr">
nevada daki en yuksek nokta metre olarak nedir ?
</nl>
<syn lang="en">
(S بلندترین نقطه در نوادا کجاست ؟)
</syn>
<syn lang="es">
(S que es el punto mas alto en nevada en metros)
</syn>
<syn lang="ja">
(S nebaada no mottomo takai chiten wa nan metoru desu ka)
</syn>
<syn lang="tr">
(S nevada daki en yuksek nokta metre olarak nedir)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the highest-[Place:1] point-[Place:2] in-[Place:3] Nevada-[StateName:5] in-[Place:1] meters-[Place:1])
</augsyn>
<mrl lang="geo-funql">
answer(highest(place(loc_2(stateid('nevada')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(nevada)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Place ) }) </node>
<node id="1"> *n:Place -> ({ highest ( *n:Place ) }) </node>
<node id="2"> *n:Place -> ({ place ( *n:Place ) }) </node>
<node id="3"> *n:Place -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' nevada ' }) </node>
</mrl-parse>
</example>

<example id="383">
<nl lang="en">
بلندترین نقطه در نیومکزیکو کجاست ؟
</nl>
<syn lang="en">
(S بلندترین نقطه در نیومکزیکو کجاست ؟)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the highest-[Place:1] point-[Place:2] in-[Place:3] New-[StateName:5] Mexico-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(highest(place(loc_2(stateid('new mexico')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,highest(A,(place(A),loc(A,B),const(B,stateid('new mexico')))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Place ) }) </node>
<node id="1"> *n:Place -> ({ highest ( *n:Place ) }) </node>
<node id="2"> *n:Place -> ({ place ( *n:Place ) }) </node>
<node id="3"> *n:Place -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' new mexico ' }) </node>
</mrl-parse>
</example>

<example id="384">
<nl lang="en">
بلندترین نقطه در اوهایو کجاست ؟
</nl>
<syn lang="en">
(S بلندترین نقطه در اوهایو کجاست ؟)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the highest-[Place:1] point-[Place:2] in-[Place:3] Ohio-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(highest(place(loc_2(stateid('ohio')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(ohio)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Place ) }) </node>
<node id="1"> *n:Place -> ({ highest ( *n:Place ) }) </node>
<node id="2"> *n:Place -> ({ place ( *n:Place ) }) </node>
<node id="3"> *n:Place -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' ohio ' }) </node>
</mrl-parse>
</example>

<example id="385">
<nl lang="en">
بلندترین نقطه در رودایلند کجاست ؟
</nl>
<nl lang="es">
que es el punto mas alto en rhode island ?
</nl>
<nl lang="ja">
roodoairando no mottomo takai chiten wa nan desu ka ?
</nl>
<nl lang="tr">
rhode island daki en yuksek nokta nedir ?
</nl>
<syn lang="en">
(S بلندترین نقطه در رودایلند کجاست ؟)
</syn>
<syn lang="es">
(S que es el punto mas alto en rhode_island)
</syn>
<syn lang="ja">
(S roodoairando no mottomo takai chiten wa nan desu ka)
</syn>
<syn lang="tr">
(S rhode_island daki en yuksek nokta nedir)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the highest-[Place:1] point-[Place:2] in-[Place:3] Rhode-[StateName:5] Island-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(highest(place(loc_2(stateid('rhode island')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,highest(A,(place(A),loc(A,B),const(B,stateid('rhode island')))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Place ) }) </node>
<node id="1"> *n:Place -> ({ highest ( *n:Place ) }) </node>
<node id="2"> *n:Place -> ({ place ( *n:Place ) }) </node>
<node id="3"> *n:Place -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' rhode island ' }) </node>
</mrl-parse>
</example>

<example id="386">
<nl lang="en">
بلندترین نقطه در شهرهای مجاور جورجیا کجاست ؟
</nl>
<nl lang="es">
que es el punto mas alto en los estados bordeando a georgia ?
</nl>
<nl lang="ja">
joojaa ni rinsetsu suru shuu no mottomo takai chiten wa nan desu ka ?
</nl>
<nl lang="tr">
georgia ya siniri olan eyaletlerdeki en yuksek nokta nedir ?
</nl>
<syn lang="en">
(S بلندترین نقطه در شهرهای مجاور جورجیا کجاست ؟)
</syn>
<syn lang="es">
(S que es el punto mas alto en los estados bordeando a georgia)
</syn>
<syn lang="ja">
(S joojaa ni rinsetsu suru shuu no mottomo takai chiten wa nan desu ka)
</syn>
<syn lang="tr">
(S georgia ya siniri olan eyaletlerdeki en yuksek nokta nedir)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the highest-[Place:1] point-[Place:2] in-[Place:3] states-[State:4] bordering-[State:5] Georgia-[StateName:7])
</augsyn>
<mrl lang="geo-funql">
answer(highest(place(loc_2(state(next_to_2(stateid('georgia')))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,highest(A,(place(A),loc(A,B),state(B),next_to(B,C),const(C,stateid(georgia)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Place ) }) </node>
<node id="1"> *n:Place -> ({ highest ( *n:Place ) }) </node>
<node id="2"> *n:Place -> ({ place ( *n:Place ) }) </node>
<node id="3"> *n:Place -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="6"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="7"> *n:StateName -> ({ ' georgia ' }) </node>
</mrl-parse>
</example>

<example id="387">
<nl lang="en">
بلندترین نقطه در تکزاس کجاست ؟
</nl>
<syn lang="en">
(S بلندترین نقطه در تکزاس کجاست ؟)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the highest-[Place:1] point-[Place:2] in-[Place:3] Texas-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(highest(place(loc_2(stateid('texas')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(texas)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Place ) }) </node>
<node id="1"> *n:Place -> ({ highest ( *n:Place ) }) </node>
<node id="2"> *n:Place -> ({ place ( *n:Place ) }) </node>
<node id="3"> *n:Place -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' texas ' }) </node>
</mrl-parse>
</example>

<example id="388">
<nl lang="en">
بلندترین نقطه در کشور کجاست ؟
</nl>
<nl lang="es">
que es el punto mas alto en el pais ?
</nl>
<nl lang="ja">
kuni no mottomo takai chiten wa nan desu ka ?
</nl>
<nl lang="tr">
ulkedeki en yuksek nokta nedir ?
</nl>
<syn lang="en">
(S بلندترین نقطه در کشور کجاست ؟)
</syn>
<syn lang="es">
(S que es el punto mas alto en el pais)
</syn>
<syn lang="ja">
(S kuni no mottomo takai chiten wa nan desu ka)
</syn>
<syn lang="tr">
(S ulkedeki en yuksek nokta nedir)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the highest-[Place:1] point-[Place:2] in-[Place:3] the country-[CountryName:5])
</augsyn>
<mrl lang="geo-funql">
answer(highest(place(loc_2(countryid('usa')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,highest(A,(place(A),loc(A,B),const(B,countryid(usa)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Place ) }) </node>
<node id="1"> *n:Place -> ({ highest ( *n:Place ) }) </node>
<node id="2"> *n:Place -> ({ place ( *n:Place ) }) </node>
<node id="3"> *n:Place -> ({ loc_2 ( *n:Country ) }) </node>
<node id="4"> *n:Country -> ({ countryid ( *n:CountryName ) }) </node>
<node id="5"> *n:CountryName -> ({ ' usa ' }) </node>
</mrl-parse>
</example>

<example id="389">
<nl lang="en">
بلندترین نقطه در کوچکترین ایالت کجاست ؟
</nl>
<syn lang="en">
(S بلندترین نقطه در کوچکترین ایالت کجاست ؟)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the highest-[Place:1] point-[Place:2] in-[Place:3] the smallest-[State:4] state-[State:5])
</augsyn>
<mrl lang="geo-funql">
answer(highest(place(loc_2(smallest(state(all))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,highest(A,(place(A),loc(A,B),smallest(B,state(B)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Place ) }) </node>
<node id="1"> *n:Place -> ({ highest ( *n:Place ) }) </node>
<node id="2"> *n:Place -> ({ place ( *n:Place ) }) </node>
<node id="3"> *n:Place -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ smallest ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="390">
<nl lang="en">
بلندترین نقطه در ایالتی مرکز آن آسیتن است کجاست ؟
</nl>
<syn lang="en">
(S بلندترین نقطه در ایالتی مرکز آن آسیتن است کجاست ؟)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the highest-[Place:1] point-[Place:2] in-[Place:3] the state-[State:4] with-[State:5] capital-[City:6] Austin-[CityName:8])
</augsyn>
<mrl lang="geo-funql">
answer(highest(place(loc_2(state(loc_1(capital(cityid('austin', _))))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,highest(A,(place(A),loc(A,B),state(B),loc(C,B),capital(C),const(C,cityid(austin,_)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Place ) }) </node>
<node id="1"> *n:Place -> ({ highest ( *n:Place ) }) </node>
<node id="2"> *n:Place -> ({ place ( *n:Place ) }) </node>
<node id="3"> *n:Place -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ loc_1 ( *n:City ) }) </node>
<node id="6"> *n:City -> ({ capital ( *n:City ) }) </node>
<node id="7"> *n:City -> ({ cityid ( *n:CityName , _ ) }) </node>
<node id="8"> *n:CityName -> ({ ' austin ' }) </node>
</mrl-parse>
</example>

<example id="391">
<nl lang="en">
بلندترین نقطه در ایالتی مرکز آن دس موینز است کجاست ؟
</nl>
<syn lang="en">
(S بلندترین نقطه در ایالتی مرکز آن دس موینز است کجاست ؟)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the highest-[Place:1] point-[Place:2] in-[Place:3] the state-[State:4] with-[State:5] capital-[City:6] Des-[CityName:8] Moines-[CityName:8])
</augsyn>
<mrl lang="geo-funql">
answer(highest(place(loc_2(state(loc_1(capital(cityid('des moines', _))))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,highest(A,(place(A),loc(A,B),state(B),loc(C,B),capital(C),const(C,cityid('des moines',_)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Place ) }) </node>
<node id="1"> *n:Place -> ({ highest ( *n:Place ) }) </node>
<node id="2"> *n:Place -> ({ place ( *n:Place ) }) </node>
<node id="3"> *n:Place -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ loc_1 ( *n:City ) }) </node>
<node id="6"> *n:City -> ({ capital ( *n:City ) }) </node>
<node id="7"> *n:City -> ({ cityid ( *n:CityName , _ ) }) </node>
<node id="8"> *n:CityName -> ({ ' des moines ' }) </node>
</mrl-parse>
</example>

<example id="392">
<nl lang="en">
بلندترین نقطه در ایالتی که مرکز آن دس موینز است کجاست ؟
</nl>
<nl lang="es">
que es el punto mas alto de el estado con la capital des moines ?
</nl>
<nl lang="ja">
demoin no shuto ga aru shuu no mottomo takai chiten wa nan desu ka ?
</nl>
<nl lang="tr">
baskenti des moines olan eyaletin en yuksek noktasi nedir ?
</nl>
<syn lang="en">
(S بلندترین نقطه در ایالتی که مرکز آن دس موینز است کجاست ؟)
</syn>
<syn lang="es">
(S que es el punto mas alto de el estado con la capital des_moines)
</syn>
<syn lang="ja">
(S demoin no shuto ga aru shuu no mottomo takai chiten wa nan desu ka)
</syn>
<syn lang="tr">
(S baskenti des_moines olan eyaletin en yuksek noktasi nedir)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the highest-[Place:1] point-[Place:2] in-[Place:3] the state-[State:4] with-[State:5] the capital-[City:6] Des-[CityName:8] Moines-[CityName:8])
</augsyn>
<mrl lang="geo-funql">
answer(highest(place(loc_2(state(loc_1(capital(cityid('des moines', _))))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,highest(A,(place(A),loc(A,B),state(B),loc(C,B),capital(C),const(C,cityid('des moines',_)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Place ) }) </node>
<node id="1"> *n:Place -> ({ highest ( *n:Place ) }) </node>
<node id="2"> *n:Place -> ({ place ( *n:Place ) }) </node>
<node id="3"> *n:Place -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ loc_1 ( *n:City ) }) </node>
<node id="6"> *n:City -> ({ capital ( *n:City ) }) </node>
<node id="7"> *n:City -> ({ cityid ( *n:CityName , _ ) }) </node>
<node id="8"> *n:CityName -> ({ ' des moines ' }) </node>
</mrl-parse>
</example>

<example id="393">
<nl lang="en">
بلندترین نقطه در ایالتی که بیشترین تعداد رودها را دارد کجاست ؟
</nl>
<syn lang="en">
(S بلندترین نقطه در ایالتی که بیشترین تعداد رودها را دارد کجاست ؟)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the highest-[Place:1] point-[Place:2] in-[Place:3] the state-[State:5] with-[State:6] the most-[State:4] rivers-[River:7])
</augsyn>
<mrl lang="geo-funql">
answer(highest(place(loc_2(most(state(traverse_1(river(all))))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,highest(A,(place(A),loc(A,B),most(B,C,(state(B),traverse(C,B),river(C))))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Place ) }) </node>
<node id="1"> *n:Place -> ({ highest ( *n:Place ) }) </node>
<node id="2"> *n:Place -> ({ place ( *n:Place ) }) </node>
<node id="3"> *n:Place -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ most ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="6"> *n:State -> ({ traverse_1 ( *n:River ) }) </node>
<node id="7"> *n:River -> ({ river ( all ) }) </node>
</mrl-parse>
</example>

<example id="394">
<nl lang="en">
بلندترین نقطه در ایالتی که کمترین جمعیت را دارد کجاست ؟
</nl>
<syn lang="en">
(S بلندترین نقطه در ایالتی که کمترین جمعیت را دارد کجاست ؟)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the highest-[Place:1] point-[Place:2] in-[Place:3] the state-[State:5] with-[State:4] the smallest-[State:4] population-[State:4])
</augsyn>
<mrl lang="geo-funql">
answer(highest(place(loc_2(smallest_one(population_1(state(all)))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,highest(A,(place(A),loc(A,B),smallest(C,(state(B),population(B,C))))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Place ) }) </node>
<node id="1"> *n:Place -> ({ highest ( *n:Place ) }) </node>
<node id="2"> *n:Place -> ({ place ( *n:Place ) }) </node>
<node id="3"> *n:Place -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ smallest_one ( population_1 ( *n:State ) ) }) </node>
<node id="5"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="395">
<nl lang="en">
بلندترین نقطه در ایالات مجاور کلرادو کجاست ؟
</nl>
<syn lang="en">
(S بلندترین نقطه در ایالات مجاور کلرادو کجاست ؟)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the highest-[Place:1] point-[Place:2] in-[Place:3] the states-[State:4] bordering-[State:5] Colorado-[StateName:7])
</augsyn>
<mrl lang="geo-funql">
answer(highest(place(loc_2(state(next_to_2(stateid('colorado')))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,highest(A,(place(A),loc(A,B),state(B),next_to(B,C),const(C,stateid(colorado)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Place ) }) </node>
<node id="1"> *n:Place -> ({ highest ( *n:Place ) }) </node>
<node id="2"> *n:Place -> ({ place ( *n:Place ) }) </node>
<node id="3"> *n:Place -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="6"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="7"> *n:StateName -> ({ ' colorado ' }) </node>
</mrl-parse>
</example>

<example id="396">
<nl lang="en">
بلندترین نقطه در ایالات متحده کجاست ؟
</nl>
<syn lang="en">
(S بلندترین نقطه در ایالات متحده کجاست ؟)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the highest-[Place:1] point-[Place:2] in-[Place:3] the United-[CountryName:5] States-[CountryName:5])
</augsyn>
<mrl lang="geo-funql">
answer(highest(place(loc_2(countryid('usa')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,highest(A,(place(A),loc(A,B),const(B,countryid(usa)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Place ) }) </node>
<node id="1"> *n:Place -> ({ highest ( *n:Place ) }) </node>
<node id="2"> *n:Place -> ({ place ( *n:Place ) }) </node>
<node id="3"> *n:Place -> ({ loc_2 ( *n:Country ) }) </node>
<node id="4"> *n:Country -> ({ countryid ( *n:CountryName ) }) </node>
<node id="5"> *n:CountryName -> ({ ' usa ' }) </node>
</mrl-parse>
</example>

<example id="397">
<nl lang="en">
بلندترین نقطه در ایالات متحده کجاست ؟
</nl>
<nl lang="es">
que es el punto mas alto en los usa ?
</nl>
<nl lang="ja">
beikoku no mottomo takai chiten wa nan desu ka ?
</nl>
<nl lang="tr">
usa deki en yuksek nokta nedir ?
</nl>
<syn lang="en">
(S بلندترین نقطه در ایالات متحده کجاست ؟)
</syn>
<syn lang="es">
(S que es el punto mas alto en los usa)
</syn>
<syn lang="ja">
(S beikoku no mottomo takai chiten wa nan desu ka)
</syn>
<syn lang="tr">
(S usa deki en yuksek nokta nedir)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the highest-[Place:1] point-[Place:2] in-[Place:3] the US-[CountryName:5])
</augsyn>
<mrl lang="geo-funql">
answer(highest(place(loc_2(countryid('usa')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,highest(A,(place(A),loc(A,B),const(B,countryid(usa)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Place ) }) </node>
<node id="1"> *n:Place -> ({ highest ( *n:Place ) }) </node>
<node id="2"> *n:Place -> ({ place ( *n:Place ) }) </node>
<node id="3"> *n:Place -> ({ loc_2 ( *n:Country ) }) </node>
<node id="4"> *n:Country -> ({ countryid ( *n:CountryName ) }) </node>
<node id="5"> *n:CountryName -> ({ ' usa ' }) </node>
</mrl-parse>
</example>

<example id="398">
<nl lang="en">
بلندترین نقطه در ایالات متحده کجاست ؟
</nl>
<nl lang="es">
que es el punto mas alto en los usa ?
</nl>
<nl lang="ja">
beikoku no mottomo takai chiten wa nan desu ka ?
</nl>
<nl lang="tr">
usa deki en yuksek nokta nedir ?
</nl>
<syn lang="en">
(S بلندترین نقطه در ایالات متحده کجاست ؟)
</syn>
<syn lang="es">
(S que es el punto mas alto en los usa)
</syn>
<syn lang="ja">
(S beikoku no mottomo takai chiten wa nan desu ka)
</syn>
<syn lang="tr">
(S usa deki en yuksek nokta nedir)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the highest-[Place:1] point-[Place:2] in-[Place:3] the USA-[CountryName:5])
</augsyn>
<mrl lang="geo-funql">
answer(highest(place(loc_2(countryid('usa')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,highest(A,(place(A),loc(A,B),const(B,countryid(usa)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Place ) }) </node>
<node id="1"> *n:Place -> ({ highest ( *n:Place ) }) </node>
<node id="2"> *n:Place -> ({ place ( *n:Place ) }) </node>
<node id="3"> *n:Place -> ({ loc_2 ( *n:Country ) }) </node>
<node id="4"> *n:Country -> ({ countryid ( *n:CountryName ) }) </node>
<node id="5"> *n:CountryName -> ({ ' usa ' }) </node>
</mrl-parse>
</example>

<example id="399">
<nl lang="en">
بلندترین نقطه در ویرجینیا کجاست ؟
</nl>
<syn lang="en">
(S بلندترین نقطه در ویرجینیا کجاست ؟)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the highest-[Place:1] point-[Place:2] in-[Place:3] Virginia-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(highest(place(loc_2(stateid('virginia')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(virginia)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Place ) }) </node>
<node id="1"> *n:Place -> ({ highest ( *n:Place ) }) </node>
<node id="2"> *n:Place -> ({ place ( *n:Place ) }) </node>
<node id="3"> *n:Place -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' virginia ' }) </node>
</mrl-parse>
</example>

<example id="400">
<nl lang="en">
بلندترین نقطه در ویومینگ کجاست ؟
</nl>
<nl lang="es">
que es el punto mas alto en wyoming ?
</nl>
<nl lang="ja">
waiomingu no mottomo takai chiten wa nan desu ka ?
</nl>
<nl lang="tr">
wyoming daki en yuksek nokta nedir ?
</nl>
<syn lang="en">
(S بلندترین نقطه در ویومینگ کجاست ؟)
</syn>
<syn lang="es">
(S que es el punto mas alto en wyoming)
</syn>
<syn lang="ja">
(S waiomingu no mottomo takai chiten wa nan desu ka)
</syn>
<syn lang="tr">
(S wyoming daki en yuksek nokta nedir)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the highest-[Place:1] point-[Place:2] in-[Place:3] Wyoming-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(highest(place(loc_2(stateid('wyoming')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(wyoming)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Place ) }) </node>
<node id="1"> *n:Place -> ({ highest ( *n:Place ) }) </node>
<node id="2"> *n:Place -> ({ place ( *n:Place ) }) </node>
<node id="3"> *n:Place -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' wyoming ' }) </node>
</mrl-parse>
</example>

<example id="401">
<nl lang="en">
بلندترین نقطه در ایالتی که بیشترین مساحت را دارد کجاست ؟
</nl>
<nl lang="es">
que es el punto mas alto de el estado con la area mas grande ?
</nl>
<nl lang="ja">
mottomo ookii chiiki ga aru shuu no mottomo takai chiten wa nan desu ka ?
</nl>
<nl lang="tr">
en genis alana sahip eyaletin en yuksek noktasi nedir ?
</nl>
<syn lang="en">
(S بلندترین نقطه در ایالتی که بیشترین مساحت را دارد کجاست ؟)
</syn>
<syn lang="es">
(S que es el punto mas alto de el estado con la area mas grande)
</syn>
<syn lang="ja">
(S mottomo ookii chiiki ga aru shuu no mottomo takai chiten wa nan desu ka)
</syn>
<syn lang="tr">
(S en genis alana sahip eyaletin en yuksek noktasi nedir)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the highest-[Place:1] point-[Place:2] of-[Place:3] the state-[State:5] with-[State:4] the largest-[State:4] area-[State:4])
</augsyn>
<mrl lang="geo-funql">
answer(highest(place(loc_2(largest_one(area_1(state(all)))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,highest(A,(place(A),loc(A,B),largest(C,(state(B),area(B,C))))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Place ) }) </node>
<node id="1"> *n:Place -> ({ highest ( *n:Place ) }) </node>
<node id="2"> *n:Place -> ({ place ( *n:Place ) }) </node>
<node id="3"> *n:Place -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ largest_one ( area_1 ( *n:State ) ) }) </node>
<node id="5"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="402">
<nl lang="en">
بلندترین نقطه در ایالتی که بیشترین چگالی جمعیت را دارد کجاست ؟
</nl>
<syn lang="en">
(S بلندترین نقطه در ایالتی که بیشترین چگالی جمعیت را دارد کجاست ؟)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the highest-[Place:1] point-[Place:2] of-[Place:3] the state-[State:5] with-[State:4] the smallest-[State:4] population-[State:4] density-[State:4])
</augsyn>
<mrl lang="geo-funql">
answer(highest(place(loc_2(smallest_one(density_1(state(all)))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,highest(A,(place(A),loc(A,B),smallest(C,(state(B),density(B,C))))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Place ) }) </node>
<node id="1"> *n:Place -> ({ highest ( *n:Place ) }) </node>
<node id="2"> *n:Place -> ({ place ( *n:Place ) }) </node>
<node id="3"> *n:Place -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ smallest_one ( density_1 ( *n:State ) ) }) </node>
<node id="5"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="403">
<nl lang="en">
بلندترین نقطه در ایالتی که بیشترین چگالی جمعیت را دارد کجاست ؟
</nl>
<nl lang="es">
que es el punto mas alto de los usa ?
</nl>
<nl lang="ja">
amerika no mottomo takai chiten wa nan desu ka ?
</nl>
<nl lang="tr">
usa nin en yuksek noktasi nedir ?
</nl>
<syn lang="en">
(S بلندترین نقطه در ایالتی که بیشترین چگالی جمعیت را دارد کجاست ؟)
</syn>
<syn lang="es">
(S que es el punto mas alto de los usa)
</syn>
<syn lang="ja">
(S amerika no mottomo takai chiten wa nan desu ka)
</syn>
<syn lang="tr">
(S usa nin en yuksek noktasi nedir)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the highest-[Place:1] point-[Place:2] of-[Place:3] the USA-[CountryName:5])
</augsyn>
<mrl lang="geo-funql">
answer(highest(place(loc_2(countryid('usa')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,highest(A,(place(A),loc(A,B),const(B,countryid(usa)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Place ) }) </node>
<node id="1"> *n:Place -> ({ highest ( *n:Place ) }) </node>
<node id="2"> *n:Place -> ({ place ( *n:Place ) }) </node>
<node id="3"> *n:Place -> ({ loc_2 ( *n:Country ) }) </node>
<node id="4"> *n:Country -> ({ countryid ( *n:CountryName ) }) </node>
<node id="5"> *n:CountryName -> ({ ' usa ' }) </node>
</mrl-parse>
</example>

<example id="404">
<nl lang="en">
بزرگترین مرکز ایالت کجاست ؟
</nl>
<syn lang="en">
(S بزرگترین مرکز ایالت کجاست ؟)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the largest-[City:1] capital-[City:2])
</augsyn>
<mrl lang="geo-funql">
answer(largest(capital(all)))
</mrl>
<mrl lang="geo-prolog">
answer(A,largest(A,capital(A)))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ largest ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ capital ( all ) }) </node>
</mrl-parse>
</example>

<example id="405">
<nl lang="en">
بزرگترین مرکز ایالت در ایالات متحده کجاست ؟
</nl>
<syn lang="en">
(S بزرگترین مرکز ایالت در ایالات متحده کجاست ؟)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the largest-[City:1] capital-[City:2] city-[City:3] in-[City:4] the USA-[CountryName:6])
</augsyn>
<mrl lang="geo-funql">
answer(largest(capital(city(loc_2(countryid('usa'))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,largest(A,(capital(A),city(A),loc(A,B),const(B,countryid(usa)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ largest ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ capital ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="4"> *n:City -> ({ loc_2 ( *n:Country ) }) </node>
<node id="5"> *n:Country -> ({ countryid ( *n:CountryName ) }) </node>
<node id="6"> *n:CountryName -> ({ ' usa ' }) </node>
</mrl-parse>
</example>

<example id="406">
<nl lang="en">
بزرگترین شهر در ایالت مجاور تگزاس کجاست ؟
</nl>
<syn lang="en">
(S بزرگترین شهر در ایالت مجاور تگزاس کجاست ؟)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the largest-[City:1] city-[City:2] in-[City:3] a-[State:4] state-[State:4] that borders-[State:5] Texas-[StateName:7])
</augsyn>
<mrl lang="geo-funql">
answer(largest(city(loc_2(state(next_to_2(stateid('texas')))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,largest(A,(city(A),loc(A,B),state(B),next_to(B,C),const(C,stateid(texas)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ largest ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="6"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="7"> *n:StateName -> ({ ' texas ' }) </node>
</mrl-parse>
</example>

<example id="407">
<nl lang="en">
بزرگترین شهر در آلاباما کجاست ؟
</nl>
<syn lang="en">
(S بزرگترین شهر در آلاباما کجاست ؟)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the largest-[City:1] city-[City:2] in-[City:3] Alabama-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(largest(city(loc_2(stateid('alabama')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,largest(A,(city(A),loc(A,B),const(B,stateid(alabama)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ largest ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' alabama ' }) </node>
</mrl-parse>
</example>

<example id="408">
<nl lang="en">
بزرگترین شهر در کالیفرنیا کجاست ؟
</nl>
<syn lang="en">
(S بزرگترین شهر در کالیفرنیا کجاست ؟)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the largest-[City:1] city-[City:2] in-[City:3] California-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(largest(city(loc_2(stateid('california')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,largest(A,(city(A),loc(A,B),const(B,stateid(california)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ largest ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' california ' }) </node>
</mrl-parse>
</example>

<example id="409">
<nl lang="en">
بزرگترین شهر در میشیگان کجاست ؟
</nl>
<syn lang="en">
(S بزرگترین شهر در میشیگان کجاست ؟)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the largest-[City:1] city-[City:2] in-[City:3] Michigan-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(largest(city(loc_2(stateid('michigan')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,largest(A,(city(A),loc(A,B),const(B,stateid(michigan)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ largest ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' michigan ' }) </node>
</mrl-parse>
</example>

<example id="410">
<nl lang="en">
بزرگترین شهر در مینه سوتا کجاست ؟
</nl>
<nl lang="es">
que es la ciudad mas grande en minnesota por poblacion ?
</nl>
<nl lang="ja">
jinkou de minesota no mottomo ookii toshi wa nan desu ka ?
</nl>
<nl lang="tr">
minnesota da nufus acisindan en buyuk sehir nedir ?
</nl>
<syn lang="en">
(S بزرگترین شهر در مینه سوتا کجاست ؟)
</syn>
<syn lang="es">
(S que es la ciudad mas grande en minnesota por poblacion)
</syn>
<syn lang="ja">
(S jinkou de minesota no mottomo ookii toshi wa nan desu ka)
</syn>
<syn lang="tr">
(S minnesota da nufus acisindan en buyuk sehir nedir)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the largest-[City:1] city-[City:2] in-[City:3] Minnesota-[StateName:5] by-[City:1] population-[City:1])
</augsyn>
<mrl lang="geo-funql">
answer(largest_one(population_1(city(loc_2(stateid('minnesota'))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,largest(B,(city(A),loc(A,C),const(C,stateid(minnesota)),population(A,B))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ largest_one ( population_1 ( *n:City ) ) }) </node>
<node id="2"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' minnesota ' }) </node>
</mrl-parse>
</example>

<example id="411">
<nl lang="en">
بزرگترین شهر در میسوری کجاست ؟
</nl>
<syn lang="en">
(S بزرگترین شهر در میسوری کجاست ؟)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the largest-[City:1] city-[City:2] in-[City:3] Missouri-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(largest(city(loc_2(stateid('missouri')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,largest(A,(city(A),loc(A,B),const(B,stateid(missouri)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ largest ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' missouri ' }) </node>
</mrl-parse>
</example>

<example id="412">
<nl lang="en">
بزرگترین شهر در رودایلند کجاست ؟
</nl>
<nl lang="es">
que es la ciudad mas grande en rhode island ?
</nl>
<nl lang="ja">
roodoairando no mottomo ookii toshi wa nan desu ka ?
</nl>
<nl lang="tr">
rhode island aki en buyuk sehir nedir ?
</nl>
<syn lang="en">
(S بزرگترین شهر در رودایلند کجاست ؟)
</syn>
<syn lang="es">
(S que es la ciudad mas grande en rhode_island)
</syn>
<syn lang="ja">
(S roodoairando no mottomo ookii toshi wa nan desu ka)
</syn>
<syn lang="tr">
(S rhode_island aki en buyuk sehir nedir)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the largest-[City:1] city-[City:2] in-[City:3] Rhode-[StateName:5] Island-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(largest(city(loc_2(stateid('rhode island')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,largest(A,(city(A),loc(A,B),const(B,stateid('rhode island')))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ largest ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' rhode island ' }) </node>
</mrl-parse>
</example>

<example id="413">
<nl lang="en">
بزرگترین شهر در کوچکترین ایالتی که میسیسیپی از آن میگذرد کجاست ؟
</nl>
<syn lang="en">
(S بزرگترین شهر در کوچکترین ایالتی که میسیسیپی از آن میگذرد کجاست ؟)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the largest-[City:1] city-[City:2] in-[City:3] smallest-[State:4] state-[State:5] through-[State:6] which the Mississippi-[RiverName:8] runs-[State:6])
</augsyn>
<mrl lang="geo-funql">
answer(largest(city(loc_2(smallest(state(traverse_1(riverid('mississippi'))))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,largest(A,(city(A),loc(A,B),smallest(B,(state(B),const(C,riverid(mississippi)),traverse(C,B))))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ largest ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ smallest ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="6"> *n:State -> ({ traverse_1 ( *n:River ) }) </node>
<node id="7"> *n:River -> ({ riverid ( *n:RiverName ) }) </node>
<node id="8"> *n:RiverName -> ({ ' mississippi ' }) </node>
</mrl-parse>
</example>

<example id="414">
<nl lang="en">
بزرگترین شهر در ایالت های همجوار کالیفرنیا کجاست ؟
</nl>
<nl lang="es">
que es la ciudad mas grande en los estados que bordean a california ?
</nl>
<nl lang="ja">
karifuorunia ni rinsetsu suru shuu no mottomo ookii toshi wa nan desu ka ?
</nl>
<nl lang="tr">
california ya komsu eyaletler deki en genis sehir nedir ?
</nl>
<syn lang="en">
(S بزرگترین شهر در ایالت های همجوار کالیفرنیا کجاست ؟)
</syn>
<syn lang="es">
(S que es la ciudad mas grande en los estados que bordean a california)
</syn>
<syn lang="ja">
(S karifuorunia ni rinsetsu suru shuu no mottomo ookii toshi wa nan desu ka)
</syn>
<syn lang="tr">
(S california ya komsu eyaletler deki en genis sehir nedir)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the largest-[City:1] city-[City:2] in-[City:3] states-[State:4] that border-[State:5] California-[StateName:7])
</augsyn>
<mrl lang="geo-funql">
answer(largest(city(loc_2(state(next_to_2(stateid('california')))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,largest(A,(city(A),loc(A,B),state(B),next_to(B,C),const(C,stateid(california)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ largest ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="6"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="7"> *n:StateName -> ({ ' california ' }) </node>
</mrl-parse>
</example>

<example id="415">
<nl lang="en">
بزرگترین شهر در تگزاس کجاست ؟
</nl>
<syn lang="en">
(S بزرگترین شهر در تگزاس کجاست ؟)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the largest-[City:1] city-[City:2] in-[City:3] Texas-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(largest(city(loc_2(stateid('texas')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,largest(A,(city(A),loc(A,B),const(B,stateid(texas)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ largest ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' texas ' }) </node>
</mrl-parse>
</example>

<example id="416">
<nl lang="en">
بزرگترین شهر در کوچکترین ایالت آمریکا کجاست ؟
</nl>
<syn lang="en">
(S بزرگترین شهر در کوچکترین ایالت آمریکا کجاست ؟)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the largest-[City:1] city-[City:2] in-[City:3] the smallest-[State:4] state-[State:5] in-[State:6] the USA-[CountryName:8])
</augsyn>
<mrl lang="geo-funql">
answer(largest(city(loc_2(smallest(state(loc_2(countryid('usa'))))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,largest(A,(city(A),loc(A,B),smallest(B,(state(B),loc(B,C),const(C,countryid(usa)))))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ largest ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ smallest ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="6"> *n:State -> ({ loc_2 ( *n:Country ) }) </node>
<node id="7"> *n:Country -> ({ countryid ( *n:CountryName ) }) </node>
<node id="8"> *n:CountryName -> ({ ' usa ' }) </node>
</mrl-parse>
</example>

<example id="417">
<nl lang="en">
بزرگترین شهر در ویسکونسین کجاست ؟
</nl>
<nl lang="es">
que es la ciudad mas grande en wisconsin ?
</nl>
<nl lang="ja">
uisukonshin no mottomo ookii toshi wa nan desu ka ?
</nl>
<nl lang="tr">
wisconsin deki en genis sehir nedir ?
</nl>
<syn lang="en">
(S بزرگترین شهر در ویسکونسین کجاست ؟)
</syn>
<syn lang="es">
(S que es la ciudad mas grande en wisconsin)
</syn>
<syn lang="ja">
(S uisukonshin no mottomo ookii toshi wa nan desu ka)
</syn>
<syn lang="tr">
(S wisconsin deki en genis sehir nedir)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the largest-[City:1] city-[City:2] in-[City:3] Wisconsin-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(largest(city(loc_2(stateid('wisconsin')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,largest(A,(city(A),loc(A,B),const(B,stateid(wisconsin)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ largest ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' wisconsin ' }) </node>
</mrl-parse>
</example>

<example id="418">
<nl lang="en">
بزرگترین شهر کانزاس کجاست ؟
</nl>
<syn lang="en">
(S بزرگترین شهر کانزاس کجاست ؟)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the largest-[City:1] city-[City:2] of-[City:3] Kansas-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(largest(city(loc_2(stateid('kansas')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,largest(A,(city(A),loc(A,B),const(B,stateid(kansas)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ largest ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' kansas ' }) </node>
</mrl-parse>
</example>

<example id="419">
<nl lang="en">
بزرگترین ایالتی که ریوگرانده از آن میگذرد کجاست ؟
</nl>
<syn lang="en">
(S بزرگترین ایالتی که ریوگرانده از آن میگذرد کجاست ؟)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the largest-[State:1] of-[State:1] the states-[State:2] that the Rio-[RiverName:5] Grande-[RiverName:5] runs-[State:3] through-[State:3])
</augsyn>
<mrl lang="geo-funql">
answer(largest(state(traverse_1(riverid('rio grande')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,largest(A,(state(A),const(B,riverid('rio grande')),traverse(B,A))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ largest ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ traverse_1 ( *n:River ) }) </node>
<node id="4"> *n:River -> ({ riverid ( *n:RiverName ) }) </node>
<node id="5"> *n:RiverName -> ({ ' rio grande ' }) </node>
</mrl-parse>
</example>

<example id="420">
<nl lang="en">
بزرگترین رودخانه ایالت واشنگتن کجاست ؟
</nl>
<nl lang="es">
que es el rio mas grande en el estado de washington ?
</nl>
<nl lang="ja">
washinton shuu no mottomo nagai kawa wa nan desu ka ?
</nl>
<nl lang="tr">
washington eyaletindeki en genis nehir nedir ?
</nl>
<syn lang="en">
(S بزرگترین رودخانه ایالت واشنگتن کجاست ؟)
</syn>
<syn lang="es">
(S que es el rio mas grande en el estado de washington)
</syn>
<syn lang="ja">
(S washinton shuu no mottomo nagai kawa wa nan desu ka)
</syn>
<syn lang="tr">
(S washington eyaletindeki en genis nehir nedir)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the largest-[River:1] river-[River:2] in-[River:3] Washington-[StateName:6] state-[State:4])
</augsyn>
<mrl lang="geo-funql">
answer(longest(river(loc_2(state(stateid('washington'))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,largest(A,(river(A),loc(A,B),const(B,stateid(washington)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:River ) }) </node>
<node id="1"> *n:River -> ({ longest ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="6"> *n:StateName -> ({ ' washington ' }) </node>
</mrl-parse>
</example>

<example id="421">
<nl lang="en">
بزگترین ایالت کجاست ؟
</nl>
<syn lang="en">
(S بزگترین ایالت کجاست ؟)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the largest-[State:1] state-[State:2])
</augsyn>
<mrl lang="geo-funql">
answer(largest(state(all)))
</mrl>
<mrl lang="geo-prolog">
answer(A,largest(A,state(A)))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ largest ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="422">
<nl lang="en">
بزرگترین ایالتی همجوار آرکانزاس کجاست ؟
</nl>
<syn lang="en">
(S بزرگترین ایالتی همجوار آرکانزاس کجاست ؟)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the largest-[State:1] state-[State:2] bordering-[State:3] Arkansas-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(largest(state(next_to_2(stateid('arkansas')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,largest(A,(state(A),next_to(A,B),const(B,stateid(arkansas)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ largest ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' arkansas ' }) </node>
</mrl-parse>
</example>

<example id="423">
<nl lang="en">
بزرگترین ایالت همجوار تگزاس کجاست ؟
</nl>
<syn lang="en">
(S بزرگترین ایالت همجوار تگزاس کجاست ؟)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the largest-[State:1] state-[State:2] bordering-[State:3] Texas-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(largest(state(next_to_2(stateid('texas')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,largest(A,(state(A),next_to(A,B),const(B,stateid(texas)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ largest ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' texas ' }) </node>
</mrl-parse>
</example>

<example id="424">
<nl lang="en">
کدام مرکز استان دارای بیشترین جمعیت است ؟
</nl>
<nl lang="es">
que es la capital de estado mas grande en poblacion ?
</nl>
<nl lang="ja">
jinkou de mottomo ookii shuto wa nan desu ka ?
</nl>
<nl lang="tr">
nufus bakimindan en buyuk eyalet baskenti nedir ?
</nl>
<syn lang="en">
(S کدام مرکز استان دارای بیشترین جمعیت است ؟)
</syn>
<syn lang="es">
(S que es la capital de estado mas grande en poblacion)
</syn>
<syn lang="ja">
(S jinkou de mottomo ookii shuto wa nan desu ka)
</syn>
<syn lang="tr">
(S nufus bakimindan en buyuk eyalet baskenti nedir)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the largest-[City:1] state-[State:3] capital-[City:2] in-[City:1] population-[City:1])
</augsyn>
<mrl lang="geo-funql">
answer(largest_one(population_1(capital_1(state(all)))))
</mrl>
<mrl lang="geo-prolog">
answer(A,largest(B,(state(C),capital(C,A),population(A,B))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ largest_one ( population_1 ( *n:City ) ) }) </node>
<node id="2"> *n:City -> ({ capital_1 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="425">
<nl lang="en">
بزرگترین ایالت آمریکا کجاست ؟
</nl>
<syn lang="en">
(S بزرگترین ایالت آمریکا کجاست ؟)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the largest-[State:1] state-[State:2] in-[State:3] the US-[CountryName:5])
</augsyn>
<mrl lang="geo-funql">
answer(largest(state(loc_2(countryid('usa')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,largest(A,(state(A),loc(A,B),const(B,countryid(usa)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ largest ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ loc_2 ( *n:Country ) }) </node>
<node id="4"> *n:Country -> ({ countryid ( *n:CountryName ) }) </node>
<node id="5"> *n:CountryName -> ({ ' usa ' }) </node>
</mrl-parse>
</example>

<example id="426">
<nl lang="en">
بزگترین ایالت آمریکا کجاست ؟
</nl>
<syn lang="en">
(S بزگترین ایالت آمریکا کجاست ؟)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the largest-[State:1] state-[State:2] in-[State:3] USA-[CountryName:5])
</augsyn>
<mrl lang="geo-funql">
answer(largest(state(loc_2(countryid('usa')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,largest(A,(state(A),loc(A,B),const(B,countryid(usa)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ largest ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ loc_2 ( *n:Country ) }) </node>
<node id="4"> *n:Country -> ({ countryid ( *n:CountryName ) }) </node>
<node id="5"> *n:CountryName -> ({ ' usa ' }) </node>
</mrl-parse>
</example>

<example id="427">
<nl lang="en">
بزرگترین ایالت همجوار کالیفرنیا کدامست ؟
</nl>
<syn lang="en">
(S بزرگترین ایالت همجوار کالیفرنیا کدامست ؟)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the largest-[State:1] state-[State:2] that borders-[State:3] California-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(largest(state(next_to_2(stateid('california')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,largest(A,(state(A),next_to(A,B),const(B,stateid(california)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ largest ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' california ' }) </node>
</mrl-parse>
</example>

<example id="428">
<nl lang="en">
بزرگترین ایالتی همجوار تگزاس کجاست ؟
</nl>
<syn lang="en">
(S بزرگترین ایالتی همجوار تگزاس کجاست ؟)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the largest-[State:1] state-[State:2] that borders-[State:3] Texas-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(largest(state(next_to_2(stateid('texas')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,largest(A,(state(A),next_to(A,B),const(B,stateid(texas)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ largest ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' texas ' }) </node>
</mrl-parse>
</example>

<example id="429">
<nl lang="en">
بزگترین استان همرمز ایالت دارای بیشترین جمعیت کدامست ؟
</nl>
<syn lang="en">
(S بزگترین استان همرمز ایالت دارای بیشترین جمعیت کدامست ؟)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the largest-[State:1] state-[State:2] that borders-[State:3] the state-[State:5] with-[State:4] the highest-[State:4] population-[State:4])
</augsyn>
<mrl lang="geo-funql">
answer(largest(state(next_to_2(largest_one(population_1(state(all)))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,largest(A,(state(A),next_to(A,B),largest(C,(state(B),population(B,C))))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ largest ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ largest_one ( population_1 ( *n:State ) ) }) </node>
<node id="5"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="430">
<nl lang="en">
بزرگترین ایالت همجوار ایالتی که پایین ترین نقطه در ایالات را دارد کجاست ؟
</nl>
<syn lang="en">
(S بزرگترین ایالت همجوار ایالتی که پایین ترین نقطه در ایالات را دارد کجاست ؟)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the largest-[State:1] state-[State:2] that borders-[State:3] the state-[State:4] with-[State:5] the lowest-[Place:6] point-[Place:7] in-[Place:8] the USA-[CountryName:10])
</augsyn>
<mrl lang="geo-funql">
answer(largest(state(next_to_2(state(loc_1(lowest(place(loc_2(countryid('usa'))))))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,largest(A,(state(A),next_to(A,B),state(B),loc(C,B),lowest(C,(place(C),loc(C,D),const(D,countryid(usa)))))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ largest ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ loc_1 ( *n:Place ) }) </node>
<node id="6"> *n:Place -> ({ lowest ( *n:Place ) }) </node>
<node id="7"> *n:Place -> ({ place ( *n:Place ) }) </node>
<node id="8"> *n:Place -> ({ loc_2 ( *n:Country ) }) </node>
<node id="9"> *n:Country -> ({ countryid ( *n:CountryName ) }) </node>
<node id="10"> *n:CountryName -> ({ ' usa ' }) </node>
</mrl-parse>
</example>

<example id="431">
<nl lang="en">
بزرگترین ایالتی که میسیسیپی از آن عبور میکند کدامست ؟
</nl>
<syn lang="en">
(S بزرگترین ایالتی که میسیسیپی از آن عبور میکند کدامست ؟)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the largest-[State:1] state-[State:2] traversed-[State:3] by-[State:3] the Mississippi-[RiverName:6] river-[River:4])
</augsyn>
<mrl lang="geo-funql">
answer(largest(state(traverse_1(river(riverid('mississippi'))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,largest(A,(state(A),traverse(B,A),const(B,riverid(mississippi)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ largest ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ traverse_1 ( *n:River ) }) </node>
<node id="4"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="5"> *n:River -> ({ riverid ( *n:RiverName ) }) </node>
<node id="6"> *n:RiverName -> ({ ' mississippi ' }) </node>
</mrl-parse>
</example>

<example id="432">
<nl lang="en">
کم جمعیت ترین ایالت کدامست ؟
</nl>
<syn lang="en">
(S کم جمعیت ترین ایالت کدامست ؟)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the least-[State:1] populous-[State:1] state-[State:2])
</augsyn>
<mrl lang="geo-funql">
answer(smallest_one(population_1(state(all))))
</mrl>
<mrl lang="geo-prolog">
answer(A,smallest(B,(population(A,B),state(A))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ smallest_one ( population_1 ( *n:State ) ) }) </node>
<node id="2"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="433">
<nl lang="en">
طول رودخانه کلرادو چقدر است ؟
</nl>
<nl lang="es">
cuanto tiene de largo el rio colorado ?
</nl>
<nl lang="ja">
kororado kawa no nagasa wa nan desu ka ?
</nl>
<nl lang="tr">
colorado nehrinin uzunlugu nedir ?
</nl>
<syn lang="en">
(S طول رودخانه کلرادو چقدر است ؟)
</syn>
<syn lang="es">
(S cuanto tiene de largo el rio colorado)
</syn>
<syn lang="ja">
(S kororado kawa no nagasa wa nan desu ka)
</syn>
<syn lang="tr">
(S colorado nehrinin uzunlugu nedir)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the length-[Num:1] of-[Num:1] the Colorado-[RiverName:4] river-[River:2])
</augsyn>
<mrl lang="geo-funql">
answer(len(river(riverid('colorado'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(len(B,A),const(B,riverid(colorado)),river(B)))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ len ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ riverid ( *n:RiverName ) }) </node>
<node id="4"> *n:RiverName -> ({ ' colorado ' }) </node>
</mrl-parse>
</example>

<example id="434">
<nl lang="en">
طول رودخانه کلرادو در تگزاس چقدر است ؟
</nl>
<syn lang="en">
(S طول رودخانه کلرادو در تگزاس چقدر است ؟)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the length-[Num:1] of-[Num:1] the Colorado-[RiverName:4] river-[River:5] in-[River:6] Texas-[StateName:8])
</augsyn>
<mrl lang="geo-funql">
answer(len(intersection(riverid('colorado'), river(loc_2(stateid('texas'))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(len(B,A),const(B,riverid(colorado)),river(B),loc(B,C),const(C,stateid(texas))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ len ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ intersection ( *n:River , *n:River ) }) </node>
<node id="3"> *n:River -> ({ riverid ( *n:RiverName ) }) </node>
<node id="4"> *n:RiverName -> ({ ' colorado ' }) </node>
<node id="5"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="6"> *n:River -> ({ loc_2 ( *n:State ) }) </node>
<node id="7"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="8"> *n:StateName -> ({ ' texas ' }) </node>
</mrl-parse>
</example>

<example id="435">
<nl lang="en">
طول بلند ترین رودخانه ایالات متحده کدامست ؟
</nl>
<syn lang="en">
(S طول بلند ترین رودخانه ایالات متحده کدامست ؟)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the length-[Num:1] of-[Num:1] the longest-[River:2] river-[River:3] in-[River:4] the USA-[CountryName:6])
</augsyn>
<mrl lang="geo-funql">
answer(len(longest(river(loc_2(countryid('usa'))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(len(B,A),longest(B,(river(B),loc(B,C),const(C,countryid(usa))))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ len ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ longest ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="4"> *n:River -> ({ loc_2 ( *n:Country ) }) </node>
<node id="5"> *n:Country -> ({ countryid ( *n:CountryName ) }) </node>
<node id="6"> *n:CountryName -> ({ ' usa ' }) </node>
</mrl-parse>
</example>

<example id="436">
<nl lang="en">
طول بلندترین رودخانه ای که از تگزاس میگذرد چقدر است ؟
</nl>
<syn lang="en">
(S طول بلندترین رودخانه ای که از تگزاس میگذرد چقدر است ؟)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the length-[Num:1] of-[Num:1] the longest-[River:2] river-[River:3] that runs-[River:4] through-[River:4] Texas-[StateName:6])
</augsyn>
<mrl lang="geo-funql">
answer(len(longest(river(traverse_2(stateid('texas'))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(len(B,A),longest(B,(river(B),traverse(B,C),const(C,stateid(texas))))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ len ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ longest ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="4"> *n:River -> ({ traverse_2 ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="6"> *n:StateName -> ({ ' texas ' }) </node>
</mrl-parse>
</example>

<example id="437">
<nl lang="en">
طول رودخانه میسیسیپی چقدر است ؟
</nl>
<nl lang="es">
que tiene de largo el rio mississippi ?
</nl>
<nl lang="ja">
mishishippi kawa no nagasa wa nan desu ka ?
</nl>
<nl lang="tr">
mississippi nehrinin uzunlugu nedir ?
</nl>
<syn lang="en">
(S طول رودخانه میسیسیپی چقدر است ؟)
</syn>
<syn lang="es">
(S que tiene de largo el rio mississippi)
</syn>
<syn lang="ja">
(S mishishippi kawa no nagasa wa nan desu ka)
</syn>
<syn lang="tr">
(S mississippi nehrinin uzunlugu nedir)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the length-[Num:1] of-[Num:1] the Mississippi-[RiverName:4] river-[River:2])
</augsyn>
<mrl lang="geo-funql">
answer(len(river(riverid('mississippi'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(len(B,A),const(B,riverid(mississippi)),river(B)))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ len ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ riverid ( *n:RiverName ) }) </node>
<node id="4"> *n:RiverName -> ({ ' mississippi ' }) </node>
</mrl-parse>
</example>

<example id="438">
<nl lang="en">
طول رودخانه ای که از بیشتر ایالات میگذرد چقدر است ؟
</nl>
<syn lang="en">
(S طول رودخانه ای که از بیشتر ایالات میگذرد چقدر است ؟)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the length-[Num:1] of-[Num:1] the river-[River:3] that flows-[River:4] through-[River:4] the most-[River:2] states-[State:5])
</augsyn>
<mrl lang="geo-funql">
answer(len(most(river(traverse_2(state(all))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(len(B,A),most(B,C,(river(B),traverse(B,C),state(C)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ len ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ most ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="4"> *n:River -> ({ traverse_2 ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="439">
<nl lang="en">
طول رودخانه ای که از بیشترین تعداد ایالات میگذرد چقدر است ؟
</nl>
<syn lang="en">
(S طول رودخانه ای که از بیشترین تعداد ایالات میگذرد چقدر است ؟)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the length-[Num:1] of-[Num:1] the river-[River:3] that runs-[River:4] through-[River:4] the most-[River:2] number-[River:2] of-[River:2] states-[State:5])
</augsyn>
<mrl lang="geo-funql">
answer(len(most(river(traverse_2(state(all))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(len(B,A),most(B,C,(river(B),traverse(B,C),state(C)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ len ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ most ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="4"> *n:River -> ({ traverse_2 ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="440">
<nl lang="en">
طول رودخانه ای که از بیشتر ایالات میگذرد چقدر است ؟
</nl>
<syn lang="en">
(S طول رودخانه ای که از بیشتر ایالات میگذرد چقدر است ؟)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the length-[Num:1] of-[Num:1] the river-[River:3] that runs-[River:4] through-[River:4] the most-[River:2] states-[State:5])
</augsyn>
<mrl lang="geo-funql">
answer(len(most(river(traverse_2(state(all))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(len(B,A),most(B,C,(river(B),traverse(B,C),state(C)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ len ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ most ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="4"> *n:River -> ({ traverse_2 ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="441">
<nl lang="en">
بلندی رودخانه ای که از بیشتر ایالات عبور میکند چقدر است ؟
</nl>
<syn lang="en">
(S بلندی رودخانه ای که از بیشتر ایالات عبور میکند چقدر است ؟)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the length-[Num:1] of-[Num:1] the river-[River:3] that traverses-[River:4] the most-[River:2] states-[State:5])
</augsyn>
<mrl lang="geo-funql">
answer(len(most(river(traverse_2(state(all))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(len(B,A),most(B,C,(river(B),traverse(B,C),state(C)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ len ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ most ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="4"> *n:River -> ({ traverse_2 ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="442">
<nl lang="en">
طولانی ترین رودخانه کدامست ؟
</nl>
<nl lang="es">
que es el rio mas largo en los united states ?
</nl>
<nl lang="ja">
beikoku no mottomo nagai kawa wa nan desu ka ?
</nl>
<nl lang="tr">
birlesik devletler in en uzun nehri nedir ?
</nl>
<syn lang="en">
(S طولانی ترین رودخانه کدامست ؟)
</syn>
<syn lang="es">
(S que es el rio mas largo en los united states)
</syn>
<syn lang="ja">
(S beikoku no mottomo nagai kawa wa nan desu ka)
</syn>
<syn lang="tr">
(S birlesik devletler in en uzun nehri nedir)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the longest-[River:1] river-[River:2])
</augsyn>
<mrl lang="geo-funql">
answer(longest(river(all)))
</mrl>
<mrl lang="geo-prolog">
answer(A,longest(A,river(A)))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:River ) }) </node>
<node id="1"> *n:River -> ({ longest ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ river ( all ) }) </node>
</mrl-parse>
</example>

<example id="443">
<nl lang="en">
بلندترین رودخانه ای که از از نیویورک میگذرد کدامست ؟
</nl>
<syn lang="en">
(S بلندترین رودخانه ای که از از نیویورک میگذرد کدامست ؟)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the longest-[River:1] river-[River:2] flowing-[River:3] through-[River:3] New-[StateName:5] York-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(longest(river(traverse_2(stateid('new york')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,longest(A,(river(A),traverse(A,B),const(B,stateid('new york')))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:River ) }) </node>
<node id="1"> *n:River -> ({ longest ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ traverse_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' new york ' }) </node>
</mrl-parse>
</example>

<example id="444">
<nl lang="en">
طولانی ترین رودخانه آمریکا کدامست ؟
</nl>
<syn lang="en">
(S طولانی ترین رودخانه آمریکا کدامست ؟)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the longest-[River:1] river-[River:2] in-[River:3] America-[CountryName:5])
</augsyn>
<mrl lang="geo-funql">
answer(longest(river(loc_2(countryid('usa')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,longest(A,(river(A),loc(A,B),const(B,countryid(usa)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:River ) }) </node>
<node id="1"> *n:River -> ({ longest ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ loc_2 ( *n:Country ) }) </node>
<node id="4"> *n:Country -> ({ countryid ( *n:CountryName ) }) </node>
<node id="5"> *n:CountryName -> ({ ' usa ' }) </node>
</mrl-parse>
</example>

<example id="445">
<nl lang="en">
طولانی ترین رودخانه کالیفرنیا کدامست ؟
</nl>
<syn lang="en">
(S طولانی ترین رودخانه کالیفرنیا کدامست ؟)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the longest-[River:1] river-[River:2] in-[River:3] California-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(longest(river(loc_2(stateid('california')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,longest(A,(river(A),loc(A,B),const(B,stateid(california)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:River ) }) </node>
<node id="1"> *n:River -> ({ longest ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' california ' }) </node>
</mrl-parse>
</example>

<example id="446">
<nl lang="en">
طولانی ترین رودخانه فلوریدا کدامست ؟
</nl>
<nl lang="es">
que es el rio mas largo en florida ?
</nl>
<nl lang="ja">
furorida no mottomo nagai kawa wa nan desu ka ?
</nl>
<nl lang="tr">
florida daki en uzun nehir nedir ?
</nl>
<syn lang="en">
(S طولانی ترین رودخانه فلوریدا کدامست ؟)
</syn>
<syn lang="es">
(S que es el rio mas largo en florida)
</syn>
<syn lang="ja">
(S furorida no mottomo nagai kawa wa nan desu ka)
</syn>
<syn lang="tr">
(S florida daki en uzun nehir nedir)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the longest-[River:1] river-[River:2] in-[River:3] Florida-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(longest(river(loc_2(stateid('florida')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,longest(A,(river(A),loc(A,B),const(B,stateid(florida)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:River ) }) </node>
<node id="1"> *n:River -> ({ longest ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' florida ' }) </node>
</mrl-parse>
</example>

<example id="447">
<nl lang="en">
طولانی ترین رودخانه در می سی سی پی کدامست ؟
</nl>
<nl lang="es">
que es el rio mas largo en mississippi ?
</nl>
<nl lang="ja">
mishishippi de mottomo nagai kawa wa nan desu ka ?
</nl>
<nl lang="tr">
mississippi nin en uzun nehri nedir ?
</nl>
<syn lang="en">
(S طولانی ترین رودخانه در می سی سی پی کدامست ؟)
</syn>
<syn lang="es">
(S que es el rio mas largo en mississippi)
</syn>
<syn lang="ja">
(S mishishippi de mottomo nagai kawa wa nan desu ka)
</syn>
<syn lang="tr">
(S mississippi nin en uzun nehri nedir)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the longest-[River:1] river-[River:2] in-[River:3] Mississippi-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(longest(river(loc_2(stateid('mississippi')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,longest(A,(river(A),loc(A,B),const(B,stateid(mississippi)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:River ) }) </node>
<node id="1"> *n:River -> ({ longest ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' mississippi ' }) </node>
</mrl-parse>
</example>

<example id="448">
<nl lang="en">
طولانی ترین رودخانه در نیویورک کدامست ؟
</nl>
<syn lang="en">
(S طولانی ترین رودخانه در نیویورک کدامست ؟)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the longest-[River:1] river-[River:2] in-[River:3] New-[StateName:5] York-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(longest(river(loc_2(stateid('new york')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,longest(A,(river(A),loc(A,B),const(B,stateid('new york')))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:River ) }) </node>
<node id="1"> *n:River -> ({ longest ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' new york ' }) </node>
</mrl-parse>
</example>

<example id="449">
<nl lang="en">
طولانی ترین رودخانه در پنسیلوانیا کدامست ؟
</nl>
<syn lang="en">
(S طولانی ترین رودخانه در پنسیلوانیا کدامست ؟)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the longest-[River:1] river-[River:2] in-[River:3] Pennsylvania-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(longest(river(loc_2(stateid('pennsylvania')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,longest(A,(river(A),loc(A,B),const(B,stateid(pennsylvania)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:River ) }) </node>
<node id="1"> *n:River -> ({ longest ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' pennsylvania ' }) </node>
</mrl-parse>
</example>

<example id="450">
<nl lang="en">
طولانی ترین رودخانه در تگزاس کدامست ؟
</nl>
<nl lang="es">
que es el rio mas largo en texas ?
</nl>
<nl lang="ja">
tekisasu no mottomo nagai kawa wa nan desu ka ?
</nl>
<nl lang="tr">
texas daki en uzun nehir nedir ?
</nl>
<syn lang="en">
(S طولانی ترین رودخانه در تگزاس کدامست ؟)
</syn>
<syn lang="es">
(S que es el rio mas largo en texas)
</syn>
<syn lang="ja">
(S tekisasu no mottomo nagai kawa wa nan desu ka)
</syn>
<syn lang="tr">
(S texas daki en uzun nehir nedir)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the longest-[River:1] river-[River:2] in-[River:3] Texas-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(longest(river(loc_2(stateid('texas')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,longest(A,(river(A),loc(A,B),const(B,stateid(texas)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:River ) }) </node>
<node id="1"> *n:River -> ({ longest ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' texas ' }) </node>
</mrl-parse>
</example>

<example id="451">
<nl lang="en">
بلندترین رودخانه بزرگترین ایالت کدامست ؟
</nl>
<syn lang="en">
(S بلندترین رودخانه بزرگترین ایالت کدامست ؟)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the longest-[River:1] river-[River:2] in-[River:3] the largest-[State:4] state-[State:5])
</augsyn>
<mrl lang="geo-funql">
answer(longest(river(loc_2(largest(state(all))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,longest(A,(river(A),loc(A,B),largest(B,state(B)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:River ) }) </node>
<node id="1"> *n:River -> ({ longest ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ largest ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="452">
<nl lang="en">
بزگترین رودخانه در کوچکترین ایالت کدامست ؟
</nl>
<syn lang="en">
(S بزگترین رودخانه در کوچکترین ایالت کدامست ؟)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the longest-[River:1] river-[River:2] in-[River:3] the smallest-[State:4] state-[State:5] in-[State:6] the USA-[CountryName:8])
</augsyn>
<mrl lang="geo-funql">
answer(longest(river(loc_2(smallest(state(loc_2(countryid('usa'))))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,longest(A,(river(A),loc(A,B),smallest(B,(state(B),loc(B,C),const(C,countryid(usa)))))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:River ) }) </node>
<node id="1"> *n:River -> ({ longest ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ smallest ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="6"> *n:State -> ({ loc_2 ( *n:Country ) }) </node>
<node id="7"> *n:Country -> ({ countryid ( *n:CountryName ) }) </node>
<node id="8"> *n:CountryName -> ({ ' usa ' }) </node>
</mrl-parse>
</example>

<example id="453">
<nl lang="en">
بزگترین رودخانه در ایالتی که بلندترین نقطه در آن واقع شده است ؟
</nl>
<syn lang="en">
(S بزگترین رودخانه در ایالتی که بلندترین نقطه در آن واقع شده است ؟)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the longest-[River:1] river-[River:2] in-[River:3] the state-[State:4] with-[State:5] the highest-[Place:6] point-[Place:7])
</augsyn>
<mrl lang="geo-funql">
answer(longest(river(loc_2(state(loc_1(highest(place(all))))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,longest(A,(river(A),loc(A,B),state(B),loc(C,B),highest(C,place(C)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:River ) }) </node>
<node id="1"> *n:River -> ({ longest ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ loc_1 ( *n:Place ) }) </node>
<node id="6"> *n:Place -> ({ highest ( *n:Place ) }) </node>
<node id="7"> *n:Place -> ({ place ( all ) }) </node>
</mrl-parse>
</example>

<example id="454">
<nl lang="en">
بلندترین رودخانه در ایالتی که بیشترین شهرها در آن واقع شده اند کدامست ؟
</nl>
<syn lang="en">
(S بلندترین رودخانه در ایالتی که بیشترین شهرها در آن واقع شده اند کدامست ؟)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the longest-[River:1] river-[River:2] in-[River:3] the state-[State:5] with-[State:6] the most-[State:4] major-[City:7] cities-[City:8])
</augsyn>
<mrl lang="geo-funql">
answer(longest(river(loc_2(most(state(loc_1(major(city(all)))))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,longest(A,(river(A),loc(A,B),most(B,C,(state(B),loc(C,B),major(C),city(C))))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:River ) }) </node>
<node id="1"> *n:River -> ({ longest ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ most ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="6"> *n:State -> ({ loc_1 ( *n:City ) }) </node>
<node id="7"> *n:City -> ({ major ( *n:City ) }) </node>
<node id="8"> *n:City -> ({ city ( all ) }) </node>
</mrl-parse>
</example>

<example id="455">
<nl lang="en">
بلندترین رودخانه در ایالت مجاور نبراسکا کدامست ؟
</nl>
<syn lang="en">
(S بلندترین رودخانه در ایالت مجاور نبراسکا کدامست ؟)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the longest-[River:1] river-[River:2] in-[River:3] the states-[State:4] that border-[State:5] Nebraska-[StateName:7])
</augsyn>
<mrl lang="geo-funql">
answer(longest(river(loc_2(state(next_to_2(stateid('nebraska')))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,longest(A,(river(A),loc(A,B),state(B),next_to(B,C),const(C,stateid(nebraska)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:River ) }) </node>
<node id="1"> *n:River -> ({ longest ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="6"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="7"> *n:StateName -> ({ ' nebraska ' }) </node>
</mrl-parse>
</example>

<example id="456">
<nl lang="en">
بلندترین رودخانه ایالات متحده کدامست ؟
</nl>
<nl lang="es">
que es el rio mas largo en los united states ?
</nl>
<nl lang="ja">
beikoku no mottomo nagai kawa wa nan desu ka ?
</nl>
<nl lang="tr">
birlesik devletler in en uzun nehri nedir ?
</nl>
<syn lang="en">
(S بلندترین رودخانه ایالات متحده کدامست ؟)
</syn>
<syn lang="es">
(S que es el rio mas largo en los united states)
</syn>
<syn lang="ja">
(S beikoku no mottomo nagai kawa wa nan desu ka)
</syn>
<syn lang="tr">
(S birlesik devletler in en uzun nehri nedir)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the longest-[River:1] river-[River:2] in-[River:3] the United-[CountryName:5] States-[CountryName:5])
</augsyn>
<mrl lang="geo-funql">
answer(longest(river(loc_2(countryid('usa')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,longest(A,(river(A),loc(A,B),const(B,countryid(usa)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:River ) }) </node>
<node id="1"> *n:River -> ({ longest ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ loc_2 ( *n:Country ) }) </node>
<node id="4"> *n:Country -> ({ countryid ( *n:CountryName ) }) </node>
<node id="5"> *n:CountryName -> ({ ' usa ' }) </node>
</mrl-parse>
</example>

<example id="457">
<nl lang="en">
نام بلندترین رودخانه ایالات متحده چیست ؟
</nl>
<nl lang="es">
que es el rio mas largo en los us ?
</nl>
<nl lang="ja">
beikoku no mottomo nagai kawa wa nan desu ka ?
</nl>
<nl lang="tr">
us deki en uzun nehir nedir ?
</nl>
<syn lang="en">
(S نام بلندترین رودخانه ایالات متحده چیست ؟)
</syn>
<syn lang="es">
(S que es el rio mas largo en los us)
</syn>
<syn lang="ja">
(S beikoku no mottomo nagai kawa wa nan desu ka)
</syn>
<syn lang="tr">
(S us deki en uzun nehir nedir)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the longest-[River:1] river-[River:2] in-[River:3] the US-[CountryName:5])
</augsyn>
<mrl lang="geo-funql">
answer(longest(river(loc_2(countryid('usa')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,longest(A,(river(A),loc(A,B),const(B,countryid(usa)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:River ) }) </node>
<node id="1"> *n:River -> ({ longest ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ loc_2 ( *n:Country ) }) </node>
<node id="4"> *n:Country -> ({ countryid ( *n:CountryName ) }) </node>
<node id="5"> *n:CountryName -> ({ ' usa ' }) </node>
</mrl-parse>
</example>

<example id="458">
<nl lang="en">
نام بلندترین رودخانه ای که از تگزاس نمیگذرد چیست ؟
</nl>
<syn lang="en">
(S نام بلندترین رودخانه ای که از تگزاس نمیگذرد چیست ؟)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the longest-[River:1] river-[River:3] that does-[River:2] not-[River:2] run-[River:4] through-[River:4] Texas-[StateName:6])
</augsyn>
<mrl lang="geo-funql">
answer(longest(exclude(river(all), traverse_2(stateid('texas')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,longest(A,(river(A),not((traverse(A,B),const(B,stateid(texas)))))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:River ) }) </node>
<node id="1"> *n:River -> ({ longest ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ exclude ( *n:River , *n:River ) }) </node>
<node id="3"> *n:River -> ({ river ( all ) }) </node>
<node id="4"> *n:River -> ({ traverse_2 ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="6"> *n:StateName -> ({ ' texas ' }) </node>
</mrl-parse>
</example>

<example id="459">
<nl lang="en">
نام بلندترین رودخانه ای که از ایالتی میگذرد که همجوار ایندیاناست چیست ؟
</nl>
<syn lang="en">
(S نام بلندترین رودخانه ای که از ایالتی میگذرد که همجوار ایندیاناست چیست ؟)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the longest-[River:1] river-[River:2] that flows-[River:3] through-[River:3] a-[State:4] state-[State:4] that borders-[State:5] Indiana-[StateName:7])
</augsyn>
<mrl lang="geo-funql">
answer(longest(river(traverse_2(state(next_to_2(stateid('indiana')))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,longest(A,(river(A),traverse(A,B),state(B),next_to(B,C),const(C,stateid(indiana)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:River ) }) </node>
<node id="1"> *n:River -> ({ longest ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ traverse_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="6"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="7"> *n:StateName -> ({ ' indiana ' }) </node>
</mrl-parse>
</example>

<example id="460">
<nl lang="en">
نام بلندترین رودخانه ای که از کلرادو میگذرد چیست ؟
</nl>
<syn lang="en">
(S نام بلندترین رودخانه ای که از کلرادو میگذرد چیست ؟)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the longest-[River:1] river-[River:2] that flows-[River:3] through-[River:3] Colorado-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(longest(river(traverse_2(stateid('colorado')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,longest(A,(river(A),traverse(A,B),const(B,stateid(colorado)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:River ) }) </node>
<node id="1"> *n:River -> ({ longest ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ traverse_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' colorado ' }) </node>
</mrl-parse>
</example>

<example id="461">
<nl lang="en">
نام بلندترین رودخانه ای که از ایالت همجوار ایالتی که با بیشترین ایالات هم مرز میگذرد چیست ؟
</nl>
<syn lang="en">
(S نام بلندترین رودخانه ای که از ایالت همجوار ایالتی که با بیشترین ایالات هم مرز میگذرد چیست ؟)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the longest-[River:1] river-[River:2] that passes-[River:3] the states-[State:4] that border-[State:5] the state-[State:7] that borders-[State:8] the most-[State:6] states-[State:9])
</augsyn>
<mrl lang="geo-funql">
answer(longest(river(traverse_2(state(next_to_2(most(state(next_to_2(state(all))))))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,longest(A,(river(A),traverse(A,B),state(B),next_to(B,C),most(C,D,(state(C),next_to(C,D),state(D))))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:River ) }) </node>
<node id="1"> *n:River -> ({ longest ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ traverse_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="6"> *n:State -> ({ most ( *n:State ) }) </node>
<node id="7"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="8"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="9"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="462">
<nl lang="en">
نام بلندترین رودخانه که از ایالتی که هم مرز تنسی میگذرد کدامست ؟
</nl>
<syn lang="en">
(S نام بلندترین رودخانه که از ایالتی که هم مرز تنسی میگذرد کدامست ؟)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the longest-[River:1] river-[River:2] that runs-[River:3] through-[River:3] a-[State:4] state-[State:4] that borders-[State:5] Tennessee-[StateName:7])
</augsyn>
<mrl lang="geo-funql">
answer(longest(river(traverse_2(state(next_to_2(stateid('tennessee')))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,longest(A,(river(A),traverse(A,B),state(B),next_to(B,C),const(C,stateid(tennessee)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:River ) }) </node>
<node id="1"> *n:River -> ({ longest ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ traverse_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="6"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="7"> *n:StateName -> ({ ' tennessee ' }) </node>
</mrl-parse>
</example>

<example id="463">
<nl lang="en">
کمترین ارتفاع در پنسیلوانیا چقدر است ؟
</nl>
<syn lang="en">
(S کمترین ارتفاع در پنسیلوانیا چقدر است ؟)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the lowest-[Place:1] elevation-[Place:2] in-[Place:3] Pennsylvania-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(lowest(place(loc_2(stateid('pennsylvania')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,lowest(A,(place(A),loc(A,B),const(B,stateid(pennsylvania)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Place ) }) </node>
<node id="1"> *n:Place -> ({ lowest ( *n:Place ) }) </node>
<node id="2"> *n:Place -> ({ place ( *n:Place ) }) </node>
<node id="3"> *n:Place -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' pennsylvania ' }) </node>
</mrl-parse>
</example>

<example id="464">
<nl lang="en">
کمترین ارتفاع در آرکانزاس چقدر است ؟
</nl>
<nl lang="es">
que es el punto mas bajo en arkansas ?
</nl>
<nl lang="ja">
aakansaa no mottomo hikui chiten wa nan desu ka ?
</nl>
<nl lang="tr">
arkansas daki en alcak nokta nerededir ?
</nl>
<syn lang="en">
(S کمترین ارتفاع در آرکانزاس چقدر است ؟)
</syn>
<syn lang="es">
(S que es el punto mas bajo en arkansas)
</syn>
<syn lang="ja">
(S aakansaa no mottomo hikui chiten wa nan desu ka)
</syn>
<syn lang="tr">
(S arkansas daki en alcak nokta nerededir)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the lowest-[Place:1] point-[Place:2] in-[Place:3] Arkansas-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(lowest(place(loc_2(stateid('arkansas')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,lowest(A,(place(A),loc(A,B),const(B,stateid(arkansas)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Place ) }) </node>
<node id="1"> *n:Place -> ({ lowest ( *n:Place ) }) </node>
<node id="2"> *n:Place -> ({ place ( *n:Place ) }) </node>
<node id="3"> *n:Place -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' arkansas ' }) </node>
</mrl-parse>
</example>

<example id="465">
<nl lang="en">
پایین ترین نقطه کالیفرنیا کدامست ؟
</nl>
<nl lang="es">
que es el punto mas bajo en california ?
</nl>
<nl lang="ja">
karifuorunia no mottomo hikui chiten wa nan desu ka ?
</nl>
<nl lang="tr">
california daki en alcak nokta nerededir ?
</nl>
<syn lang="en">
(S پایین ترین نقطه کالیفرنیا کدامست ؟)
</syn>
<syn lang="es">
(S que es el punto mas bajo en california)
</syn>
<syn lang="ja">
(S karifuorunia no mottomo hikui chiten wa nan desu ka)
</syn>
<syn lang="tr">
(S california daki en alcak nokta nerededir)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the lowest-[Place:1] point-[Place:2] in-[Place:3] California-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(lowest(place(loc_2(stateid('california')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,lowest(A,(place(A),loc(A,B),const(B,stateid(california)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Place ) }) </node>
<node id="1"> *n:Place -> ({ lowest ( *n:Place ) }) </node>
<node id="2"> *n:Place -> ({ place ( *n:Place ) }) </node>
<node id="3"> *n:Place -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' california ' }) </node>
</mrl-parse>
</example>

<example id="466">
<nl lang="en">
پایین ترین نقطه در لوئیزیانا کدامست ؟
</nl>
<nl lang="es">
que es el punto mas bajo en louisiana ?
</nl>
<nl lang="ja">
ruijiana no mottomo hikui chiten wa nan desu ka ?
</nl>
<nl lang="tr">
louisiana daki en alcak nokta nedir ?
</nl>
<syn lang="en">
(S پایین ترین نقطه در لوئیزیانا کدامست ؟)
</syn>
<syn lang="es">
(S que es el punto mas bajo en louisiana)
</syn>
<syn lang="ja">
(S ruijiana no mottomo hikui chiten wa nan desu ka)
</syn>
<syn lang="tr">
(S louisiana daki en alcak nokta nedir)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the lowest-[Place:1] point-[Place:2] in-[Place:3] Louisiana-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(lowest(place(loc_2(stateid('louisiana')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,lowest(A,(place(A),loc(A,B),const(B,stateid(louisiana)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Place ) }) </node>
<node id="1"> *n:Place -> ({ lowest ( *n:Place ) }) </node>
<node id="2"> *n:Place -> ({ place ( *n:Place ) }) </node>
<node id="3"> *n:Place -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' louisiana ' }) </node>
</mrl-parse>
</example>

<example id="467">
<nl lang="en">
پایین ترین نقطه در ماساچوست کدامست ؟
</nl>
<nl lang="es">
que es el punto mas bajo en massachusetts ?
</nl>
<nl lang="ja">
masachuusettsu no mottomo hikui chiten wa nan desu ka ?
</nl>
<nl lang="tr">
massachusetts daki en alcak nokta nerededir ?
</nl>
<syn lang="en">
(S پایین ترین نقطه در ماساچوست کدامست ؟)
</syn>
<syn lang="es">
(S que es el punto mas bajo en massachusetts)
</syn>
<syn lang="ja">
(S masachuusettsu no mottomo hikui chiten wa nan desu ka)
</syn>
<syn lang="tr">
(S massachusetts daki en alcak nokta nerededir)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the lowest-[Place:1] point-[Place:2] in-[Place:3] Massachusetts-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(lowest(place(loc_2(stateid('massachusetts')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,lowest(A,(place(A),loc(A,B),const(B,stateid(massachusetts)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Place ) }) </node>
<node id="1"> *n:Place -> ({ lowest ( *n:Place ) }) </node>
<node id="2"> *n:Place -> ({ place ( *n:Place ) }) </node>
<node id="3"> *n:Place -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' massachusetts ' }) </node>
</mrl-parse>
</example>

<example id="468">
<nl lang="en">
پایین ترین نقطه در می سی سی پی کدامست ؟
</nl>
<syn lang="en">
(S پایین ترین نقطه در می سی سی پی کدامست ؟)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the lowest-[Place:1] point-[Place:2] in-[Place:3] Mississippi-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(lowest(place(loc_2(stateid('mississippi')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,lowest(A,(place(A),loc(A,B),const(B,stateid(mississippi)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Place ) }) </node>
<node id="1"> *n:Place -> ({ lowest ( *n:Place ) }) </node>
<node id="2"> *n:Place -> ({ place ( *n:Place ) }) </node>
<node id="3"> *n:Place -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' mississippi ' }) </node>
</mrl-parse>
</example>

<example id="469">
<nl lang="en">
ارتفاع کم ارتفاع ترین نقطه نبراسکا به متر چیست ؟
</nl>
<nl lang="es">
que es el punto mas bajo en nebraska en metros ?
</nl>
<nl lang="ja">
neburasuka no mottomo hikui chiten wa nan metoru desu ka ?
</nl>
<nl lang="tr">
nebraska daki en alcak nokta metre olarak nedir ?
</nl>
<syn lang="en">
(S ارتفاع کم ارتفاع ترین نقطه نبراسکا به متر چیست ؟)
</syn>
<syn lang="es">
(S que es el punto mas bajo en nebraska en metros)
</syn>
<syn lang="ja">
(S neburasuka no mottomo hikui chiten wa nan metoru desu ka)
</syn>
<syn lang="tr">
(S nebraska daki en alcak nokta metre olarak nedir)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the lowest-[Place:1] point-[Place:2] in-[Place:3] Nebraska-[StateName:5] in-[Place:1] meters-[Place:1])
</augsyn>
<mrl lang="geo-funql">
answer(lowest(place(loc_2(stateid('nebraska')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,lowest(A,(place(A),loc(A,B),const(B,stateid(nebraska)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Place ) }) </node>
<node id="1"> *n:Place -> ({ lowest ( *n:Place ) }) </node>
<node id="2"> *n:Place -> ({ place ( *n:Place ) }) </node>
<node id="3"> *n:Place -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' nebraska ' }) </node>
</mrl-parse>
</example>

<example id="470">
<nl lang="en">
نام پایین ترین نقطه اورگان چیست ؟
</nl>
<nl lang="es">
que es el punto mas bajo en oregon ?
</nl>
<nl lang="ja">
oregon no mottomo hikui chiten wa nan desu ka ?
</nl>
<nl lang="tr">
oregon daki en alcak nokta nedir ?
</nl>
<syn lang="en">
(S نام پایین ترین نقطه اورگان چیست ؟)
</syn>
<syn lang="es">
(S que es el punto mas bajo en oregon)
</syn>
<syn lang="ja">
(S oregon no mottomo hikui chiten wa nan desu ka)
</syn>
<syn lang="tr">
(S oregon daki en alcak nokta nedir)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the lowest-[Place:1] point-[Place:2] in-[Place:3] Oregon-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(lowest(place(loc_2(stateid('oregon')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,lowest(A,(place(A),loc(A,B),const(B,stateid(oregon)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Place ) }) </node>
<node id="1"> *n:Place -> ({ lowest ( *n:Place ) }) </node>
<node id="2"> *n:Place -> ({ place ( *n:Place ) }) </node>
<node id="3"> *n:Place -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' oregon ' }) </node>
</mrl-parse>
</example>

<example id="471">
<nl lang="en">
نام پایین ترین نقطه تگزاس چیست ؟
</nl>
<nl lang="es">
que es el punto mas bajo en texas ?
</nl>
<nl lang="ja">
tekisasu no mottomo hikui chiten wa nan desu ka ?
</nl>
<nl lang="tr">
texas daki en alcak nokta nerededir ?
</nl>
<syn lang="en">
(S نام پایین ترین نقطه تگزاس چیست ؟)
</syn>
<syn lang="es">
(S que es el punto mas bajo en texas)
</syn>
<syn lang="ja">
(S tekisasu no mottomo hikui chiten wa nan desu ka)
</syn>
<syn lang="tr">
(S texas daki en alcak nokta nerededir)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the lowest-[Place:1] point-[Place:2] in-[Place:3] Texas-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(lowest(place(loc_2(stateid('texas')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,lowest(A,(place(A),loc(A,B),const(B,stateid(texas)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Place ) }) </node>
<node id="1"> *n:Place -> ({ lowest ( *n:Place ) }) </node>
<node id="2"> *n:Place -> ({ place ( *n:Place ) }) </node>
<node id="3"> *n:Place -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' texas ' }) </node>
</mrl-parse>
</example>

<example id="472">
<nl lang="en">
نام پایینترین نقطه در ایالت کالیفرنیا چیست ؟
</nl>
<nl lang="es">
que es el punto mas bajo en el estado de california ?
</nl>
<nl lang="ja">
karifuorunia no shuu no mottomo hikui chiten wa nan desu ka ?
</nl>
<nl lang="tr">
california eyaletinin en alcak noktasi nedir ?
</nl>
<syn lang="en">
(S نام پایینترین نقطه در ایالت کالیفرنیا چیست ؟)
</syn>
<syn lang="es">
(S que es el punto mas bajo en el estado de california)
</syn>
<syn lang="ja">
(S karifuorunia no shuu no mottomo hikui chiten wa nan desu ka)
</syn>
<syn lang="tr">
(S california eyaletinin en alcak noktasi nedir)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the lowest-[Place:1] point-[Place:2] in-[Place:3] the state-[State:4] of-[State:4] California-[StateName:6])
</augsyn>
<mrl lang="geo-funql">
answer(lowest(place(loc_2(state(stateid('california'))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,lowest(A,(place(A),loc(A,B),state(B),const(B,stateid(california)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Place ) }) </node>
<node id="1"> *n:Place -> ({ lowest ( *n:Place ) }) </node>
<node id="2"> *n:Place -> ({ place ( *n:Place ) }) </node>
<node id="3"> *n:Place -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="6"> *n:StateName -> ({ ' california ' }) </node>
</mrl-parse>
</example>

<example id="473">
<nl lang="en">
پایین ترین نقطه در ایالت تگزاس کجاست ؟
</nl>
<nl lang="es">
que es el punto mas bajo en el estado de texas ?
</nl>
<nl lang="ja">
tekisasu no shuu no mottomo hikui chiten wa nan desu ka ?
</nl>
<nl lang="tr">
texas eyaletinin en alcak noktasi nedir ?
</nl>
<syn lang="en">
(S پایین ترین نقطه در ایالت تگزاس کجاست ؟)
</syn>
<syn lang="es">
(S que es el punto mas bajo en el estado de texas)
</syn>
<syn lang="ja">
(S tekisasu no shuu no mottomo hikui chiten wa nan desu ka)
</syn>
<syn lang="tr">
(S texas eyaletinin en alcak noktasi nedir)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the lowest-[Place:1] point-[Place:2] in-[Place:3] the state-[State:4] of-[State:4] Texas-[StateName:6])
</augsyn>
<mrl lang="geo-funql">
answer(lowest(place(loc_2(state(stateid('texas'))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,lowest(A,(place(A),loc(A,B),state(B),const(B,stateid(texas)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Place ) }) </node>
<node id="1"> *n:Place -> ({ lowest ( *n:Place ) }) </node>
<node id="2"> *n:Place -> ({ place ( *n:Place ) }) </node>
<node id="3"> *n:Place -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="6"> *n:StateName -> ({ ' texas ' }) </node>
</mrl-parse>
</example>

<example id="474">
<nl lang="en">
نام پایینترین نقطه در ایالات متحده چیست ؟
</nl>
<nl lang="es">
que es el punto mas bajo en los united states ?
</nl>
<nl lang="ja">
beikoku no mottomo hikui chiten wa nan desu ka ?
</nl>
<nl lang="tr">
birlesik devletler deki en alcak nokta nedir ?
</nl>
<syn lang="en">
(S نام پایینترین نقطه در ایالات متحده چیست ؟)
</syn>
<syn lang="es">
(S que es el punto mas bajo en los united states)
</syn>
<syn lang="ja">
(S beikoku no mottomo hikui chiten wa nan desu ka)
</syn>
<syn lang="tr">
(S birlesik devletler deki en alcak nokta nedir)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the lowest-[Place:1] point-[Place:2] in-[Place:3] the United-[CountryName:5] States-[CountryName:5])
</augsyn>
<mrl lang="geo-funql">
answer(lowest(place(loc_2(countryid('usa')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,lowest(A,(place(A),loc(A,B),const(B,countryid(usa)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Place ) }) </node>
<node id="1"> *n:Place -> ({ lowest ( *n:Place ) }) </node>
<node id="2"> *n:Place -> ({ place ( *n:Place ) }) </node>
<node id="3"> *n:Place -> ({ loc_2 ( *n:Country ) }) </node>
<node id="4"> *n:Country -> ({ countryid ( *n:CountryName ) }) </node>
<node id="5"> *n:CountryName -> ({ ' usa ' }) </node>
</mrl-parse>
</example>

<example id="475">
<nl lang="en">
نام پایینترین نقطه در ایالات متحده چیست ؟
</nl>
<syn lang="en">
(S نام پایینترین نقطه در ایالات متحده چیست ؟)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the lowest-[Place:1] point-[Place:2] in-[Place:3] USA-[CountryName:5])
</augsyn>
<mrl lang="geo-funql">
answer(lowest(place(loc_2(countryid('usa')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,lowest(A,(place(A),loc(A,B),const(B,countryid(usa)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Place ) }) </node>
<node id="1"> *n:Place -> ({ lowest ( *n:Place ) }) </node>
<node id="2"> *n:Place -> ({ place ( *n:Place ) }) </node>
<node id="3"> *n:Place -> ({ loc_2 ( *n:Country ) }) </node>
<node id="4"> *n:Country -> ({ countryid ( *n:CountryName ) }) </node>
<node id="5"> *n:CountryName -> ({ ' usa ' }) </node>
</mrl-parse>
</example>

<example id="476">
<nl lang="en">
نام پایینترین نقطه ویسکانسین چیست ؟
</nl>
<syn lang="en">
(S نام پایینترین نقطه ویسکانسین چیست ؟)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the lowest-[Place:1] point-[Place:2] in-[Place:3] Wisconsin-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(lowest(place(loc_2(stateid('wisconsin')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,lowest(A,(place(A),loc(A,B),const(B,stateid(wisconsin)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Place ) }) </node>
<node id="1"> *n:Place -> ({ lowest ( *n:Place ) }) </node>
<node id="2"> *n:Place -> ({ place ( *n:Place ) }) </node>
<node id="3"> *n:Place -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' wisconsin ' }) </node>
</mrl-parse>
</example>

<example id="477">
<nl lang="en">
تمام نقاط کم ارتفاعی را که رودخانه کلرادو از آنها عبور میکند نام ببر .
</nl>
<syn lang="en">
(S تمام نقاط کم ارتفاعی را که رودخانه کلرادو از آنها عبور میکند نام ببر .)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the lowest-[Place:1] point-[Place:2] of-[Place:3] all-[State:4] states-[State:4] through-[State:5] which the Colorado-[RiverName:8] river-[River:6] runs-[State:5] through-[State:5])
</augsyn>
<mrl lang="geo-funql">
answer(lowest(place(loc_2(state(traverse_1(river(riverid('colorado'))))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,lowest(A,(place(A),loc(A,B),state(B),const(C,riverid(colorado)),river(C),traverse(C,B))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Place ) }) </node>
<node id="1"> *n:Place -> ({ lowest ( *n:Place ) }) </node>
<node id="2"> *n:Place -> ({ place ( *n:Place ) }) </node>
<node id="3"> *n:Place -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ traverse_1 ( *n:River ) }) </node>
<node id="6"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="7"> *n:River -> ({ riverid ( *n:RiverName ) }) </node>
<node id="8"> *n:RiverName -> ({ ' colorado ' }) </node>
</mrl-parse>
</example>

<example id="478">
<nl lang="en">
نام پایینترین نقطه کلرادو چیست ؟
</nl>
<syn lang="en">
(S نام پایینترین نقطه کلرادو چیست ؟)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the lowest-[Place:1] point-[Place:2] of-[Place:3] Colorado-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(lowest(place(loc_2(stateid('colorado')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,lowest(A,(place(A),loc(A,B),const(B,stateid(colorado)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Place ) }) </node>
<node id="1"> *n:Place -> ({ lowest ( *n:Place ) }) </node>
<node id="2"> *n:Place -> ({ place ( *n:Place ) }) </node>
<node id="3"> *n:Place -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' colorado ' }) </node>
</mrl-parse>
</example>

<example id="479">
<nl lang="en">
نام کم ارتفاع ترین نقطه ایالتی که بیشترین مساحت را دارد چیست ؟
</nl>
<nl lang="es">
que es el punto mas bajo de el estado con la area mas grande ?
</nl>
<nl lang="ja">
mottomo ookii chiiki ga aru shuu no mottomo hikui chiten wa nan desu ka ?
</nl>
<nl lang="tr">
en genis alana sahip eyaletin en alcak noktasi nedir ?
</nl>
<syn lang="en">
(S نام کم ارتفاع ترین نقطه ایالتی که بیشترین مساحت را دارد چیست ؟)
</syn>
<syn lang="es">
(S que es el punto mas bajo de el estado con la area mas grande)
</syn>
<syn lang="ja">
(S mottomo ookii chiiki ga aru shuu no mottomo hikui chiten wa nan desu ka)
</syn>
<syn lang="tr">
(S en genis alana sahip eyaletin en alcak noktasi nedir)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the lowest-[Place:1] point-[Place:2] of-[Place:3] the state-[State:5] with-[State:4] the largest-[State:4] area-[State:4])
</augsyn>
<mrl lang="geo-funql">
answer(lowest(place(loc_2(largest_one(area_1(state(all)))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,lowest(A,(place(A),loc(A,B),largest(C,(state(B),area(B,C))))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Place ) }) </node>
<node id="1"> *n:Place -> ({ lowest ( *n:Place ) }) </node>
<node id="2"> *n:Place -> ({ place ( *n:Place ) }) </node>
<node id="3"> *n:Place -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ largest_one ( area_1 ( *n:State ) ) }) </node>
<node id="5"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="480">
<nl lang="en">
پایینترین نقطه در ایالات متحده کجاست ؟
</nl>
<nl lang="es">
que es el punto mas bajo de los us ?
</nl>
<nl lang="ja">
beikoku no mottomo hikui chiten wa nan desu ka ?
</nl>
<nl lang="tr">
us in en alcak noktasi nedir ?
</nl>
<syn lang="en">
(S پایینترین نقطه در ایالات متحده کجاست ؟)
</syn>
<syn lang="es">
(S que es el punto mas bajo de los us)
</syn>
<syn lang="ja">
(S beikoku no mottomo hikui chiten wa nan desu ka)
</syn>
<syn lang="tr">
(S us in en alcak noktasi nedir)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the lowest-[Place:1] point-[Place:2] of-[Place:3] the US-[CountryName:5])
</augsyn>
<mrl lang="geo-funql">
answer(lowest(place(loc_2(countryid('usa')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,lowest(A,(place(A),loc(A,B),const(B,countryid(usa)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Place ) }) </node>
<node id="1"> *n:Place -> ({ lowest ( *n:Place ) }) </node>
<node id="2"> *n:Place -> ({ place ( *n:Place ) }) </node>
<node id="3"> *n:Place -> ({ loc_2 ( *n:Country ) }) </node>
<node id="4"> *n:Country -> ({ countryid ( *n:CountryName ) }) </node>
<node id="5"> *n:CountryName -> ({ ' usa ' }) </node>
</mrl-parse>
</example>

<example id="481">
<nl lang="en">
شهرهای عمده مونتانا چیستند ؟
</nl>
<syn lang="en">
(S شهرهای عمده مونتانا چیستند ؟)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the major-[City:1] cities-[City:2] in-[City:3] Montana-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(major(city(loc_2(stateid('montana')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(major(A),city(A),loc(A,B),const(B,stateid(montana))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ major ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' montana ' }) </node>
</mrl-parse>
</example>

<example id="482">
<nl lang="en">
بالاترین ارتفاع در سانفرانسیسکو چقدر است ؟
</nl>
<syn lang="en">
(S بالاترین ارتفاع در سانفرانسیسکو چقدر است ؟)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the maximum-[Place:1] elevation-[Place:2] of-[Place:3] San-[CityName:5] Francisco-[CityName:5])
</augsyn>
<mrl lang="geo-funql">
answer(highest(place(loc_2(cityid('san francisco', _)))))
</mrl>
<mrl lang="geo-prolog">
answer(A,highest(A,(place(A),loc(A,B),const(B,cityid('san francisco',_)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Place ) }) </node>
<node id="1"> *n:Place -> ({ highest ( *n:Place ) }) </node>
<node id="2"> *n:Place -> ({ place ( *n:Place ) }) </node>
<node id="3"> *n:Place -> ({ loc_2 ( *n:City ) }) </node>
<node id="4"> *n:City -> ({ cityid ( *n:CityName , _ ) }) </node>
<node id="5"> *n:CityName -> ({ ' san francisco ' }) </node>
</mrl-parse>
</example>

<example id="483">
<nl lang="en">
پر تراکم ترین نقطه از نظر جمعیت در ایالات متحده کجاست ؟
</nl>
<syn lang="en">
(S پر تراکم ترین نقطه از نظر جمعیت در ایالات متحده کجاست ؟)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the most-[State:1] dense-[State:1] state-[State:2] in-[State:3] the USA-[CountryName:5])
</augsyn>
<mrl lang="geo-funql">
answer(largest_one(density_1(state(loc_2(countryid('usa'))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,largest(B,(density(A,B),state(A),loc(A,C),const(C,countryid(usa)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ largest_one ( density_1 ( *n:State ) ) }) </node>
<node id="2"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ loc_2 ( *n:Country ) }) </node>
<node id="4"> *n:Country -> ({ countryid ( *n:CountryName ) }) </node>
<node id="5"> *n:CountryName -> ({ ' usa ' }) </node>
</mrl-parse>
</example>

<example id="484">
<nl lang="en">
پرجمعیت ترین مرکز ایالت در ایالات متحده کجاست ؟
</nl>
<syn lang="en">
(S پرجمعیت ترین مرکز ایالت در ایالات متحده کجاست ؟)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the most-[City:1] populated-[City:1] capital-[City:2] in-[City:3] the USA-[CountryName:5])
</augsyn>
<mrl lang="geo-funql">
answer(largest_one(population_1(capital(loc_2(countryid('usa'))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,largest(B,(population(A,B),capital(A),loc(A,C),const(C,countryid(usa)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ largest_one ( population_1 ( *n:City ) ) }) </node>
<node id="2"> *n:City -> ({ capital ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ loc_2 ( *n:Country ) }) </node>
<node id="4"> *n:Country -> ({ countryid ( *n:CountryName ) }) </node>
<node id="5"> *n:CountryName -> ({ ' usa ' }) </node>
</mrl-parse>
</example>

<example id="485">
<nl lang="en">
پرجمعیت ترین استان هم مرز اکلاهما کجاست ؟
</nl>
<nl lang="es">
que es el estado mas poblado bordeando a oklahoma ?
</nl>
<nl lang="ja">
okurahoma ni rinsetsu suru mottomo ookii jinkou ga aru shuu wa nan desu ka ?
</nl>
<nl lang="tr">
oklahoma ya siniri olan en kalabalik eyalet nedir ?
</nl>
<syn lang="en">
(S پرجمعیت ترین استان هم مرز اکلاهما کجاست ؟)
</syn>
<syn lang="es">
(S que es el estado mas poblado bordeando a oklahoma)
</syn>
<syn lang="ja">
(S okurahoma ni rinsetsu suru mottomo ookii jinkou ga aru shuu wa nan desu ka)
</syn>
<syn lang="tr">
(S oklahoma ya siniri olan en kalabalik eyalet nedir)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the most-[State:1] populated-[State:1] state-[State:2] bordering-[State:3] Oklahoma-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(largest_one(population_1(state(next_to_2(stateid('oklahoma'))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,largest(B,(population(A,B),state(A),next_to(A,C),const(C,stateid(oklahoma)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ largest_one ( population_1 ( *n:State ) ) }) </node>
<node id="2"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' oklahoma ' }) </node>
</mrl-parse>
</example>

<example id="486">
<nl lang="en">
پرجمعیت ترین شهر چه نام دارد ؟
</nl>
<syn lang="en">
(S پرجمعیت ترین شهر چه نام دارد ؟)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the most-[City:1] populous-[City:1] city-[City:2])
</augsyn>
<mrl lang="geo-funql">
answer(largest_one(population_1(city(all))))
</mrl>
<mrl lang="geo-prolog">
answer(A,largest(B,(population(A,B),city(A))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ largest_one ( population_1 ( *n:City ) ) }) </node>
<node id="2"> *n:City -> ({ city ( all ) }) </node>
</mrl-parse>
</example>

<example id="487">
<nl lang="en">
پرجمعیت ترین شهر تگزاس کدام است ؟
</nl>
<syn lang="en">
(S پرجمعیت ترین شهر تگزاس کدام است ؟)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the most-[City:1] populous-[City:1] city-[City:2] in-[City:3] Texas-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(largest_one(population_1(city(loc_2(stateid('texas'))))))
</mrl>
<mrl lang="geo-prolog">
answer(B,largest(A,(population(B,A),city(B),loc(B,C),const(C,stateid(texas)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ largest_one ( population_1 ( *n:City ) ) }) </node>
<node id="2"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' texas ' }) </node>
</mrl-parse>
</example>

<example id="488">
<nl lang="en">
نام پرجمعیت ترین شهر در وایومینگ چیست ؟
</nl>
<syn lang="en">
(S نام پرجمعیت ترین شهر در وایومینگ چیست ؟)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the most-[City:1] populous-[City:1] city-[City:2] in-[City:3] Wyoming-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(largest_one(population_1(city(loc_2(stateid('wyoming'))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,largest(B,(population(A,B),city(A),loc(A,C),const(C,stateid(wyoming)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ largest_one ( population_1 ( *n:City ) ) }) </node>
<node id="2"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' wyoming ' }) </node>
</mrl-parse>
</example>

<example id="489">
<nl lang="en">
پرجمعیت ترین ایالت چه نام دارد ؟
</nl>
<nl lang="es">
que es el estado mas poblado ?
</nl>
<nl lang="ja">
mottomo jinkou no ooi shuu wa nan desu ka ?
</nl>
<nl lang="tr">
en kalabalik eyalet nedir ?
</nl>
<syn lang="en">
(S پرجمعیت ترین ایالت چه نام دارد ؟)
</syn>
<syn lang="es">
(S que es el estado mas poblado)
</syn>
<syn lang="ja">
(S mottomo jinkou no ooi shuu wa nan desu ka)
</syn>
<syn lang="tr">
(S en kalabalik eyalet nedir)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the most-[State:1] populous-[State:1] state-[State:2])
</augsyn>
<mrl lang="geo-funql">
answer(largest_one(population_1(state(all))))
</mrl>
<mrl lang="geo-prolog">
answer(A,largest(B,(population(A,B),state(A))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ largest_one ( population_1 ( *n:State ) ) }) </node>
<node id="2"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="490">
<nl lang="en">
پرجمعیت ترین ایالت در ایالات متحده کجاست ؟
</nl>
<syn lang="en">
(S پرجمعیت ترین ایالت در ایالات متحده کجاست ؟)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the most-[State:1] populous-[State:1] state-[State:2] in-[State:3] the US-[CountryName:5])
</augsyn>
<mrl lang="geo-funql">
answer(largest_one(population_1(state(loc_2(countryid('usa'))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,largest(B,(population(A,B),state(A),loc(A,C),const(C,countryid(usa)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ largest_one ( population_1 ( *n:State ) ) }) </node>
<node id="2"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ loc_2 ( *n:Country ) }) </node>
<node id="4"> *n:Country -> ({ countryid ( *n:CountryName ) }) </node>
<node id="5"> *n:CountryName -> ({ ' usa ' }) </node>
</mrl-parse>
</example>

<example id="491">
<nl lang="en">
پرجمعیت ترین ایالتی که میسیسیپی از آن میگذرد کدام است ؟
</nl>
<syn lang="en">
(S پرجمعیت ترین ایالتی که میسیسیپی از آن میگذرد کدام است ؟)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the most-[State:1] populous-[State:1] state-[State:2] through-[State:3] which the Mississippi-[RiverName:5] runs-[State:3])
</augsyn>
<mrl lang="geo-funql">
answer(largest_one(population_1(state(traverse_1(riverid('mississippi'))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,largest(B,(population(A,B),state(A),const(C,riverid(mississippi)),traverse(C,A))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ largest_one ( population_1 ( *n:State ) ) }) </node>
<node id="2"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ traverse_1 ( *n:River ) }) </node>
<node id="4"> *n:River -> ({ riverid ( *n:RiverName ) }) </node>
<node id="5"> *n:RiverName -> ({ ' mississippi ' }) </node>
</mrl-parse>
</example>

<example id="492">
<nl lang="en">
ایالتی که پایین ترین نقطه را دارد چه نام دارد ؟
</nl>
<syn lang="en">
(S ایالتی که پایین ترین نقطه را دارد چه نام دارد ؟)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the name-[Query:0] of-[Query:0] the state-[State:1] with-[State:2] the lowest-[Place:3] point-[Place:4])
</augsyn>
<mrl lang="geo-funql">
answer(state(loc_1(lowest(place(all)))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),loc(B,A),lowest(B,place(B))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ loc_1 ( *n:Place ) }) </node>
<node id="3"> *n:Place -> ({ lowest ( *n:Place ) }) </node>
<node id="4"> *n:Place -> ({ place ( all ) }) </node>
</mrl-parse>
</example>

<example id="493">
<nl lang="en">
تعداد ایالات همسایه کنتاکی چند تاست ؟
</nl>
<syn lang="en">
(S تعداد ایالات همسایه کنتاکی چند تاست ؟)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the number-[Num:1] of-[Num:1] neighboring-[State:3] states-[State:2] for-[State:3] Kentucky-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(count(state(next_to_2(stateid('kentucky')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,count(B,(state(B),next_to(B,C),const(C,stateid(kentucky))),A))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ count ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' kentucky ' }) </node>
</mrl-parse>
</example>

<example id="494">
<nl lang="en">
چگالی جمعیت در ایالت به مرکزیت آستین چقدر است ؟
</nl>
<syn lang="en">
(S چگالی جمعیت در ایالت به مرکزیت آستین چقدر است ؟)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the population-[Num:1] density-[Num:1] in-[Num:1] the state-[State:2] with-[State:3] capital-[City:4] Austin-[CityName:6])
</augsyn>
<mrl lang="geo-funql">
answer(density_1(state(loc_1(capital(cityid('austin', _))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(density(B,A),state(B),loc(C,B),capital(C),const(C,cityid(austin,_))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ density_1 ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ loc_1 ( *n:City ) }) </node>
<node id="4"> *n:City -> ({ capital ( *n:City ) }) </node>
<node id="5"> *n:City -> ({ cityid ( *n:CityName , _ ) }) </node>
<node id="6"> *n:CityName -> ({ ' austin ' }) </node>
</mrl-parse>
</example>

<example id="495">
<nl lang="en">
چگالی جمعیت مین چقدر است ؟
</nl>
<nl lang="es">
que es la densidad de poblacion de maine ?
</nl>
<nl lang="ja">
meen no jinkou no mitsudo wa nan desu ka ?
</nl>
<nl lang="tr">
maine in nufus yogunlugu nedir ?
</nl>
<syn lang="en">
(S چگالی جمعیت مین چقدر است ؟)
</syn>
<syn lang="es">
(S que es la densidad de poblacion de maine)
</syn>
<syn lang="ja">
(S meen no jinkou no mitsudo wa nan desu ka)
</syn>
<syn lang="tr">
(S maine in nufus yogunlugu nedir)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the population-[Num:1] density-[Num:1] of-[Num:1] Maine-[StateName:3])
</augsyn>
<mrl lang="geo-funql">
answer(density_1(stateid('maine')))
</mrl>
<mrl lang="geo-prolog">
answer(A,(density(B,A),const(B,stateid(maine))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ density_1 ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="3"> *n:StateName -> ({ ' maine ' }) </node>
</mrl-parse>
</example>

<example id="496">
<nl lang="en">
چگالی جمعیت داکوتای جنوبی چقدر است ؟
</nl>
<syn lang="en">
(S چگالی جمعیت داکوتای جنوبی چقدر است ؟)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the population-[Num:1] density-[Num:1] of-[Num:1] South-[StateName:3] Dakota-[StateName:3])
</augsyn>
<mrl lang="geo-funql">
answer(density_1(stateid('south dakota')))
</mrl>
<mrl lang="geo-prolog">
answer(A,(density(B,A),const(B,stateid('south dakota'))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ density_1 ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="3"> *n:StateName -> ({ ' south dakota ' }) </node>
</mrl-parse>
</example>

<example id="497">
<nl lang="en">
چگالی جمعیت تگزاس چقدر است ؟
</nl>
<nl lang="es">
que es la densidad de poblacion de texas ?
</nl>
<nl lang="ja">
tekisasu no jinkou no mitsudo wa nan desu ka ?
</nl>
<nl lang="tr">
texas in nufus yogunlugu nedir ?
</nl>
<syn lang="en">
(S چگالی جمعیت تگزاس چقدر است ؟)
</syn>
<syn lang="es">
(S que es la densidad de poblacion de texas)
</syn>
<syn lang="ja">
(S tekisasu no jinkou no mitsudo wa nan desu ka)
</syn>
<syn lang="tr">
(S texas in nufus yogunlugu nedir)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the population-[Num:1] density-[Num:1] of-[Num:1] Texas-[StateName:3])
</augsyn>
<mrl lang="geo-funql">
answer(density_1(stateid('texas')))
</mrl>
<mrl lang="geo-prolog">
answer(A,(density(B,A),const(B,stateid(texas))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ density_1 ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="3"> *n:StateName -> ({ ' texas ' }) </node>
</mrl-parse>
</example>

<example id="498">
<nl lang="en">
چگالی جمعیت بزرگترین ایالت چقدر است ؟
</nl>
<syn lang="en">
(S چگالی جمعیت بزرگترین ایالت چقدر است ؟)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the population-[Num:1] density-[Num:1] of-[Num:1] the largest-[State:2] state-[State:3])
</augsyn>
<mrl lang="geo-funql">
answer(density_1(largest(state(all))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(density(B,A),largest(B,state(B))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ density_1 ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ largest ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="499">
<nl lang="en">
چگالی جمعیت کوچکترین ایالت چقدر است ؟
</nl>
<nl lang="es">
que es la densidad de poblacion de el estado mas pequeno ?
</nl>
<nl lang="ja">
mottomo chiisai shuu no jinkou no mitsudo wa nan desu ka ?
</nl>
<nl lang="tr">
en kucuk eyaletin nufus yogunlugu nedir ?
</nl>
<syn lang="en">
(S چگالی جمعیت کوچکترین ایالت چقدر است ؟)
</syn>
<syn lang="es">
(S que es la densidad de poblacion de el estado mas pequeno)
</syn>
<syn lang="ja">
(S mottomo chiisai shuu no jinkou no mitsudo wa nan desu ka)
</syn>
<syn lang="tr">
(S en kucuk eyaletin nufus yogunlugu nedir)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the population-[Num:1] density-[Num:1] of-[Num:1] the smallest-[State:2] state-[State:3])
</augsyn>
<mrl lang="geo-funql">
answer(density_1(smallest(state(all))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(density(B,A),smallest(B,state(B))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ density_1 ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ smallest ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="500">
<nl lang="en">
چگالی جمعیت ایالتی که کمترین مساحت را دارد چقدر است ؟
</nl>
<syn lang="en">
(S چگالی جمعیت ایالتی که کمترین مساحت را دارد چقدر است ؟)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the population-[Num:1] density-[Num:1] of-[Num:1] the state-[State:3] with-[State:2] the smallest-[State:2] area-[State:2])
</augsyn>
<mrl lang="geo-funql">
answer(density_1(smallest_one(area_1(state(all)))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(density(B,A),smallest(C,(state(B),area(B,C)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ density_1 ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ smallest_one ( area_1 ( *n:State ) ) }) </node>
<node id="3"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="501">
<nl lang="en">
چگالی جمعیت ایالتی که کمترین جمعیت را دارد چقدر است ؟
</nl>
<syn lang="en">
(S چگالی جمعیت ایالتی که کمترین جمعیت را دارد چقدر است ؟)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the population-[Num:1] density-[Num:1] of-[Num:1] the state-[State:3] with-[State:2] the smallest-[State:2] population-[State:2])
</augsyn>
<mrl lang="geo-funql">
answer(density_1(smallest_one(population_1(state(all)))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(density(B,A),smallest(C,(state(B),population(B,C)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ density_1 ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ smallest_one ( population_1 ( *n:State ) ) }) </node>
<node id="3"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="502">
<nl lang="en">
تراکم جمعیت وایومینگ چقدر است ؟
</nl>
<nl lang="es">
que es la densidad de poblacion de wyoming ?
</nl>
<nl lang="ja">
waiomingu no jinkou no mitsudo wa nan desu ka ?
</nl>
<nl lang="tr">
wyoming in nufus yogunlugu nedir ?
</nl>
<syn lang="en">
(S تراکم جمعیت وایومینگ چقدر است ؟)
</syn>
<syn lang="es">
(S que es la densidad de poblacion de wyoming)
</syn>
<syn lang="ja">
(S waiomingu no jinkou no mitsudo wa nan desu ka)
</syn>
<syn lang="tr">
(S wyoming in nufus yogunlugu nedir)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the population-[Num:1] density-[Num:1] of-[Num:1] Wyoming-[StateName:3])
</augsyn>
<mrl lang="geo-funql">
answer(density_1(stateid('wyoming')))
</mrl>
<mrl lang="geo-prolog">
answer(A,(density(B,A),const(B,stateid(wyoming))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ density_1 ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="3"> *n:StateName -> ({ ' wyoming ' }) </node>
</mrl-parse>
</example>

<example id="503">
<nl lang="en">
جمعیت بوستون چقدر است ؟
</nl>
<syn lang="en">
(S جمعیت بوستون چقدر است ؟)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the population-[Num:1] in-[Num:1] Boston-[CityName:3])
</augsyn>
<mrl lang="geo-funql">
answer(population_1(cityid('boston', _)))
</mrl>
<mrl lang="geo-prolog">
answer(A,(population(B,A),const(B,cityid(boston,_))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ population_1 ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ cityid ( *n:CityName , _ ) }) </node>
<node id="3"> *n:CityName -> ({ ' boston ' }) </node>
</mrl-parse>
</example>

<example id="504">
<nl lang="en">
جمعیت آلاسکا چقدر است ؟
</nl>
<syn lang="en">
(S جمعیت آلاسکا چقدر است ؟)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the population-[Num:1] of-[Num:1] Alaska-[StateName:3])
</augsyn>
<mrl lang="geo-funql">
answer(population_1(stateid('alaska')))
</mrl>
<mrl lang="geo-prolog">
answer(A,(population(B,A),const(B,stateid(alaska))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ population_1 ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="3"> *n:StateName -> ({ ' alaska ' }) </node>
</mrl-parse>
</example>

<example id="505">
<nl lang="en">
جمعیت آریزونا چقدر است ؟
</nl>
<nl lang="es">
que es la poblacion de arizona ?
</nl>
<nl lang="ja">
arizona no jinkou wa nan desu ka ?
</nl>
<nl lang="tr">
arizona nun nufusu nedir ?
</nl>
<syn lang="en">
(S جمعیت آریزونا چقدر است ؟)
</syn>
<syn lang="es">
(S que es la poblacion de arizona)
</syn>
<syn lang="ja">
(S arizona no jinkou wa nan desu ka)
</syn>
<syn lang="tr">
(S arizona nun nufusu nedir)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the population-[Num:1] of-[Num:1] Arizona-[StateName:3])
</augsyn>
<mrl lang="geo-funql">
answer(population_1(stateid('arizona')))
</mrl>
<mrl lang="geo-prolog">
answer(A,(population(B,A),const(B,stateid(arizona))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ population_1 ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="3"> *n:StateName -> ({ ' arizona ' }) </node>
</mrl-parse>
</example>

<example id="506">
<nl lang="en">
جمعیت آتلانتا چقدر است ؟
</nl>
<syn lang="en">
(S جمعیت آتلانتا چقدر است ؟)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the population-[Num:1] of-[Num:1] Atlanta-[CityName:3])
</augsyn>
<mrl lang="geo-funql">
answer(population_1(cityid('atlanta', _)))
</mrl>
<mrl lang="geo-prolog">
answer(A,(population(B,A),const(B,cityid(atlanta,_))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ population_1 ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ cityid ( *n:CityName , _ ) }) </node>
<node id="3"> *n:CityName -> ({ ' atlanta ' }) </node>
</mrl-parse>
</example>

<example id="507">
<nl lang="en">
جمعیت آتلانتا ga چقدر است ؟
</nl>
<syn lang="en">
(S جمعیت آتلانتا ga چقدر است ؟)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the population-[Num:1] of-[Num:1] Atlanta-[CityName:3] GA-[StateAbbrev:4])
</augsyn>
<mrl lang="geo-funql">
answer(population_1(cityid('atlanta', 'ga')))
</mrl>
<mrl lang="geo-prolog">
answer(A,(population(B,A),const(B,cityid(atlanta,_))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ population_1 ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ cityid ( *n:CityName , *n:StateAbbrev ) }) </node>
<node id="3"> *n:CityName -> ({ ' atlanta ' }) </node>
<node id="4"> *n:StateAbbrev -> ({ ' ga ' }) </node>
</mrl-parse>
</example>

<example id="508">
<nl lang="en">
جمعیت آستین چقدر است ؟
</nl>
<syn lang="en">
(S جمعیت آستین چقدر است ؟)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the population-[Num:1] of-[Num:1] Austin-[CityName:3])
</augsyn>
<mrl lang="geo-funql">
answer(population_1(cityid('austin', _)))
</mrl>
<mrl lang="geo-prolog">
answer(A,(population(B,A),const(B,cityid(austin,_))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ population_1 ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ cityid ( *n:CityName , _ ) }) </node>
<node id="3"> *n:CityName -> ({ ' austin ' }) </node>
</mrl-parse>
</example>

<example id="509">
<nl lang="en">
جمعیت آستین تگزاس چقدر است ؟
</nl>
<syn lang="en">
(S جمعیت آستین تگزاس چقدر است ؟)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the population-[Num:1] of-[Num:1] Austin-[CityName:3] Texas-[StateAbbrev:4])
</augsyn>
<mrl lang="geo-funql">
answer(population_1(cityid('austin', 'tx')))
</mrl>
<mrl lang="geo-prolog">
answer(A,(population(B,A),const(B,cityid(austin,tx))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ population_1 ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ cityid ( *n:CityName , *n:StateAbbrev ) }) </node>
<node id="3"> *n:CityName -> ({ ' austin ' }) </node>
<node id="4"> *n:StateAbbrev -> ({ ' tx ' }) </node>
</mrl-parse>
</example>

<example id="510">
<nl lang="en">
جمعیت بوستون ماساچوست چقدر است ؟
</nl>
<nl lang="es">
que es la poblacion de boston massachusetts ?
</nl>
<nl lang="ja">
masachuusettsu no bosuton no jinkou wa nan desu ka ?
</nl>
<nl lang="tr">
boston massachusetts in nufusu nedir ?
</nl>
<syn lang="en">
(S جمعیت بوستون ماساچوست چقدر است ؟)
</syn>
<syn lang="es">
(S que es la poblacion de boston massachusetts)
</syn>
<syn lang="ja">
(S masachuusettsu no bosuton no jinkou wa nan desu ka)
</syn>
<syn lang="tr">
(S boston massachusetts in nufusu nedir)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the population-[Num:1] of-[Num:1] Boston-[CityName:3] Massachusetts-[StateAbbrev:4])
</augsyn>
<mrl lang="geo-funql">
answer(population_1(cityid('boston', 'ma')))
</mrl>
<mrl lang="geo-prolog">
answer(A,(population(B,A),const(B,cityid(boston,ma))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ population_1 ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ cityid ( *n:CityName , *n:StateAbbrev ) }) </node>
<node id="3"> *n:CityName -> ({ ' boston ' }) </node>
<node id="4"> *n:StateAbbrev -> ({ ' ma ' }) </node>
</mrl-parse>
</example>

<example id="511">
<nl lang="en">
جمعیت بولدر چقدر است ؟
</nl>
<syn lang="en">
(S جمعیت بولدر چقدر است ؟)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the population-[Num:1] of-[Num:1] Boulder-[CityName:3])
</augsyn>
<mrl lang="geo-funql">
answer(population_1(cityid('boulder', _)))
</mrl>
<mrl lang="geo-prolog">
answer(A,(population(B,A),const(B,cityid(boulder,_))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ population_1 ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ cityid ( *n:CityName , _ ) }) </node>
<node id="3"> *n:CityName -> ({ ' boulder ' }) </node>
</mrl-parse>
</example>

<example id="512">
<nl lang="en">
جمعیت کالیفرنیا چقدر است ؟
</nl>
<syn lang="en">
(S جمعیت کالیفرنیا چقدر است ؟)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the population-[Num:1] of-[Num:1] California-[StateName:3])
</augsyn>
<mrl lang="geo-funql">
answer(population_1(stateid('california')))
</mrl>
<mrl lang="geo-prolog">
answer(A,(population(B,A),const(B,stateid(california))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ population_1 ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="3"> *n:StateName -> ({ ' california ' }) </node>
</mrl-parse>
</example>

<example id="513">
<nl lang="en">
جمعیت دالاس چقدر است ؟
</nl>
<nl lang="es">
que es la poblacion de dallas ?
</nl>
<nl lang="ja">
darasu no jinkou wa nan desu ka ?
</nl>
<nl lang="tr">
dallas in nufusu nedir ?
</nl>
<syn lang="en">
(S جمعیت دالاس چقدر است ؟)
</syn>
<syn lang="es">
(S que es la poblacion de dallas)
</syn>
<syn lang="ja">
(S darasu no jinkou wa nan desu ka)
</syn>
<syn lang="tr">
(S dallas in nufusu nedir)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the population-[Num:1] of-[Num:1] Dallas-[CityName:3])
</augsyn>
<mrl lang="geo-funql">
answer(population_1(cityid('dallas', _)))
</mrl>
<mrl lang="geo-prolog">
answer(A,(population(B,A),const(B,cityid(dallas,_))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ population_1 ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ cityid ( *n:CityName , _ ) }) </node>
<node id="3"> *n:CityName -> ({ ' dallas ' }) </node>
</mrl-parse>
</example>

<example id="514">
<nl lang="en">
جمعیت دنور چقدر است ؟
</nl>
<syn lang="en">
(S جمعیت دنور چقدر است ؟)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the population-[Num:1] of-[Num:1] Denver-[CityName:3])
</augsyn>
<mrl lang="geo-funql">
answer(population_1(cityid('denver', _)))
</mrl>
<mrl lang="geo-prolog">
answer(A,(population(B,A),const(B,cityid(denver,_))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ population_1 ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ cityid ( *n:CityName , _ ) }) </node>
<node id="3"> *n:CityName -> ({ ' denver ' }) </node>
</mrl-parse>
</example>

<example id="515">
<nl lang="en">
جمعیت پنسیلوانیا چقدر است ؟
</nl>
<nl lang="es">
que es la poblacion de erie pennsylvania ?
</nl>
<nl lang="ja">
penshirubenia no eri no jinkou wa nan desu ka ?
</nl>
<nl lang="tr">
erie pennsylvania in nufusu nedir ?
</nl>
<syn lang="en">
(S جمعیت پنسیلوانیا چقدر است ؟)
</syn>
<syn lang="es">
(S que es la poblacion de erie pennsylvania)
</syn>
<syn lang="ja">
(S penshirubenia no eri no jinkou wa nan desu ka)
</syn>
<syn lang="tr">
(S erie pennsylvania in nufusu nedir)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the population-[Num:1] of-[Num:1] Erie-[CityName:3] Pennsylvania-[StateAbbrev:4])
</augsyn>
<mrl lang="geo-funql">
answer(population_1(cityid('erie', 'pa')))
</mrl>
<mrl lang="geo-prolog">
answer(A,(population(B,A),const(B,cityid(erie,pa))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ population_1 ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ cityid ( *n:CityName , *n:StateAbbrev ) }) </node>
<node id="3"> *n:CityName -> ({ ' erie ' }) </node>
<node id="4"> *n:StateAbbrev -> ({ ' pa ' }) </node>
</mrl-parse>
</example>

<example id="516">
<nl lang="en">
جمعیت هاوایی چقدر است ؟
</nl>
<nl lang="es">
que es la poblacion de hawaii ?
</nl>
<nl lang="ja">
hawai no jinkou wa nan desu ka ?
</nl>
<nl lang="tr">
hawaii nun nufusu nedir ?
</nl>
<syn lang="en">
(S جمعیت هاوایی چقدر است ؟)
</syn>
<syn lang="es">
(S que es la poblacion de hawaii)
</syn>
<syn lang="ja">
(S hawai no jinkou wa nan desu ka)
</syn>
<syn lang="tr">
(S hawaii nun nufusu nedir)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the population-[Num:1] of-[Num:1] Hawaii-[StateName:3])
</augsyn>
<mrl lang="geo-funql">
answer(population_1(stateid('hawaii')))
</mrl>
<mrl lang="geo-prolog">
answer(A,(population(B,A),const(B,stateid(hawaii))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ population_1 ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="3"> *n:StateName -> ({ ' hawaii ' }) </node>
</mrl-parse>
</example>

<example id="517">
<nl lang="en">
جمعیت هوستون چقدر است ؟
</nl>
<syn lang="en">
(S جمعیت هوستون چقدر است ؟)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the population-[Num:1] of-[Num:1] Houston-[CityName:3])
</augsyn>
<mrl lang="geo-funql">
answer(population_1(cityid('houston', _)))
</mrl>
<mrl lang="geo-prolog">
answer(A,(population(B,A),const(B,cityid(houston,_))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ population_1 ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ cityid ( *n:CityName , _ ) }) </node>
<node id="3"> *n:CityName -> ({ ' houston ' }) </node>
</mrl-parse>
</example>

<example id="518">
<nl lang="en">
جمعیت آیداهو چقدر است ؟
</nl>
<nl lang="es">
que es la poblacion de idaho ?
</nl>
<nl lang="ja">
aidahou no jinkou wa nan desu ka ?
</nl>
<nl lang="tr">
idaho nun nufusu nedir ?
</nl>
<syn lang="en">
(S جمعیت آیداهو چقدر است ؟)
</syn>
<syn lang="es">
(S que es la poblacion de idaho)
</syn>
<syn lang="ja">
(S aidahou no jinkou wa nan desu ka)
</syn>
<syn lang="tr">
(S idaho nun nufusu nedir)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the population-[Num:1] of-[Num:1] Idaho-[StateName:3])
</augsyn>
<mrl lang="geo-funql">
answer(population_1(stateid('idaho')))
</mrl>
<mrl lang="geo-prolog">
answer(A,(population(B,A),const(B,stateid(idaho))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ population_1 ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="3"> *n:StateName -> ({ ' idaho ' }) </node>
</mrl-parse>
</example>

<example id="519">
<nl lang="en">
جمعیت ایلینوی چقدر است ؟
</nl>
<nl lang="es">
que es la poblacion de illinois ?
</nl>
<nl lang="ja">
irinoi no jinkou wa nan desu ka ?
</nl>
<nl lang="tr">
illinois nun nufusu nedir ?
</nl>
<syn lang="en">
(S جمعیت ایلینوی چقدر است ؟)
</syn>
<syn lang="es">
(S que es la poblacion de illinois)
</syn>
<syn lang="ja">
(S irinoi no jinkou wa nan desu ka)
</syn>
<syn lang="tr">
(S illinois nun nufusu nedir)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the population-[Num:1] of-[Num:1] Illinois-[StateName:3])
</augsyn>
<mrl lang="geo-funql">
answer(population_1(stateid('illinois')))
</mrl>
<mrl lang="geo-prolog">
answer(A,(population(B,A),const(B,stateid(illinois))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ population_1 ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="3"> *n:StateName -> ({ ' illinois ' }) </node>
</mrl-parse>
</example>

<example id="520">
<nl lang="en">
جمعیت مین چقدر است ؟
</nl>
<syn lang="en">
(S جمعیت مین چقدر است ؟)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the population-[Num:1] of-[Num:1] Maine-[StateName:3])
</augsyn>
<mrl lang="geo-funql">
answer(population_1(stateid('maine')))
</mrl>
<mrl lang="geo-prolog">
answer(A,(population(B,A),const(B,stateid(maine))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ population_1 ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="3"> *n:StateName -> ({ ' maine ' }) </node>
</mrl-parse>
</example>

<example id="521">
<nl lang="en">
جمعیت مریلند چقدر است ؟
</nl>
<syn lang="en">
(S جمعیت مریلند چقدر است ؟)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the population-[Num:1] of-[Num:1] Maryland-[StateName:3])
</augsyn>
<mrl lang="geo-funql">
answer(population_1(stateid('maryland')))
</mrl>
<mrl lang="geo-prolog">
answer(A,(population(B,A),const(B,stateid(maryland))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ population_1 ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="3"> *n:StateName -> ({ ' maryland ' }) </node>
</mrl-parse>
</example>

<example id="522">
<nl lang="en">
جمعیت مینه سوتا چقدر است ؟
</nl>
<syn lang="en">
(S جمعیت مینه سوتا چقدر است ؟)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the population-[Num:1] of-[Num:1] Minnesota-[StateName:3])
</augsyn>
<mrl lang="geo-funql">
answer(population_1(stateid('minnesota')))
</mrl>
<mrl lang="geo-prolog">
answer(A,(population(B,A),const(B,stateid(minnesota))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ population_1 ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="3"> *n:StateName -> ({ ' minnesota ' }) </node>
</mrl-parse>
</example>

<example id="523">
<nl lang="en">
جمعیت مونتانا چقدر است ؟
</nl>
<nl lang="es">
que es la poblacion de montana ?
</nl>
<nl lang="ja">
montana no jinkou wa nan desu ka ?
</nl>
<nl lang="tr">
montana in nufusu nedir ?
</nl>
<syn lang="en">
(S جمعیت مونتانا چقدر است ؟)
</syn>
<syn lang="es">
(S que es la poblacion de montana)
</syn>
<syn lang="ja">
(S montana no jinkou wa nan desu ka)
</syn>
<syn lang="tr">
(S montana in nufusu nedir)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the population-[Num:1] of-[Num:1] Montana-[StateName:3])
</augsyn>
<mrl lang="geo-funql">
answer(population_1(stateid('montana')))
</mrl>
<mrl lang="geo-prolog">
answer(A,(population(B,A),const(B,stateid(montana))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ population_1 ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="3"> *n:StateName -> ({ ' montana ' }) </node>
</mrl-parse>
</example>

<example id="524">
<nl lang="en">
جمعیت نیومکزیکو چقدر است ؟
</nl>
<syn lang="en">
(S جمعیت نیومکزیکو چقدر است ؟)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the population-[Num:1] of-[Num:1] New-[StateName:3] Mexico-[StateName:3])
</augsyn>
<mrl lang="geo-funql">
answer(population_1(stateid('new mexico')))
</mrl>
<mrl lang="geo-prolog">
answer(A,(population(B,A),const(B,stateid('new mexico'))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ population_1 ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="3"> *n:StateName -> ({ ' new mexico ' }) </node>
</mrl-parse>
</example>

<example id="525">
<nl lang="en">
جمعیت نیویورک چقدر است ؟
</nl>
<syn lang="en">
(S جمعیت نیویورک چقدر است ؟)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the population-[Num:1] of-[Num:1] New-[StateName:3] York-[StateName:3])
</augsyn>
<mrl lang="geo-funql">
answer(population_1(stateid('new york')))
</mrl>
<mrl lang="geo-prolog">
answer(A,(population(B,A),const(B,stateid('new york'))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ population_1 ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="3"> *n:StateName -> ({ ' new york ' }) </node>
</mrl-parse>
</example>

<example id="526">
<nl lang="en">
جمعیت شهر نیویورک چقدر است .
</nl>
<nl lang="es">
que es la poblacion de la ciudad new york ?
</nl>
<nl lang="ja">
nyuu yooku toshi no jinkou wa nan desu ka ?
</nl>
<nl lang="tr">
new york sehrinin nufusu nedir ?
</nl>
<syn lang="en">
(S جمعیت شهر نیویورک چقدر است .)
</syn>
<syn lang="es">
(S que es la poblacion de la ciudad new_york)
</syn>
<syn lang="ja">
(S nyuu_yooku toshi no jinkou wa nan desu ka)
</syn>
<syn lang="tr">
(S new_york sehrinin nufusu nedir)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the population-[Num:1] of-[Num:1] New-[CityName:4] York-[CityName:4] City-[City:2])
</augsyn>
<mrl lang="geo-funql">
answer(population_1(city(cityid('new york', _))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(population(B,A),const(B,cityid('new york',_))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ population_1 ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ cityid ( *n:CityName , _ ) }) </node>
<node id="4"> *n:CityName -> ({ ' new york ' }) </node>
</mrl-parse>
</example>

<example id="527">
<nl lang="en">
جمعیت اورگان چقدر است ؟
</nl>
<nl lang="es">
que es la poblacion de oregon ?
</nl>
<nl lang="ja">
oregon no jinkou wa nan desu ka ?
</nl>
<nl lang="tr">
oregon nun nufusu nedir ?
</nl>
<syn lang="en">
(S جمعیت اورگان چقدر است ؟)
</syn>
<syn lang="es">
(S que es la poblacion de oregon)
</syn>
<syn lang="ja">
(S oregon no jinkou wa nan desu ka)
</syn>
<syn lang="tr">
(S oregon nun nufusu nedir)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the population-[Num:1] of-[Num:1] Oregon-[StateName:3])
</augsyn>
<mrl lang="geo-funql">
answer(population_1(stateid('oregon')))
</mrl>
<mrl lang="geo-prolog">
answer(A,(population(B,A),const(B,stateid(oregon))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ population_1 ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="3"> *n:StateName -> ({ ' oregon ' }) </node>
</mrl-parse>
</example>

<example id="528">
<nl lang="en">
جمعیت پورتلند مین چقدر است ؟
</nl>
<nl lang="es">
que es la poblacion de portland maine ?
</nl>
<nl lang="ja">
meen no porutorando no jinkou wa nan desu ka ?
</nl>
<nl lang="tr">
portland maine in nufusu nedir ?
</nl>
<syn lang="en">
(S جمعیت پورتلند مین چقدر است ؟)
</syn>
<syn lang="es">
(S que es la poblacion de portland maine)
</syn>
<syn lang="ja">
(S meen no porutorando no jinkou wa nan desu ka)
</syn>
<syn lang="tr">
(S portland maine in nufusu nedir)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the population-[Num:1] of-[Num:1] Portland-[CityName:3] Maine-[StateAbbrev:4])
</augsyn>
<mrl lang="geo-funql">
answer(population_1(cityid('portland', 'me')))
</mrl>
<mrl lang="geo-prolog">
answer(A,(population(B,A),const(B,cityid(portland,me))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ population_1 ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ cityid ( *n:CityName , *n:StateAbbrev ) }) </node>
<node id="3"> *n:CityName -> ({ ' portland ' }) </node>
<node id="4"> *n:StateAbbrev -> ({ ' me ' }) </node>
</mrl-parse>
</example>

<example id="529">
<nl lang="en">
جمعیت رود آیلند چقدر است ؟
</nl>
<syn lang="en">
(S جمعیت رود آیلند چقدر است ؟)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the population-[Num:1] of-[Num:1] Rhode-[StateName:3] Island-[StateName:3])
</augsyn>
<mrl lang="geo-funql">
answer(population_1(stateid('rhode island')))
</mrl>
<mrl lang="geo-prolog">
answer(A,(population(B,A),const(B,stateid('rhode island'))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ population_1 ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="3"> *n:StateName -> ({ ' rhode island ' }) </node>
</mrl-parse>
</example>

<example id="530">
<nl lang="en">
جمعیت ساکرامنتو چقدر است ؟
</nl>
<syn lang="en">
(S جمعیت ساکرامنتو چقدر است ؟)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the population-[Num:1] of-[Num:1] Sacramento-[CityName:3])
</augsyn>
<mrl lang="geo-funql">
answer(population_1(cityid('sacramento', _)))
</mrl>
<mrl lang="geo-prolog">
answer(A,(population(B,A),const(B,cityid(sacramento,_))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ population_1 ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ cityid ( *n:CityName , _ ) }) </node>
<node id="3"> *n:CityName -> ({ ' sacramento ' }) </node>
</mrl-parse>
</example>

<example id="531">
<nl lang="en">
جمعیت سن آنتونیو چقدر است ؟
</nl>
<nl lang="es">
que es la poblacion de san antonio ?
</nl>
<nl lang="ja">
sanantonio no jinkou wa nan desu ka ?
</nl>
<nl lang="tr">
san antonio nun nufusu nedir ?
</nl>
<syn lang="en">
(S جمعیت سن آنتونیو چقدر است ؟)
</syn>
<syn lang="es">
(S que es la poblacion de san_antonio)
</syn>
<syn lang="ja">
(S sanantonio no jinkou wa nan desu ka)
</syn>
<syn lang="tr">
(S san_antonio nun nufusu nedir)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the population-[Num:1] of-[Num:1] San-[CityName:3] Antonio-[CityName:3])
</augsyn>
<mrl lang="geo-funql">
answer(population_1(cityid('san antonio', _)))
</mrl>
<mrl lang="geo-prolog">
answer(A,(population(B,A),const(B,cityid('san antonio',_))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ population_1 ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ cityid ( *n:CityName , _ ) }) </node>
<node id="3"> *n:CityName -> ({ ' san antonio ' }) </node>
</mrl-parse>
</example>

<example id="532">
<nl lang="en">
جمعیت سیاتل چقدر است ؟
</nl>
<syn lang="en">
(S جمعیت سیاتل چقدر است ؟)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the population-[Num:1] of-[Num:1] Seattle-[CityName:3])
</augsyn>
<mrl lang="geo-funql">
answer(population_1(cityid('seattle', _)))
</mrl>
<mrl lang="geo-prolog">
answer(A,(population(B,A),const(B,cityid(seattle,_))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ population_1 ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ cityid ( *n:CityName , _ ) }) </node>
<node id="3"> *n:CityName -> ({ ' seattle ' }) </node>
</mrl-parse>
</example>

<example id="533">
<nl lang="en">
جمعیت سیاتل واشنگتن چقدر است ؟
</nl>
<nl lang="es">
que es la poblacion de seattle washington ?
</nl>
<nl lang="ja">
washinton no shiatoru no jinkou wa nan desu ka ?
</nl>
<nl lang="tr">
seattle washington in nufusu nedir ?
</nl>
<syn lang="en">
(S جمعیت سیاتل واشنگتن چقدر است ؟)
</syn>
<syn lang="es">
(S que es la poblacion de seattle washington)
</syn>
<syn lang="ja">
(S washinton no shiatoru no jinkou wa nan desu ka)
</syn>
<syn lang="tr">
(S seattle washington in nufusu nedir)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the population-[Num:1] of-[Num:1] Seattle-[CityName:3] Washington-[StateAbbrev:4])
</augsyn>
<mrl lang="geo-funql">
answer(population_1(cityid('seattle', 'wa')))
</mrl>
<mrl lang="geo-prolog">
answer(A,(population(B,A),const(B,cityid(seattle,wa))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ population_1 ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ cityid ( *n:CityName , *n:StateAbbrev ) }) </node>
<node id="3"> *n:CityName -> ({ ' seattle ' }) </node>
<node id="4"> *n:StateAbbrev -> ({ ' wa ' }) </node>
</mrl-parse>
</example>

<example id="534">
<nl lang="en">
جمعیت داکوتای جنوبی چقدر است ؟
</nl>
<nl lang="es">
que es la poblacion de south dakota ?
</nl>
<nl lang="ja">
sausu dakota no jinkou wa nan desu ka ?
</nl>
<nl lang="tr">
south dakota nun nufusu nedir ?
</nl>
<syn lang="en">
(S جمعیت داکوتای جنوبی چقدر است ؟)
</syn>
<syn lang="es">
(S que es la poblacion de south_dakota)
</syn>
<syn lang="ja">
(S sausu_dakota no jinkou wa nan desu ka)
</syn>
<syn lang="tr">
(S south_dakota nun nufusu nedir)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the population-[Num:1] of-[Num:1] South-[StateName:3] Dakota-[StateName:3])
</augsyn>
<mrl lang="geo-funql">
answer(population_1(stateid('south dakota')))
</mrl>
<mrl lang="geo-prolog">
answer(A,(population(B,A),const(B,stateid('south dakota'))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ population_1 ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="3"> *n:StateName -> ({ ' south dakota ' }) </node>
</mrl-parse>
</example>

<example id="535">
<nl lang="en">
جمعیت اسپرینگفیلد میسوری چقدر است ؟
</nl>
<nl lang="es">
que es la poblacion de springfield missouri ?
</nl>
<nl lang="ja">
mizuuri no supuringufiirudo no jinkou wa nan desu ka ?
</nl>
<nl lang="tr">
springfield missouri in nufusu nedir ?
</nl>
<syn lang="en">
(S جمعیت اسپرینگفیلد میسوری چقدر است ؟)
</syn>
<syn lang="es">
(S que es la poblacion de springfield missouri)
</syn>
<syn lang="ja">
(S mizuuri no supuringufiirudo no jinkou wa nan desu ka)
</syn>
<syn lang="tr">
(S springfield missouri in nufusu nedir)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the population-[Num:1] of-[Num:1] Springfield-[CityName:3] Missouri-[StateAbbrev:4])
</augsyn>
<mrl lang="geo-funql">
answer(population_1(cityid('springfield', 'mo')))
</mrl>
<mrl lang="geo-prolog">
answer(A,(population(B,A),const(B,cityid(springfield,mo))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ population_1 ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ cityid ( *n:CityName , *n:StateAbbrev ) }) </node>
<node id="3"> *n:CityName -> ({ ' springfield ' }) </node>
<node id="4"> *n:StateAbbrev -> ({ ' mo ' }) </node>
</mrl-parse>
</example>

<example id="536">
<nl lang="en">
جمعیت اسپرینگفیلد داکوتای جنوبی چقدر است ؟
</nl>
<syn lang="en">
(S جمعیت اسپرینگفیلد داکوتای جنوبی چقدر است ؟)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the population-[Num:1] of-[Num:1] Springfield-[CityName:3] South-[StateAbbrev:4] Dakota-[StateAbbrev:4])
</augsyn>
<mrl lang="geo-funql">
answer(population_1(cityid('springfield', 'sd')))
</mrl>
<mrl lang="geo-prolog">
answer(A,(population(B,A),const(B,cityid(springfield,sd))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ population_1 ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ cityid ( *n:CityName , *n:StateAbbrev ) }) </node>
<node id="3"> *n:CityName -> ({ ' springfield ' }) </node>
<node id="4"> *n:StateAbbrev -> ({ ' sd ' }) </node>
</mrl-parse>
</example>

<example id="537">
<nl lang="en">
جمعیت تمپه آریزونا چقدر است ؟
</nl>
<nl lang="es">
que es la poblacion de tempe arizona ?
</nl>
<nl lang="ja">
arizona no tenpi no jinkou wa nan desu ka ?
</nl>
<nl lang="tr">
tempe arizona in nufusu nedir ?
</nl>
<syn lang="en">
(S جمعیت تمپه آریزونا چقدر است ؟)
</syn>
<syn lang="es">
(S que es la poblacion de tempe arizona)
</syn>
<syn lang="ja">
(S arizona no tenpi no jinkou wa nan desu ka)
</syn>
<syn lang="tr">
(S tempe arizona in nufusu nedir)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the population-[Num:1] of-[Num:1] Tempe-[CityName:3] Arizona-[StateAbbrev:4])
</augsyn>
<mrl lang="geo-funql">
answer(population_1(cityid('tempe', 'az')))
</mrl>
<mrl lang="geo-prolog">
answer(A,(population(B,A),const(B,cityid(tempe,az))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ population_1 ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ cityid ( *n:CityName , *n:StateAbbrev ) }) </node>
<node id="3"> *n:CityName -> ({ ' tempe ' }) </node>
<node id="4"> *n:StateAbbrev -> ({ ' az ' }) </node>
</mrl-parse>
</example>

<example id="538">
<nl lang="en">
جمعیت تگزاس چقدر است ؟
</nl>
<nl lang="es">
que es la poblacion de texas ?
</nl>
<nl lang="ja">
tekisasu no jinkou wa nan desu ka ?
</nl>
<nl lang="tr">
texas nun nufusu nedir ?
</nl>
<syn lang="en">
(S جمعیت تگزاس چقدر است ؟)
</syn>
<syn lang="es">
(S que es la poblacion de texas)
</syn>
<syn lang="ja">
(S tekisasu no jinkou wa nan desu ka)
</syn>
<syn lang="tr">
(S texas nun nufusu nedir)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the population-[Num:1] of-[Num:1] Texas-[StateName:3])
</augsyn>
<mrl lang="geo-funql">
answer(population_1(stateid('texas')))
</mrl>
<mrl lang="geo-prolog">
answer(A,(population(B,A),const(B,stateid(texas))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ population_1 ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="3"> *n:StateName -> ({ ' texas ' }) </node>
</mrl-parse>
</example>

<example id="539">
<nl lang="en">
جمعیت پایتخت بزرگترین ایالت چقدر است ؟
</nl>
<syn lang="en">
(S جمعیت پایتخت بزرگترین ایالت چقدر است ؟)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the population-[Num:1] of-[Num:1] the capital-[City:2] of-[City:3] the largest-[State:4] state-[State:5])
</augsyn>
<mrl lang="geo-funql">
answer(population_1(capital(loc_2(largest(state(all))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(population(B,A),capital(B),loc(B,C),largest(C,state(C))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ population_1 ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ capital ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ largest ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="540">
<nl lang="en">
جمعیت پایتخت بزرگترین ایالت که میسیسیپی از آن میگذرد چقدر است ؟
</nl>
<syn lang="en">
(S جمعیت پایتخت بزرگترین ایالت که میسیسیپی از آن میگذرد چقدر است ؟)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the population-[Num:1] of-[Num:1] the capital-[City:2] of-[City:3] the largest-[State:4] state-[State:5] through-[State:6] which the Mississippi-[RiverName:8] runs-[State:6])
</augsyn>
<mrl lang="geo-funql">
answer(population_1(capital(loc_2(largest(state(traverse_1(riverid('mississippi'))))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(population(B,A),capital(B),loc(B,C),largest(C,(state(C),const(D,riverid(mississippi)),traverse(D,C)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ population_1 ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ capital ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ largest ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="6"> *n:State -> ({ traverse_1 ( *n:River ) }) </node>
<node id="7"> *n:River -> ({ riverid ( *n:RiverName ) }) </node>
<node id="8"> *n:RiverName -> ({ ' mississippi ' }) </node>
</mrl-parse>
</example>

<example id="541">
<nl lang="en">
جمعیت پایتخت کوچکترین ایالت چقدر است ؟
</nl>
<nl lang="es">
que es la poblacion de la capital de el estado mas pequeno ?
</nl>
<nl lang="ja">
mottomo chiisai shuu no shuto no jinkou wa nan desu ka ?
</nl>
<nl lang="tr">
en kucuk eyaletin baskentinin nufusu nedir ?
</nl>
<syn lang="en">
(S جمعیت پایتخت کوچکترین ایالت چقدر است ؟)
</syn>
<syn lang="es">
(S que es la poblacion de la capital de el estado mas pequeno)
</syn>
<syn lang="ja">
(S mottomo chiisai shuu no shuto no jinkou wa nan desu ka)
</syn>
<syn lang="tr">
(S en kucuk eyaletin baskentinin nufusu nedir)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the population-[Num:1] of-[Num:1] the capital-[City:2] of-[City:3] the smallest-[State:4] state-[State:5])
</augsyn>
<mrl lang="geo-funql">
answer(population_1(capital(loc_2(smallest(state(all))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(population(B,A),capital(B),loc(B,C),smallest(C,state(C))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ population_1 ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ capital ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ smallest ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="542">
<nl lang="en">
جمعیت بزرگترین شهر ایالت دارای بیشترین وسعت چقدر است ؟
</nl>
<syn lang="en">
(S جمعیت بزرگترین شهر ایالت دارای بیشترین وسعت چقدر است ؟)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the population-[Num:1] of-[Num:1] the largest-[City:2] city-[City:3] in-[City:4] the state-[State:6] with-[State:5] the largest-[State:5] area-[State:5])
</augsyn>
<mrl lang="geo-funql">
answer(population_1(largest(city(loc_2(largest_one(area_1(state(all))))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(population(B,A),largest(B,(city(B),loc(B,C),largest(D,(state(C),area(C,D)))))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ population_1 ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ largest ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="4"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ largest_one ( area_1 ( *n:State ) ) }) </node>
<node id="6"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="543">
<nl lang="en">
جمعیت بزرگترین ایالت چقدر است ؟
</nl>
<syn lang="en">
(S جمعیت بزرگترین ایالت چقدر است ؟)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the population-[Num:1] of-[Num:1] the largest-[State:2] state-[State:3])
</augsyn>
<mrl lang="geo-funql">
answer(population_1(largest(state(all))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(population(B,A),largest(B,state(B))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ population_1 ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ largest ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="544">
<nl lang="en">
جمعیت بزرگترین ایالت هم مرز تگزاس چیست ؟
</nl>
<syn lang="en">
(S جمعیت بزرگترین ایالت هم مرز تگزاس چیست ؟)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the population-[Num:1] of-[Num:1] the largest-[State:2] state-[State:3] that borders-[State:4] Texas-[StateName:6])
</augsyn>
<mrl lang="geo-funql">
answer(population_1(largest(state(next_to_2(stateid('texas'))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(population(B,A),largest(B,(state(B),next_to(B,C),const(C,stateid(texas))))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ population_1 ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ largest ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="6"> *n:StateName -> ({ ' texas ' }) </node>
</mrl-parse>
</example>

<example id="545">
<nl lang="en">
جمعیت شهرهای عمده ویسکونسین چقدر است ؟
</nl>
<nl lang="es">
que es la poblacion de las ciudades mayores en wisconsin ?
</nl>
<nl lang="ja">
uisukonshin ni wa ookina toshi no jinkou ga nan desu ka ?
</nl>
<nl lang="tr">
wisconsin deki baslica sehirlerin nufusu nedir ?
</nl>
<syn lang="en">
(S جمعیت شهرهای عمده ویسکونسین چقدر است ؟)
</syn>
<syn lang="es">
(S que es la poblacion de las ciudades mayores en wisconsin)
</syn>
<syn lang="ja">
(S uisukonshin ni wa ookina toshi no jinkou ga nan desu ka)
</syn>
<syn lang="tr">
(S wisconsin deki baslica sehirlerin nufusu nedir)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the population-[Num:1] of-[Num:1] the major-[City:2] cities-[City:3] in-[City:4] Wisconsin-[StateName:6])
</augsyn>
<mrl lang="geo-funql">
answer(population_1(major(city(loc_2(stateid('wisconsin'))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(population(B,A),major(B),city(B),loc(B,C),const(C,stateid(wisconsin))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ population_1 ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ major ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="4"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="6"> *n:StateName -> ({ ' wisconsin ' }) </node>
</mrl-parse>
</example>

<example id="546">
<nl lang="en">
جمعیت کوچکترین ایالت چقدر است ؟
</nl>
<syn lang="en">
(S جمعیت کوچکترین ایالت چقدر است ؟)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the population-[Num:2] of-[Num:2] the smallest-[Num:1] state-[State:3])
</augsyn>
<mrl lang="geo-funql">
answer(smallest(population_1(state(all))))
</mrl>
<mrl lang="geo-prolog">
answer(A,smallest(A,(population(B,A),state(B))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ smallest ( *n:Num ) }) </node>
<node id="2"> *n:Num -> ({ population_1 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="547">
<nl lang="en">
جمعیت ایالتی که با اکثر ایالات هم مرز است چقدر است ؟
</nl>
<syn lang="en">
(S جمعیت ایالتی که با اکثر ایالات هم مرز است چقدر است ؟)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the population-[Num:1] of-[Num:1] the state-[State:3] that borders-[State:4] the most-[State:2] states-[State:5])
</augsyn>
<mrl lang="geo-funql">
answer(population_1(most(state(next_to_2(state(all))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(population(B,A),most(B,C,(state(B),next_to(B,C),state(C)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ population_1 ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ most ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="548">
<nl lang="en">
جمعیت ایالتی که بیشترین تراکم جمعیت را دارد چقدر است ؟
</nl>
<syn lang="en">
(S جمعیت ایالتی که بیشترین تراکم جمعیت را دارد چقدر است ؟)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the population-[Num:1] of-[Num:1] the state-[State:3] with-[State:2] the highest-[State:2] population-[State:2] density-[State:2])
</augsyn>
<mrl lang="geo-funql">
answer(population_1(largest_one(density_1(state(all)))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(population(B,A),largest(C,(state(B),density(B,C)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ population_1 ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ largest_one ( density_1 ( *n:State ) ) }) </node>
<node id="3"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="549">
<nl lang="en">
جمعیت ایالتی دارای بیشترین مساحت چقدر است ؟
</nl>
<syn lang="en">
(S جمعیت ایالتی دارای بیشترین مساحت چقدر است ؟)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the population-[Num:1] of-[Num:1] the state-[State:3] with-[State:2] the largest-[State:2] area-[State:2])
</augsyn>
<mrl lang="geo-funql">
answer(population_1(largest_one(area_1(state(all)))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(population(B,A),largest(C,(state(B),area(B,C)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ population_1 ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ largest_one ( area_1 ( *n:State ) ) }) </node>
<node id="3"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="550">
<nl lang="en">
جمعیت توکسان چقدر است ؟
</nl>
<nl lang="es">
que es la poblacion de tucson ?
</nl>
<nl lang="ja">
tsuuson no jinkou wa nan desu ka ?
</nl>
<nl lang="tr">
tucson nun nufusu nedir ?
</nl>
<syn lang="en">
(S جمعیت توکسان چقدر است ؟)
</syn>
<syn lang="es">
(S que es la poblacion de tucson)
</syn>
<syn lang="ja">
(S tsuuson no jinkou wa nan desu ka)
</syn>
<syn lang="tr">
(S tucson nun nufusu nedir)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the population-[Num:1] of-[Num:1] Tucson-[CityName:3])
</augsyn>
<mrl lang="geo-funql">
answer(population_1(cityid('tucson', _)))
</mrl>
<mrl lang="geo-prolog">
answer(A,(population(B,A),const(B,cityid(tucson,_))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ population_1 ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ cityid ( *n:CityName , _ ) }) </node>
<node id="3"> *n:CityName -> ({ ' tucson ' }) </node>
</mrl-parse>
</example>

<example id="551">
<nl lang="en">
جمعیت یوتاه چقدر است ؟
</nl>
<nl lang="es">
que es la poblacion de utah ?
</nl>
<nl lang="ja">
yuutaa no jinkou wa nan desu ka ?
</nl>
<nl lang="tr">
utah nun nufusu nedir ?
</nl>
<syn lang="en">
(S جمعیت یوتاه چقدر است ؟)
</syn>
<syn lang="es">
(S que es la poblacion de utah)
</syn>
<syn lang="ja">
(S yuutaa no jinkou wa nan desu ka)
</syn>
<syn lang="tr">
(S utah nun nufusu nedir)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the population-[Num:1] of-[Num:1] Utah-[StateName:3])
</augsyn>
<mrl lang="geo-funql">
answer(population_1(stateid('utah')))
</mrl>
<mrl lang="geo-prolog">
answer(A,(population(B,A),const(B,stateid(utah))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ population_1 ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="3"> *n:StateName -> ({ ' utah ' }) </node>
</mrl-parse>
</example>

<example id="552">
<nl lang="en">
جمعیت واشنگتن چقدر است ؟
</nl>
<syn lang="en">
(S جمعیت واشنگتن چقدر است ؟)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the population-[Num:1] of-[Num:1] Washington-[StateName:3])
</augsyn>
<mrl lang="geo-funql">
answer(population_1(stateid('washington')))
</mrl>
<mrl lang="geo-prolog">
answer(A,(population(B,A),const(B,stateid(washington))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ population_1 ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="3"> *n:StateName -> ({ ' washington ' }) </node>
</mrl-parse>
</example>

<example id="553">
<nl lang="en">
جمعیت واشنگتن دی سی چقدر است ؟
</nl>
<syn lang="en">
(S جمعیت واشنگتن دی سی چقدر است ؟)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the population-[Num:1] of-[Num:1] Washington-[CityName:3] DC-[StateAbbrev:4])
</augsyn>
<mrl lang="geo-funql">
answer(population_1(cityid('washington', 'dc')))
</mrl>
<mrl lang="geo-prolog">
answer(A,(population(B,A),const(B,cityid(washington,dc))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ population_1 ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ cityid ( *n:CityName , *n:StateAbbrev ) }) </node>
<node id="3"> *n:CityName -> ({ ' washington ' }) </node>
<node id="4"> *n:StateAbbrev -> ({ ' dc ' }) </node>
</mrl-parse>
</example>

<example id="554">
<nl lang="en">
رودخانه ایی که از اوهایو عبور میکند چه نام دارد ؟
</nl>
<syn lang="en">
(S رودخانه ایی که از اوهایو عبور میکند چه نام دارد ؟)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the river-[River:1] that cross-[River:2] over-[River:2] Ohio-[StateName:4])
</augsyn>
<mrl lang="geo-funql">
answer(river(traverse_2(stateid('ohio'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(river(A),traverse(A,B),const(B,stateid(ohio))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:River ) }) </node>
<node id="1"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ traverse_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="4"> *n:StateName -> ({ ' ohio ' }) </node>
</mrl-parse>
</example>

<example id="555">
<nl lang="en">
کوتاه ترین رودخانه چه نام دارد ؟
</nl>
<nl lang="es">
que es el rio mas corto ?
</nl>
<nl lang="ja">
mottomo mijikai kawa wa nan desu ka ?
</nl>
<nl lang="tr">
en kisa nehir nedir ?
</nl>
<syn lang="en">
(S کوتاه ترین رودخانه چه نام دارد ؟)
</syn>
<syn lang="es">
(S que es el rio mas corto)
</syn>
<syn lang="ja">
(S mottomo mijikai kawa wa nan desu ka)
</syn>
<syn lang="tr">
(S en kisa nehir nedir)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the shortest-[River:1] river-[River:2])
</augsyn>
<mrl lang="geo-funql">
answer(shortest(river(all)))
</mrl>
<mrl lang="geo-prolog">
answer(A,shortest(A,river(A)))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:River ) }) </node>
<node id="1"> *n:River -> ({ shortest ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ river ( all ) }) </node>
</mrl-parse>
</example>

<example id="556">
<nl lang="en">
کوتاه ترین رودخانه در آلاسکا چه نام دارد ؟
</nl>
<syn lang="en">
(S کوتاه ترین رودخانه در آلاسکا چه نام دارد ؟)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the shortest-[River:1] river-[River:2] in-[River:3] Alaska-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(shortest(river(loc_2(stateid('alaska')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,shortest(A,(river(A),loc(A,B),const(B,stateid(alaska)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:River ) }) </node>
<node id="1"> *n:River -> ({ shortest ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' alaska ' }) </node>
</mrl-parse>
</example>

<example id="557">
<nl lang="en">
کوتاه ترین رودخانه در آیووا چه نام دارد ؟
</nl>
<nl lang="es">
que es el rio mas corto en iowa ?
</nl>
<nl lang="ja">
aiowa no mottomo mijikai kawa wa nan desu ka ?
</nl>
<nl lang="tr">
iowa daki en kisa nehir nedir ?
</nl>
<syn lang="en">
(S کوتاه ترین رودخانه در آیووا چه نام دارد ؟)
</syn>
<syn lang="es">
(S que es el rio mas corto en iowa)
</syn>
<syn lang="ja">
(S aiowa no mottomo mijikai kawa wa nan desu ka)
</syn>
<syn lang="tr">
(S iowa daki en kisa nehir nedir)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the shortest-[River:1] river-[River:2] in-[River:3] Iowa-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(shortest(river(loc_2(stateid('iowa')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,shortest(A,(river(A),loc(A,B),const(B,stateid(iowa)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:River ) }) </node>
<node id="1"> *n:River -> ({ shortest ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' iowa ' }) </node>
</mrl-parse>
</example>

<example id="558">
<nl lang="en">
کوتاه ترین رودخانه در نبراسکا چه نام دارد ؟
</nl>
<syn lang="en">
(S کوتاه ترین رودخانه در نبراسکا چه نام دارد ؟)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the shortest-[River:1] river-[River:2] in-[River:3] Nebraska-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(shortest(river(loc_2(stateid('nebraska')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,shortest(A,(river(A),loc(A,B),const(B,stateid(nebraska)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:River ) }) </node>
<node id="1"> *n:River -> ({ shortest ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' nebraska ' }) </node>
</mrl-parse>
</example>

<example id="559">
<nl lang="en">
کوتاه ترین رودخانه در تگزاس چه نام دارد ؟
</nl>
<syn lang="en">
(S کوتاه ترین رودخانه در تگزاس چه نام دارد ؟)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the shortest-[River:1] river-[River:2] in-[River:3] Texas-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(shortest(river(loc_2(stateid('texas')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,shortest(A,(river(A),loc(A,B),const(B,stateid(texas)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:River ) }) </node>
<node id="1"> *n:River -> ({ shortest ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' texas ' }) </node>
</mrl-parse>
</example>

<example id="560">
<nl lang="en">
کوتاه ترین رودخانه ایالات متحده کدامست ؟
</nl>
<syn lang="en">
(S کوتاه ترین رودخانه ایالات متحده کدامست ؟)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the shortest-[River:1] river-[River:2] in-[River:3] the United-[CountryName:5] States-[CountryName:5])
</augsyn>
<mrl lang="geo-funql">
answer(shortest(river(loc_2(countryid('usa')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,shortest(A,(river(A),loc(A,B),const(B,countryid(usa)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:River ) }) </node>
<node id="1"> *n:River -> ({ shortest ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ loc_2 ( *n:Country ) }) </node>
<node id="4"> *n:Country -> ({ countryid ( *n:CountryName ) }) </node>
<node id="5"> *n:CountryName -> ({ ' usa ' }) </node>
</mrl-parse>
</example>

<example id="561">
<nl lang="en">
کوتاه ترین رودخانه در ایالات متحده چیست ؟
</nl>
<nl lang="es">
que es el rio mas corto en los us ?
</nl>
<nl lang="ja">
beikoku no mottomo mijikai kawa wa nan desu ka ?
</nl>
<nl lang="tr">
us deki en kisa nehir nedir ?
</nl>
<syn lang="en">
(S کوتاه ترین رودخانه در ایالات متحده چیست ؟)
</syn>
<syn lang="es">
(S que es el rio mas corto en los us)
</syn>
<syn lang="ja">
(S beikoku no mottomo mijikai kawa wa nan desu ka)
</syn>
<syn lang="tr">
(S us deki en kisa nehir nedir)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the shortest-[River:1] river-[River:2] in-[River:3] the US-[CountryName:5])
</augsyn>
<mrl lang="geo-funql">
answer(shortest(river(loc_2(countryid('usa')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,shortest(A,(river(A),loc(A,B),const(B,countryid(usa)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:River ) }) </node>
<node id="1"> *n:River -> ({ shortest ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ loc_2 ( *n:Country ) }) </node>
<node id="4"> *n:Country -> ({ countryid ( *n:CountryName ) }) </node>
<node id="5"> *n:CountryName -> ({ ' usa ' }) </node>
</mrl-parse>
</example>

<example id="562">
<nl lang="en">
کوتاه ترین رودخانه در ایالات متحده کدامست ؟ .
</nl>
<nl lang="es">
que es el rio mas corto en los usa ?
</nl>
<nl lang="ja">
amerika no mottomo mijikai kawa wa nan desu ka ?
</nl>
<nl lang="tr">
usa deki en kisa nehir nedir ?
</nl>
<syn lang="en">
(S کوتاه ترین رودخانه در ایالات متحده کدامست ؟ .)
</syn>
<syn lang="es">
(S que es el rio mas corto en los usa)
</syn>
<syn lang="ja">
(S amerika no mottomo mijikai kawa wa nan desu ka)
</syn>
<syn lang="tr">
(S usa deki en kisa nehir nedir)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the shortest-[River:1] river-[River:2] in-[River:3] the USA-[CountryName:5])
</augsyn>
<mrl lang="geo-funql">
answer(shortest(river(loc_2(countryid('usa')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,shortest(A,(river(A),loc(A,B),const(B,countryid(usa)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:River ) }) </node>
<node id="1"> *n:River -> ({ shortest ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ loc_2 ( *n:Country ) }) </node>
<node id="4"> *n:Country -> ({ countryid ( *n:CountryName ) }) </node>
<node id="5"> *n:CountryName -> ({ ' usa ' }) </node>
</mrl-parse>
</example>

<example id="563">
<nl lang="en">
اندازه کالیفرنیا چقدر است ؟
</nl>
<syn lang="en">
(S اندازه کالیفرنیا چقدر است ؟)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the size-[Num:1] of-[Num:1] California-[StateName:3])
</augsyn>
<mrl lang="geo-funql">
answer(size(stateid('california')))
</mrl>
<mrl lang="geo-prolog">
answer(A,(size(B,A),const(B,stateid(california))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ size ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="3"> *n:StateName -> ({ ' california ' }) </node>
</mrl-parse>
</example>

<example id="564">
<nl lang="en">
اندازه فلوریدا چقدر است ؟
</nl>
<syn lang="en">
(S اندازه فلوریدا چقدر است ؟)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the size-[Num:1] of-[Num:1] Florida-[StateName:3])
</augsyn>
<mrl lang="geo-funql">
answer(size(stateid('florida')))
</mrl>
<mrl lang="geo-prolog">
answer(A,(size(B,A),const(B,stateid(florida))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ size ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="3"> *n:StateName -> ({ ' florida ' }) </node>
</mrl-parse>
</example>

<example id="565">
<nl lang="en">
به اندازه ایالت تگزاس چقدر است .
</nl>
<syn lang="en">
(S به اندازه ایالت تگزاس چقدر است .)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the size-[Num:1] of-[Num:1] Texas-[StateName:3])
</augsyn>
<mrl lang="geo-funql">
answer(size(stateid('texas')))
</mrl>
<mrl lang="geo-prolog">
answer(A,(size(B,A),const(B,stateid(texas))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ size ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="3"> *n:StateName -> ({ ' texas ' }) </node>
</mrl-parse>
</example>

<example id="566">
<nl lang="en">
اندازه شهر مرکزی تگزاس چقدر است ؟
</nl>
<syn lang="en">
(S اندازه شهر مرکزی تگزاس چقدر است ؟)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the size-[Num:1] of-[Num:1] the capital-[City:2] of-[City:3] Texas-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(size(capital(loc_2(stateid('texas')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(size(B,A),capital(B),loc(B,C),const(C,stateid(texas))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ size ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ capital ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' texas ' }) </node>
</mrl-parse>
</example>

<example id="567">
<nl lang="en">
اندازه بزرگترین ایالت در ایالات متحده آمریکا چقدر است ؟
</nl>
<syn lang="en">
(S اندازه بزرگترین ایالت در ایالات متحده آمریکا چقدر است ؟)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the size-[Num:1] of-[Num:1] the largest-[State:2] state-[State:3] in-[State:4] the USA-[CountryName:6])
</augsyn>
<mrl lang="geo-funql">
answer(size(largest(state(loc_2(countryid('usa'))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(size(B,A),largest(B,(state(B),loc(B,C),const(C,countryid(usa))))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ size ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ largest ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ loc_2 ( *n:Country ) }) </node>
<node id="5"> *n:Country -> ({ countryid ( *n:CountryName ) }) </node>
<node id="6"> *n:CountryName -> ({ ' usa ' }) </node>
</mrl-parse>
</example>

<example id="568">
<nl lang="en">
نام کوچکترین شهرستان در آلاسکا چیست ؟
</nl>
<nl lang="es">
que es la ciudad mas pequena en alaska ?
</nl>
<nl lang="ja">
arasuka no mottomo chiisai toshi wa nan desu ka ?
</nl>
<nl lang="tr">
alaska daki en kucuk sehir nedir ?
</nl>
<syn lang="en">
(S نام کوچکترین شهرستان در آلاسکا چیست ؟)
</syn>
<syn lang="es">
(S que es la ciudad mas pequena en alaska)
</syn>
<syn lang="ja">
(S arasuka no mottomo chiisai toshi wa nan desu ka)
</syn>
<syn lang="tr">
(S alaska daki en kucuk sehir nedir)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the smallest-[City:1] city-[City:2] in-[City:3] Alaska-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(smallest(city(loc_2(stateid('alaska')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,smallest(A,(city(A),loc(A,B),const(B,stateid(alaska)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ smallest ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' alaska ' }) </node>
</mrl-parse>
</example>

<example id="569">
<nl lang="en">
نام کوچکترین شهرستان در آرکانزاس چیست ؟
</nl>
<syn lang="en">
(S نام کوچکترین شهرستان در آرکانزاس چیست ؟)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the smallest-[City:1] city-[City:2] in-[City:3] Arkansas-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(smallest(city(loc_2(stateid('arkansas')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,smallest(A,(city(A),loc(A,B),const(B,stateid(arkansas)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ smallest ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' arkansas ' }) </node>
</mrl-parse>
</example>

<example id="570">
<nl lang="en">
نام کوچکترین شهرستان در هاوایی چیست ؟
</nl>
<nl lang="es">
que es la ciudad mas pequena en hawaii ?
</nl>
<nl lang="ja">
hawai no mottomo chiisai toshi wa nan desu ka ?
</nl>
<nl lang="tr">
hawaii deki en kucuk sehir nedir ?
</nl>
<syn lang="en">
(S نام کوچکترین شهرستان در هاوایی چیست ؟)
</syn>
<syn lang="es">
(S que es la ciudad mas pequena en hawaii)
</syn>
<syn lang="ja">
(S hawai no mottomo chiisai toshi wa nan desu ka)
</syn>
<syn lang="tr">
(S hawaii deki en kucuk sehir nedir)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the smallest-[City:1] city-[City:2] in-[City:3] Hawaii-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(smallest(city(loc_2(stateid('hawaii')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,smallest(A,(city(A),loc(A,B),const(B,stateid(hawaii)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ smallest ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' hawaii ' }) </node>
</mrl-parse>
</example>

<example id="571">
<nl lang="en">
نام کوچکترین شهرستان در بزرگترین ایالت چیست ؟
</nl>
<syn lang="en">
(S نام کوچکترین شهرستان در بزرگترین ایالت چیست ؟)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the smallest-[City:1] city-[City:2] in-[City:3] the largest-[State:4] state-[State:5])
</augsyn>
<mrl lang="geo-funql">
answer(smallest(city(loc_2(largest(state(all))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,smallest(A,(city(A),loc(A,B),largest(B,state(B)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ smallest ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ largest ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="572">
<nl lang="en">
نام کوچکترین شهرستان در ایالات متحده چیست ؟
</nl>
<nl lang="es">
que es la ciudad mas pequena en los usa ?
</nl>
<nl lang="ja">
beikoku no mottomo chiisai toshi wa nan desu ka ?
</nl>
<nl lang="tr">
usa deki en kucuk sehir nedir ?
</nl>
<syn lang="en">
(S نام کوچکترین شهرستان در ایالات متحده چیست ؟)
</syn>
<syn lang="es">
(S que es la ciudad mas pequena en los usa)
</syn>
<syn lang="ja">
(S beikoku no mottomo chiisai toshi wa nan desu ka)
</syn>
<syn lang="tr">
(S usa deki en kucuk sehir nedir)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the smallest-[City:1] city-[City:2] in-[City:3] the US-[CountryName:5])
</augsyn>
<mrl lang="geo-funql">
answer(smallest(city(loc_2(countryid('usa')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,smallest(A,(city(A),loc(A,B),const(B,countryid(usa)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ smallest ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ loc_2 ( *n:Country ) }) </node>
<node id="4"> *n:Country -> ({ countryid ( *n:CountryName ) }) </node>
<node id="5"> *n:CountryName -> ({ ' usa ' }) </node>
</mrl-parse>
</example>

<example id="573">
<nl lang="en">
نام کوچکترین شهرستان در ایالات متحده آمریکا چیست ؟
</nl>
<nl lang="es">
que es la ciudad mas pequena en los usa ?
</nl>
<nl lang="ja">
beikoku no mottomo chiisai toshi wa nan desu ka ?
</nl>
<nl lang="tr">
usa deki en kucuk sehir nedir ?
</nl>
<syn lang="en">
(S نام کوچکترین شهرستان در ایالات متحده آمریکا چیست ؟)
</syn>
<syn lang="es">
(S que es la ciudad mas pequena en los usa)
</syn>
<syn lang="ja">
(S beikoku no mottomo chiisai toshi wa nan desu ka)
</syn>
<syn lang="tr">
(S usa deki en kucuk sehir nedir)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the smallest-[City:1] city-[City:2] in-[City:3] the USA-[CountryName:5])
</augsyn>
<mrl lang="geo-funql">
answer(smallest(city(loc_2(countryid('usa')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,smallest(A,(city(A),loc(A,B),const(B,countryid(usa)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ smallest ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ loc_2 ( *n:Country ) }) </node>
<node id="4"> *n:Country -> ({ countryid ( *n:CountryName ) }) </node>
<node id="5"> *n:CountryName -> ({ ' usa ' }) </node>
</mrl-parse>
</example>

<example id="574">
<nl lang="en">
نام کوچکترین شهرستان در واشنگتن چیست ؟
</nl>
<nl lang="es">
que es la ciudad mas pequena en washington ?
</nl>
<nl lang="ja">
washinton no mottomo chiisai toshi wa nan desu ka ?
</nl>
<nl lang="tr">
washington daki en kucuk sehir nedir ?
</nl>
<syn lang="en">
(S نام کوچکترین شهرستان در واشنگتن چیست ؟)
</syn>
<syn lang="es">
(S que es la ciudad mas pequena en washington)
</syn>
<syn lang="ja">
(S washinton no mottomo chiisai toshi wa nan desu ka)
</syn>
<syn lang="tr">
(S washington daki en kucuk sehir nedir)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the smallest-[City:1] city-[City:2] in-[City:3] Washington-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(smallest(city(loc_2(stateid('washington')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,smallest(A,(city(A),loc(A,B),const(B,stateid(washington)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ smallest ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' washington ' }) </node>
</mrl-parse>
</example>

<example id="575">
<nl lang="en">
نام کوچکترین شهرستان در کوچکترین ایالت در ایالات متحده چیست ؟
</nl>
<syn lang="en">
(S نام کوچکترین شهرستان در کوچکترین ایالت در ایالات متحده چیست ؟)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the smallest-[City:1] city-[City:2] of-[City:3] the smallest-[State:4] state-[State:5] in-[State:6] the US-[CountryName:8])
</augsyn>
<mrl lang="geo-funql">
answer(smallest(city(loc_2(smallest(state(loc_2(countryid('usa'))))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,smallest(A,(city(A),loc(A,B),smallest(B,(state(B),loc(B,C),const(C,countryid(usa)))))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ smallest ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ smallest ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="6"> *n:State -> ({ loc_2 ( *n:Country ) }) </node>
<node id="7"> *n:Country -> ({ countryid ( *n:CountryName ) }) </node>
<node id="8"> *n:CountryName -> ({ ' usa ' }) </node>
</mrl-parse>
</example>

<example id="576">
<nl lang="en">
کوچکترین ایالت همجوار اوهایو چیست ؟
</nl>
<syn lang="en">
(S کوچکترین ایالت همجوار اوهایو چیست ؟)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the smallest-[State:1] state-[State:2] bordering-[State:3] Ohio-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(smallest(state(next_to_2(stateid('ohio')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,smallest(A,(state(A),next_to(A,B),const(B,stateid(ohio)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ smallest ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' ohio ' }) </node>
</mrl-parse>
</example>

<example id="577">
<nl lang="en">
کوچکترین ایالت هم مرز وایومینگ کدام است ؟ .
</nl>
<syn lang="en">
(S کوچکترین ایالت هم مرز وایومینگ کدام است ؟ .)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the smallest-[State:1] state-[State:2] bordering-[State:3] Wyoming-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(smallest(state(next_to_2(stateid('wyoming')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,smallest(A,(state(A),next_to(A,B),const(B,stateid(wyoming)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ smallest ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' wyoming ' }) </node>
</mrl-parse>
</example>

<example id="578">
<nl lang="en">
کوچکترین ایالت بر مبنای مساحت کدام است ؟
</nl>
<nl lang="es">
que es el estado mas pequeno por area ?
</nl>
<nl lang="ja">
chiiki de mottomo chiisai shuu wa nan desu ka ?
</nl>
<nl lang="tr">
alan acisindan en kucuk eyalet nedir ?
</nl>
<syn lang="en">
(S کوچکترین ایالت بر مبنای مساحت کدام است ؟)
</syn>
<syn lang="es">
(S que es el estado mas pequeno por area)
</syn>
<syn lang="ja">
(S chiiki de mottomo chiisai shuu wa nan desu ka)
</syn>
<syn lang="tr">
(S alan acisindan en kucuk eyalet nedir)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the smallest-[State:1] state-[State:2] by-[State:1] area-[State:1])
</augsyn>
<mrl lang="geo-funql">
answer(smallest_one(area_1(state(all))))
</mrl>
<mrl lang="geo-prolog">
answer(A,smallest(B,(state(A),area(A,B))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ smallest_one ( area_1 ( *n:State ) ) }) </node>
<node id="2"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="579">
<nl lang="en">
کوچکترین ایالت در ایالات متحده امریکا کدام است ؟
</nl>
<nl lang="es">
que es el estado mas pequeno en los usa ?
</nl>
<nl lang="ja">
amerika no mottomo chiisai shuu wa nan desu ka ?
</nl>
<nl lang="tr">
usa deki en kucuk eyalet nedir ?
</nl>
<syn lang="en">
(S کوچکترین ایالت در ایالات متحده امریکا کدام است ؟)
</syn>
<syn lang="es">
(S que es el estado mas pequeno en los usa)
</syn>
<syn lang="ja">
(S amerika no mottomo chiisai shuu wa nan desu ka)
</syn>
<syn lang="tr">
(S usa deki en kucuk eyalet nedir)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the smallest-[State:1] state-[State:2] in-[State:3] the USA-[CountryName:5])
</augsyn>
<mrl lang="geo-funql">
answer(smallest(state(loc_2(countryid('usa')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,smallest(A,(state(A),loc(A,B),const(B,countryid(usa)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ smallest ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ loc_2 ( *n:Country ) }) </node>
<node id="4"> *n:Country -> ({ countryid ( *n:CountryName ) }) </node>
<node id="5"> *n:CountryName -> ({ ' usa ' }) </node>
</mrl-parse>
</example>

<example id="580">
<nl lang="en">
نام کوچکترین ایالت همجوار تگزاس چیست ؟
</nl>
<syn lang="en">
(S نام کوچکترین ایالت همجوار تگزاس چیست ؟)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the smallest-[State:1] state-[State:2] that borders-[State:3] Texas-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(smallest(state(next_to_2(stateid('texas')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,smallest(A,(state(A),next_to(A,B),const(B,stateid(texas)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ smallest ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' texas ' }) </node>
</mrl-parse>
</example>

<example id="581">
<nl lang="en">
نام کوچکترین ایالت هم مرز با بیشتر ایالات چیست ؟
</nl>
<syn lang="en">
(S نام کوچکترین ایالت هم مرز با بیشتر ایالات چیست ؟)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the smallest-[State:1] state-[State:3] that borders-[State:4] the most-[State:2] states-[State:5])
</augsyn>
<mrl lang="geo-funql">
answer(smallest(most(state(next_to_2(state(all))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,smallest(A,most(A,B,(state(A),next_to(A,B),state(B)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ smallest ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ most ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="582">
<nl lang="en">
کوچکترین ایالتی که رودخانه می سی سی پی از آن عبور میکند کدام است ؟
</nl>
<syn lang="en">
(S کوچکترین ایالتی که رودخانه می سی سی پی از آن عبور میکند کدام است ؟)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the smallest-[State:1] state-[State:2] that the Mississippi-[RiverName:6] river-[River:4] runs-[State:3] through-[State:3])
</augsyn>
<mrl lang="geo-funql">
answer(smallest(state(traverse_1(river(riverid('mississippi'))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,smallest(A,(state(A),const(B,riverid(mississippi)),river(B),traverse(B,A))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ smallest ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ traverse_1 ( *n:River ) }) </node>
<node id="4"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="5"> *n:River -> ({ riverid ( *n:RiverName ) }) </node>
<node id="6"> *n:RiverName -> ({ ' mississippi ' }) </node>
</mrl-parse>
</example>

<example id="583">
<nl lang="en">
کوچکترین ایالتی که طولانی ترین رود از آن عبور میکند کدام است ؟
</nl>
<syn lang="en">
(S کوچکترین ایالتی که طولانی ترین رود از آن عبور میکند کدام است ؟)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the smallest-[State:1] state-[State:2] through-[State:3] which the longest-[River:4] river-[River:5] runs-[State:3])
</augsyn>
<mrl lang="geo-funql">
answer(smallest(state(traverse_1(longest(river(all))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,smallest(A,(state(A),longest(B,river(B)),traverse(B,A))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ smallest ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ traverse_1 ( *n:River ) }) </node>
<node id="4"> *n:River -> ({ longest ( *n:River ) }) </node>
<node id="5"> *n:River -> ({ river ( all ) }) </node>
</mrl-parse>
</example>

<example id="584">
<nl lang="en">
ایالتی که دارای بلندترین نقطه است کدام است ؟
</nl>
<syn lang="en">
(S ایالتی که دارای بلندترین نقطه است کدام است ؟)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the state-[State:1] that contains-[State:2] the highest-[Place:3] point-[Place:4])
</augsyn>
<mrl lang="geo-funql">
answer(state(loc_1(highest(place(all)))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),loc(B,A),highest(B,place(B))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ loc_1 ( *n:Place ) }) </node>
<node id="3"> *n:Place -> ({ highest ( *n:Place ) }) </node>
<node id="4"> *n:Place -> ({ place ( all ) }) </node>
</mrl-parse>
</example>

<example id="585">
<nl lang="en">
ایالتی که بالاترین ارتفاع را در ایالات متحده دارد کدام است ؟
</nl>
<syn lang="en">
(S ایالتی که بالاترین ارتفاع را در ایالات متحده دارد کدام است ؟)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the state-[State:1] with-[State:2] the highest-[Place:3] elevation-[Place:4] in-[Place:5] the United-[CountryName:7] States-[CountryName:7])
</augsyn>
<mrl lang="geo-funql">
answer(state(loc_1(highest(place(loc_2(countryid('usa')))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),loc(B,A),highest(B,(place(B),loc(B,C),const(C,countryid(usa))))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ loc_1 ( *n:Place ) }) </node>
<node id="3"> *n:Place -> ({ highest ( *n:Place ) }) </node>
<node id="4"> *n:Place -> ({ place ( *n:Place ) }) </node>
<node id="5"> *n:Place -> ({ loc_2 ( *n:Country ) }) </node>
<node id="6"> *n:Country -> ({ countryid ( *n:CountryName ) }) </node>
<node id="7"> *n:CountryName -> ({ ' usa ' }) </node>
</mrl-parse>
</example>

<example id="586">
<nl lang="en">
کدام ایالت دارای بیشترین مساحت است ؟
</nl>
<syn lang="en">
(S کدام ایالت دارای بیشترین مساحت است ؟)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the state-[State:2] with-[State:1] the largest-[State:1] area-[State:1])
</augsyn>
<mrl lang="geo-funql">
answer(largest_one(area_1(state(all))))
</mrl>
<mrl lang="geo-prolog">
answer(A,largest(B,(state(A),area(A,B))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ largest_one ( area_1 ( *n:State ) ) }) </node>
<node id="2"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="587">
<nl lang="en">
کدام ایالت بیشترین چگالی جمعیت را در ایالات متحده دارد ؟
</nl>
<syn lang="en">
(S کدام ایالت بیشترین چگالی جمعیت را در ایالات متحده دارد ؟)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the state-[State:2] with-[State:1] the largest-[State:1] density-[State:1] in-[State:3] USA-[CountryName:5])
</augsyn>
<mrl lang="geo-funql">
answer(largest_one(density_1(state(loc_2(countryid('usa'))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,largest(B,(state(A),density(A,B),loc(A,C),const(C,countryid(usa)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ largest_one ( density_1 ( *n:State ) ) }) </node>
<node id="2"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ loc_2 ( *n:Country ) }) </node>
<node id="4"> *n:Country -> ({ countryid ( *n:CountryName ) }) </node>
<node id="5"> *n:CountryName -> ({ ' usa ' }) </node>
</mrl-parse>
</example>

<example id="588">
<nl lang="en">
کدام ایالت بیشترین تراکم جمعیت را داراست ؟
</nl>
<syn lang="en">
(S کدام ایالت بیشترین تراکم جمعیت را داراست ؟)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the state-[State:2] with-[State:1] the largest-[State:1] population-[State:1] density-[State:1])
</augsyn>
<mrl lang="geo-funql">
answer(largest_one(density_1(state(all))))
</mrl>
<mrl lang="geo-prolog">
answer(A,largest(B,(state(A),density(A,B))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ largest_one ( density_1 ( *n:State ) ) }) </node>
<node id="2"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="589">
<nl lang="en">
ایالتی که کم ارتفاع ترین نقطه در آن واقع شده است کدام است ؟
</nl>
<syn lang="en">
(S ایالتی که کم ارتفاع ترین نقطه در آن واقع شده است کدام است ؟)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the state-[State:1] with-[State:2] the lowest-[Place:3] point-[Place:4])
</augsyn>
<mrl lang="geo-funql">
answer(state(loc_1(lowest(place(all)))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),loc(B,A),lowest(B,place(B))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ loc_1 ( *n:Place ) }) </node>
<node id="3"> *n:Place -> ({ lowest ( *n:Place ) }) </node>
<node id="4"> *n:Place -> ({ place ( all ) }) </node>
</mrl-parse>
</example>

<example id="590">
<nl lang="en">
نام کم جمعیت ترین ایالت چیست ؟
</nl>
<nl lang="es">
que es el estado con la poblacion mas baja ?
</nl>
<nl lang="ja">
mottomo chiisai jinkou ga aru shuu wa nan desu ka ?
</nl>
<nl lang="tr">
en az nufuslu eyalet nedir ?
</nl>
<syn lang="en">
(S نام کم جمعیت ترین ایالت چیست ؟)
</syn>
<syn lang="es">
(S que es el estado con la poblacion mas baja)
</syn>
<syn lang="ja">
(S mottomo chiisai jinkou ga aru shuu wa nan desu ka)
</syn>
<syn lang="tr">
(S en az nufuslu eyalet nedir)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the state-[State:2] with-[State:1] the lowest-[State:1] population-[State:1])
</augsyn>
<mrl lang="geo-funql">
answer(smallest_one(population_1(state(all))))
</mrl>
<mrl lang="geo-prolog">
answer(A,smallest(B,(state(A),population(A,B))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ smallest_one ( population_1 ( *n:State ) ) }) </node>
<node id="2"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="591">
<nl lang="en">
کدام ایالت دارای کمترین تراکم جمعیت است ؟
</nl>
<syn lang="en">
(S کدام ایالت دارای کمترین تراکم جمعیت است ؟)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the state-[State:2] with-[State:1] the lowest-[State:1] population-[State:1] density-[State:1])
</augsyn>
<mrl lang="geo-funql">
answer(smallest_one(density_1(state(all))))
</mrl>
<mrl lang="geo-prolog">
answer(A,smallest(B,(state(A),density(A,B))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ smallest_one ( density_1 ( *n:State ) ) }) </node>
<node id="2"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="592">
<nl lang="en">
ایالتی که کمترین مساحت را دارد کدامست ؟
</nl>
<syn lang="en">
(S ایالتی که کمترین مساحت را دارد کدامست ؟)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the state-[State:2] with-[State:1] the smallest-[State:1] area-[State:1])
</augsyn>
<mrl lang="geo-funql">
answer(smallest_one(area_1(state(all))))
</mrl>
<mrl lang="geo-prolog">
answer(A,smallest(B,(state(A),area(A,B))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ smallest_one ( area_1 ( *n:State ) ) }) </node>
<node id="2"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="593">
<nl lang="en">
بلندترین کوه در آمریکا چقدر ارتفاع دارد ؟
</nl>
<syn lang="en">
(S بلندترین کوه در آمریکا چقدر ارتفاع دارد ؟)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the tallest-[Place:1] mountain-[Place:2] in-[Place:3] America-[CountryName:5])
</augsyn>
<mrl lang="geo-funql">
answer(highest(mountain(loc_2(countryid('usa')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,highest(A,(mountain(A),loc(A,B),const(B,countryid(usa)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Place ) }) </node>
<node id="1"> *n:Place -> ({ highest ( *n:Place ) }) </node>
<node id="2"> *n:Place -> ({ mountain ( *n:Place ) }) </node>
<node id="3"> *n:Place -> ({ loc_2 ( *n:Country ) }) </node>
<node id="4"> *n:Country -> ({ countryid ( *n:CountryName ) }) </node>
<node id="5"> *n:CountryName -> ({ ' usa ' }) </node>
</mrl-parse>
</example>

<example id="594">
<nl lang="en">
بلندترین کوه در ایالات متحده کدام است ؟
</nl>
<syn lang="en">
(S بلندترین کوه در ایالات متحده کدام است ؟)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the tallest-[Place:1] mountain-[Place:2] in-[Place:3] the United-[CountryName:5] States-[CountryName:5])
</augsyn>
<mrl lang="geo-funql">
answer(highest(mountain(loc_2(countryid('usa')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,highest(A,(mountain(A),loc(A,B),const(B,countryid(usa)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Place ) }) </node>
<node id="1"> *n:Place -> ({ highest ( *n:Place ) }) </node>
<node id="2"> *n:Place -> ({ mountain ( *n:Place ) }) </node>
<node id="3"> *n:Place -> ({ loc_2 ( *n:Country ) }) </node>
<node id="4"> *n:Country -> ({ countryid ( *n:CountryName ) }) </node>
<node id="5"> *n:CountryName -> ({ ' usa ' }) </node>
</mrl-parse>
</example>

<example id="595">
<nl lang="en">
مجموع مساحت ایالات متحده آمریکا چقدر است ؟
</nl>
<nl lang="es">
que es la area total de los usa ?
</nl>
<nl lang="ja">
amerika no zentai no chiiki wa nan desu ka ?
</nl>
<nl lang="tr">
usa nin toplam yuzolcumu nedir ?
</nl>
<syn lang="en">
(S مجموع مساحت ایالات متحده آمریکا چقدر است ؟)
</syn>
<syn lang="es">
(S que es la area total de los usa)
</syn>
<syn lang="ja">
(S amerika no zentai no chiiki wa nan desu ka)
</syn>
<syn lang="tr">
(S usa nin toplam yuzolcumu nedir)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the total-[Num:1] area-[Num:1] of-[Num:1] the USA-[CountryName:3])
</augsyn>
<mrl lang="geo-funql">
answer(area_1(countryid('usa')))
</mrl>
<mrl lang="geo-prolog">
answer(A,(area(B,A),const(B,countryid(usa))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ area_1 ( *n:Country ) }) </node>
<node id="2"> *n:Country -> ({ countryid ( *n:CountryName ) }) </node>
<node id="3"> *n:CountryName -> ({ ' usa ' }) </node>
</mrl-parse>
</example>

<example id="596">
<nl lang="en">
مجموع طول تمام رودخانه ها در ایالات متحده آمریکا چقدر است ؟
</nl>
<syn lang="en">
(S مجموع طول تمام رودخانه ها در ایالات متحده آمریکا چقدر است ؟)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the total-[Num:1] length-[Num:2] of-[Num:2] all-[River:3] rivers-[River:3] in-[River:3] the USA-[River:3])
</augsyn>
<mrl lang="geo-funql">
answer(sum(len(river(all))))
</mrl>
<mrl lang="geo-prolog">
answer(A,sum(B,(len(C,B),river(C)),A))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ sum ( *n:Num ) }) </node>
<node id="2"> *n:Num -> ({ len ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ river ( all ) }) </node>
</mrl-parse>
</example>

<example id="597">
<nl lang="en">
مجموع جمعیت ایالات همجوار تگزاس چقدر است ؟
</nl>
<nl lang="es">
que es el total de la poblacion de los estados que bordean a texas ?
</nl>
<nl lang="ja">
tekisasu ni rinsetsu suru shuu no zentai no jinkou wa ikura desu ka ?
</nl>
<nl lang="tr">
texas a komsu eyaletlerin toplam nufusu nedir ?
</nl>
<syn lang="en">
(S مجموع جمعیت ایالات همجوار تگزاس چقدر است ؟)
</syn>
<syn lang="es">
(S que es el total de la poblacion de los estados que bordean a texas)
</syn>
<syn lang="ja">
(S tekisasu ni rinsetsu suru shuu no zentai no jinkou wa ikura desu ka)
</syn>
<syn lang="tr">
(S texas a komsu eyaletlerin toplam nufusu nedir)
</syn>
<augsyn lang="en">
(S What is-[Query:0] the total-[Num:1] population-[Num:2] of-[Num:2] the states-[State:3] that border-[State:4] Texas-[StateName:6])
</augsyn>
<mrl lang="geo-funql">
answer(sum(population_1(state(next_to_2(stateid('texas'))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,sum(B,(population(C,B),state(C),next_to(D,C),const(D,stateid(texas))),A))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ sum ( *n:Num ) }) </node>
<node id="2"> *n:Num -> ({ population_1 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="6"> *n:StateName -> ({ ' texas ' }) </node>
</mrl-parse>
</example>

<example id="598">
<nl lang="en">
طول میسیسیپی چقدر است ؟
</nl>
<nl lang="es">
cuanto tiene de largo el mississippi ?
</nl>
<nl lang="ja">
mishishippi kawa no nagasa wa nan desu ka ?
</nl>
<nl lang="tr">
mississippi ni ne kadar uzunluktadir ?
</nl>
<syn lang="en">
(S طول میسیسیپی چقدر است ؟)
</syn>
<syn lang="es">
(S cuanto tiene de largo el mississippi)
</syn>
<syn lang="ja">
(S mishishippi kawa no nagasa wa nan desu ka)
</syn>
<syn lang="tr">
(S mississippi ni ne kadar uzunluktadir)
</syn>
<augsyn lang="en">
(S What length-[Num:1] is-[Num:1] the Mississippi-[RiverName:3])
</augsyn>
<mrl lang="geo-funql">
answer(len(riverid('mississippi')))
</mrl>
<mrl lang="geo-prolog">
answer(A,(len(B,A),const(B,riverid(mississippi))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ len ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ riverid ( *n:RiverName ) }) </node>
<node id="3"> *n:RiverName -> ({ ' mississippi ' }) </node>
</mrl-parse>
</example>

<example id="599">
<nl lang="en">
چه شهرهای عمده ای در پنسیلوانیا واقع شده اند ؟
</nl>
<syn lang="en">
(S چه شهرهای عمده ای در پنسیلوانیا واقع شده اند ؟)
</syn>
<augsyn lang="en">
(S What major-[City:1] cities-[City:2] are-[City:3] located-[City:3] in-[City:3] Pennsylvania-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(major(city(loc_2(stateid('pennsylvania')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(major(A),city(A),loc(A,B),const(B,stateid(pennsylvania))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ major ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' pennsylvania ' }) </node>
</mrl-parse>
</example>

<example id="600">
<nl lang="en">
چه شهرهای عمده ای از ایلینوی میگذرند ؟
</nl>
<nl lang="es">
que rios mayores corren por illinois ?
</nl>
<nl lang="ja">
ookina kawa wa irinoi wo nagarete imasu ka ?
</nl>
<nl lang="tr">
illinois den baslica hangi nehirler gecer ?
</nl>
<syn lang="en">
(S چه شهرهای عمده ای از ایلینوی میگذرند ؟)
</syn>
<syn lang="es">
(S que rios mayores corren por illinois)
</syn>
<syn lang="ja">
(S ookina kawa wa irinoi wo nagarete imasu ka)
</syn>
<syn lang="tr">
(S illinois den baslica hangi nehirler gecer)
</syn>
<augsyn lang="en">
(S What major-[River:1] rivers-[River:2] run-[River:3] through-[River:3] Illinois-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(major(river(traverse_2(stateid('illinois')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(major(A),river(A),traverse(A,B),const(B,stateid(illinois))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:River ) }) </node>
<node id="1"> *n:River -> ({ major ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ traverse_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' illinois ' }) </node>
</mrl-parse>
</example>

<example id="601">
<nl lang="en">
چه کوه هایی در آلاسکا وجود دارند ؟
</nl>
<syn lang="en">
(S چه کوه هایی در آلاسکا وجود دارند ؟)
</syn>
<augsyn lang="en">
(S What mountains-[Place:1] are-[Place:2] in-[Place:2] Alaska-[StateName:4])
</augsyn>
<mrl lang="geo-funql">
answer(mountain(loc_2(stateid('alaska'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(mountain(A),loc(A,B),const(B,stateid(alaska))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Place ) }) </node>
<node id="1"> *n:Place -> ({ mountain ( *n:Place ) }) </node>
<node id="2"> *n:Place -> ({ loc_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="4"> *n:StateName -> ({ ' alaska ' }) </node>
</mrl-parse>
</example>

<example id="602">
<nl lang="en">
چه رودخانه ای از کانزاس میگذرد ؟
</nl>
<syn lang="en">
(S چه رودخانه ای از کانزاس میگذرد ؟)
</syn>
<augsyn lang="en">
(S What river-[River:1] flows-[River:2] through-[River:2] Kansas-[StateName:4])
</augsyn>
<mrl lang="geo-funql">
answer(river(traverse_2(stateid('kansas'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(river(A),traverse(A,B),const(B,stateid(kansas))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:River ) }) </node>
<node id="1"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ traverse_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="4"> *n:StateName -> ({ ' kansas ' }) </node>
</mrl-parse>
</example>

<example id="603">
<nl lang="en">
چه رودخانه ای از تگزاس میگذرد ؟
</nl>
<syn lang="en">
(S چه رودخانه ای از تگزاس میگذرد ؟)
</syn>
<augsyn lang="en">
(S What river-[River:1] flows-[River:2] through-[River:2] Texas-[StateName:4])
</augsyn>
<mrl lang="geo-funql">
answer(river(traverse_2(stateid('texas'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(river(A),traverse(A,B),const(B,stateid(texas))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:River ) }) </node>
<node id="1"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ traverse_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="4"> *n:StateName -> ({ ' texas ' }) </node>
</mrl-parse>
</example>

<example id="604">
<nl lang="en">
چه رودخانه ای از ایالت های بیشتری میگذرد ؟
</nl>
<syn lang="en">
(S چه رودخانه ای از ایالت های بیشتری میگذرد ؟)
</syn>
<augsyn lang="en">
(S What river-[River:2] flows-[River:3] through-[River:3] the most-[River:1] states-[State:4])
</augsyn>
<mrl lang="geo-funql">
answer(most(river(traverse_2(state(all)))))
</mrl>
<mrl lang="geo-prolog">
answer(A,most(A,B,(river(A),traverse(A,B),state(B))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:River ) }) </node>
<node id="1"> *n:River -> ({ most ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ traverse_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="605">
<nl lang="en">
چه رودخانه ای در ایالات متحده بلندترین است ؟
</nl>
<syn lang="en">
(S چه رودخانه ای در ایالات متحده بلندترین است ؟)
</syn>
<augsyn lang="en">
(S What river-[River:2] is-[River:2] the longest-[River:1] one-[River:1] in-[River:3] the United-[CountryName:5] States-[CountryName:5])
</augsyn>
<mrl lang="geo-funql">
answer(longest(river(loc_2(countryid('usa')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,longest(A,(river(A),loc(A,B),const(B,countryid(usa)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:River ) }) </node>
<node id="1"> *n:River -> ({ longest ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ loc_2 ( *n:Country ) }) </node>
<node id="4"> *n:Country -> ({ countryid ( *n:CountryName ) }) </node>
<node id="5"> *n:CountryName -> ({ ' usa ' }) </node>
</mrl-parse>
</example>

<example id="606">
<nl lang="en">
چه رودخانه ای از ایلینوی میگذرد ؟
</nl>
<syn lang="en">
(S چه رودخانه ای از ایلینوی میگذرد ؟)
</syn>
<augsyn lang="en">
(S What river-[River:1] runs-[River:2] through-[River:2] Illinois-[StateName:4])
</augsyn>
<mrl lang="geo-funql">
answer(river(traverse_2(stateid('illinois'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(river(A),traverse(A,B),const(B,stateid(illinois))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:River ) }) </node>
<node id="1"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ traverse_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="4"> *n:StateName -> ({ ' illinois ' }) </node>
</mrl-parse>
</example>

<example id="607">
<nl lang="en">
چه رودخانه ای از بیشتر ایالات میگذرد ؟
</nl>
<syn lang="en">
(S چه رودخانه ای از بیشتر ایالات میگذرد ؟)
</syn>
<augsyn lang="en">
(S What river-[River:2] runs-[River:3] through-[River:3] the most-[River:1] states-[State:4])
</augsyn>
<mrl lang="geo-funql">
answer(most(river(traverse_2(state(all)))))
</mrl>
<mrl lang="geo-prolog">
answer(A,most(A,B,(river(A),traverse(A,B),state(B))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:River ) }) </node>
<node id="1"> *n:River -> ({ most ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ traverse_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="608">
<nl lang="en">
چه رودخانه ای از ایالتی با بیشترین شهرها میگذرد ؟
</nl>
<syn lang="en">
(S چه رودخانه ای از ایالتی با بیشترین شهرها میگذرد ؟)
</syn>
<augsyn lang="en">
(S What river-[River:1] runs-[River:2] through-[River:2] the state-[State:4] with-[State:5] the most-[State:3] cities-[City:6])
</augsyn>
<mrl lang="geo-funql">
answer(river(traverse_2(most(state(loc_1(city(all)))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(river(A),traverse(A,B),most(B,C,(state(B),loc(C,B),city(C)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:River ) }) </node>
<node id="1"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ traverse_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ most ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ loc_1 ( *n:City ) }) </node>
<node id="6"> *n:City -> ({ city ( all ) }) </node>
</mrl-parse>
</example>

<example id="609">
<nl lang="en">
چه رودخانه ای از ویرجینیا میگذرد ؟
</nl>
<syn lang="en">
(S چه رودخانه ای از ویرجینیا میگذرد ؟)
</syn>
<augsyn lang="en">
(S What river-[River:1] runs-[River:2] through-[River:2] Virginia-[StateName:4])
</augsyn>
<mrl lang="geo-funql">
answer(river(traverse_2(stateid('virginia'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(river(A),traverse(A,B),const(B,stateid(virginia))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:River ) }) </node>
<node id="1"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ traverse_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="4"> *n:StateName -> ({ ' virginia ' }) </node>
</mrl-parse>
</example>

<example id="610">
<nl lang="en">
کدام رودخانه از ایالت های بیشتری عبور میکند ؟
</nl>
<syn lang="en">
(S کدام رودخانه از ایالت های بیشتری عبور میکند ؟)
</syn>
<augsyn lang="en">
(S What river-[River:2] traverses-[River:3] the most-[River:1] states-[State:4])
</augsyn>
<mrl lang="geo-funql">
answer(most(river(traverse_2(state(all)))))
</mrl>
<mrl lang="geo-prolog">
answer(A,most(A,B,(river(A),traverse(A,B),state(B))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:River ) }) </node>
<node id="1"> *n:River -> ({ most ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ traverse_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="611">
<nl lang="en">
کدام رودخانه از ایالتی عبور میکند که با ایالتهای بیشتری همجوار است ؟
</nl>
<syn lang="en">
(S کدام رودخانه از ایالتی عبور میکند که با ایالتهای بیشتری همجوار است ؟)
</syn>
<augsyn lang="en">
(S What river-[River:1] traverses-[River:2] the state-[State:4] which borders-[State:5] the most-[State:3] states-[State:6])
</augsyn>
<mrl lang="geo-funql">
answer(river(traverse_2(most(state(next_to_2(state(all)))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(river(A),traverse(A,B),most(B,C,(state(B),next_to(B,C),state(C)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:River ) }) </node>
<node id="1"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ traverse_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ most ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="6"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="612">
<nl lang="en">
رودخانه های نبراسکا کدامند ؟
</nl>
<syn lang="en">
(S رودخانه های نبراسکا کدامند ؟)
</syn>
<augsyn lang="en">
(S What rivers-[River:1] are-[River:2] in-[River:2] Nevada-[StateName:4])
</augsyn>
<mrl lang="geo-funql">
answer(river(loc_2(stateid('nevada'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(river(A),loc(A,B),const(B,stateid(nevada))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:River ) }) </node>
<node id="1"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ loc_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="4"> *n:StateName -> ({ ' nevada ' }) </node>
</mrl-parse>
</example>

<example id="613">
<nl lang="en">
رودخانه های نیومکزیکو کدامند ؟
</nl>
<syn lang="en">
(S رودخانه های نیومکزیکو کدامند ؟)
</syn>
<augsyn lang="en">
(S What rivers-[River:1] are-[River:2] in-[River:2] New-[StateName:4] Mexico-[StateName:4])
</augsyn>
<mrl lang="geo-funql">
answer(river(loc_2(stateid('new mexico'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(river(A),loc(A,B),const(B,stateid('new mexico'))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:River ) }) </node>
<node id="1"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ loc_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="4"> *n:StateName -> ({ ' new mexico ' }) </node>
</mrl-parse>
</example>

<example id="614">
<nl lang="en">
رودخانه های اورگان کدامند ؟
</nl>
<syn lang="en">
(S رودخانه های اورگان کدامند ؟)
</syn>
<augsyn lang="en">
(S What rivers-[River:1] are-[River:2] in-[River:2] Oregon-[StateName:4])
</augsyn>
<mrl lang="geo-funql">
answer(river(loc_2(stateid('oregon'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(river(A),loc(A,B),const(B,stateid(oregon))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:River ) }) </node>
<node id="1"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ loc_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="4"> *n:StateName -> ({ ' oregon ' }) </node>
</mrl-parse>
</example>

<example id="615">
<nl lang="en">
رودخانه های ایالت های هم مرز تگزاس کدامند ؟
</nl>
<syn lang="en">
(S رودخانه های ایالت های هم مرز تگزاس کدامند ؟)
</syn>
<augsyn lang="en">
(S What rivers-[River:1] are-[River:2] in-[River:2] states-[State:3] that border-[State:4] Texas-[StateName:6])
</augsyn>
<mrl lang="geo-funql">
answer(river(loc_2(state(next_to_2(stateid('texas'))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(river(A),loc(A,B),state(B),next_to(B,C),const(C,stateid(texas))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:River ) }) </node>
<node id="1"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ loc_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="6"> *n:StateName -> ({ ' texas ' }) </node>
</mrl-parse>
</example>

<example id="616">
<nl lang="en">
چه رودخانه های در تگزاس هستند ؟
</nl>
<syn lang="en">
(S چه رودخانه های در تگزاس هستند ؟)
</syn>
<augsyn lang="en">
(S What rivers-[River:1] are-[River:2] in-[River:2] Texas-[StateName:4])
</augsyn>
<mrl lang="geo-funql">
answer(river(loc_2(stateid('texas'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(river(A),loc(A,B),const(B,stateid(texas))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:River ) }) </node>
<node id="1"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ loc_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="4"> *n:StateName -> ({ ' texas ' }) </node>
</mrl-parse>
</example>

<example id="617">
<nl lang="en">
چه رودخانه هایی در یوتاه هستند ؟
</nl>
<nl lang="es">
que rios estan en utah ?
</nl>
<nl lang="ja">
yuutaa ni wa kawa ga nan desu ka ?
</nl>
<nl lang="tr">
utah da hangi nehirler vardir ?
</nl>
<syn lang="en">
(S چه رودخانه هایی در یوتاه هستند ؟)
</syn>
<syn lang="es">
(S que rios estan en utah)
</syn>
<syn lang="ja">
(S yuutaa ni wa kawa ga nan desu ka)
</syn>
<syn lang="tr">
(S utah da hangi nehirler vardir)
</syn>
<augsyn lang="en">
(S What rivers-[River:1] are-[River:2] in-[River:2] Utah-[StateName:4])
</augsyn>
<mrl lang="geo-funql">
answer(river(loc_2(stateid('utah'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(river(A),loc(A,B),const(B,stateid(utah))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:River ) }) </node>
<node id="1"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ loc_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="4"> *n:StateName -> ({ ' utah ' }) </node>
</mrl-parse>
</example>

<example id="618">
<nl lang="en">
چه رودخانه هایی در تگزاس هست ؟
</nl>
<syn lang="en">
(S چه رودخانه هایی در تگزاس هست ؟)
</syn>
<augsyn lang="en">
(S What rivers-[River:1] are-[River:2] there-[River:2] in-[River:2] Texas-[StateName:4])
</augsyn>
<mrl lang="geo-funql">
answer(river(loc_2(stateid('texas'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(river(A),loc(A,B),const(B,stateid(texas))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:River ) }) </node>
<node id="1"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ loc_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="4"> *n:StateName -> ({ ' texas ' }) </node>
</mrl-parse>
</example>

<example id="619">
<nl lang="en">
چه رودخانه هایی از تنسی نمیگذرند ؟
</nl>
<nl lang="es">
que rios no corren por tennessee ?
</nl>
<nl lang="ja">
teneshii wo nagarenai kawa wa nan desu ka ?
</nl>
<nl lang="tr">
hangi nehirler tennessee den gecmez ?
</nl>
<syn lang="en">
(S چه رودخانه هایی از تنسی نمیگذرند ؟)
</syn>
<syn lang="es">
(S que rios no corren por tennessee)
</syn>
<syn lang="ja">
(S teneshii wo nagarenai kawa wa nan desu ka)
</syn>
<syn lang="tr">
(S hangi nehirler tennessee den gecmez)
</syn>
<augsyn lang="en">
(S What rivers-[River:2] do-[River:1] not-[River:1] run-[River:3] through-[River:3] Tennessee-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(exclude(river(all), traverse_2(stateid('tennessee'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(river(A),not((traverse(A,B),const(B,stateid(tennessee))))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:River ) }) </node>
<node id="1"> *n:River -> ({ exclude ( *n:River , *n:River ) }) </node>
<node id="2"> *n:River -> ({ river ( all ) }) </node>
<node id="3"> *n:River -> ({ traverse_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' tennessee ' }) </node>
</mrl-parse>
</example>

<example id="620">
<nl lang="en">
چه رودخانه هایی از کلرادو میگذرند ؟
</nl>
<syn lang="en">
(S چه رودخانه هایی از کلرادو میگذرند ؟)
</syn>
<augsyn lang="en">
(S What rivers-[River:1] flow-[River:2] though-[River:2] Colorado-[StateName:4])
</augsyn>
<mrl lang="geo-funql">
answer(river(traverse_2(stateid('colorado'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(river(A),traverse(A,B),const(B,stateid(colorado))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:River ) }) </node>
<node id="1"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ traverse_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="4"> *n:StateName -> ({ ' colorado ' }) </node>
</mrl-parse>
</example>

<example id="621">
<nl lang="en">
کدام رودخانه ها از طریق میسوری جریان دارند ؟
</nl>
<syn lang="en">
(S کدام رودخانه ها از طریق میسوری جریان دارند ؟)
</syn>
<augsyn lang="en">
(S What rivers-[River:1] flow-[River:2] through-[River:2] Missouri-[StateName:4])
</augsyn>
<mrl lang="geo-funql">
answer(river(traverse_2(stateid('missouri'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(river(A),traverse(A,B),const(B,stateid(missouri))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:River ) }) </node>
<node id="1"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ traverse_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="4"> *n:StateName -> ({ ' missouri ' }) </node>
</mrl-parse>
</example>

<example id="622">
<nl lang="en">
کدام رودخانه ها از ایالت هایی میگذرند که با آلاباما همجوار هستند ؟
</nl>
<syn lang="en">
(S کدام رودخانه ها از ایالت هایی میگذرند که با آلاباما همجوار هستند ؟)
</syn>
<augsyn lang="en">
(S What rivers-[River:1] flow-[River:2] through-[River:2] states-[State:3] that Alabama-[StateName:6] borders-[State:4])
</augsyn>
<mrl lang="geo-funql">
answer(river(traverse_2(state(next_to_1(stateid('alabama'))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(river(A),traverse(A,B),state(B),const(C,stateid(alabama)),next_to(C,B)))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:River ) }) </node>
<node id="1"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ traverse_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ next_to_1 ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="6"> *n:StateName -> ({ ' alabama ' }) </node>
</mrl-parse>
</example>

<example id="623">
<nl lang="en">
کدام رودخانه ها از ایالت هایی میگذرند که با ایالتی که دارای بیشترین جمعیت است همجوارند ؟
</nl>
<syn lang="en">
(S کدام رودخانه ها از ایالت هایی میگذرند که با ایالتی که دارای بیشترین جمعیت است همجوارند ؟)
</syn>
<augsyn lang="en">
(S What rivers-[River:1] flow-[River:2] through-[River:2] states-[State:3] that border-[State:4] the state-[State:6] with-[State:5] the largest-[State:5] population-[State:5])
</augsyn>
<mrl lang="geo-funql">
answer(river(traverse_2(state(next_to_2(largest_one(population_1(state(all))))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(river(A),traverse(A,B),state(B),next_to(B,C),largest(D,(state(C),population(C,D)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:River ) }) </node>
<node id="1"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ traverse_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ largest_one ( population_1 ( *n:State ) ) }) </node>
<node id="6"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="624">
<nl lang="en">
کدام رودخانه ها از میان بزرگترین ایالت جریان دارند ؟
</nl>
<syn lang="en">
(S کدام رودخانه ها از میان بزرگترین ایالت جریان دارند ؟)
</syn>
<augsyn lang="en">
(S What rivers-[River:1] flow-[River:2] through-[River:2] the largest-[State:3] state-[State:4])
</augsyn>
<mrl lang="geo-funql">
answer(river(traverse_2(largest(state(all)))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(river(A),traverse(A,B),largest(B,state(B))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:River ) }) </node>
<node id="1"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ traverse_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ largest ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="625">
<nl lang="en">
کدام رودخانه ها از ایالتی با بیشترین جمعیت میگذرند ؟
</nl>
<syn lang="en">
(S کدام رودخانه ها از ایالتی با بیشترین جمعیت میگذرند ؟)
</syn>
<augsyn lang="en">
(S What rivers-[River:1] flow-[River:2] through-[River:2] the state-[State:4] with-[State:3] the largest-[State:3] population-[State:3])
</augsyn>
<mrl lang="geo-funql">
answer(river(traverse_2(largest_one(population_1(state(all))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(river(A),traverse(A,B),largest(C,(state(B),population(B,C)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:River ) }) </node>
<node id="1"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ traverse_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ largest_one ( population_1 ( *n:State ) ) }) </node>
<node id="4"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="626">
<nl lang="en">
کدام رودخانه ها از آریزونا میگذرند ؟
</nl>
<syn lang="en">
(S کدام رودخانه ها از آریزونا میگذرند ؟)
</syn>
<augsyn lang="en">
(S What rivers-[River:1] run-[River:2] through-[River:2] Arizona-[StateName:4])
</augsyn>
<mrl lang="geo-funql">
answer(river(traverse_2(stateid('arizona'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(river(A),traverse(A,B),const(B,stateid(arizona))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:River ) }) </node>
<node id="1"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ traverse_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="4"> *n:StateName -> ({ ' arizona ' }) </node>
</mrl-parse>
</example>

<example id="627">
<nl lang="en">
کدام رودخانه ها از تگزاس آستین میگذرند ؟
</nl>
<syn lang="en">
(S کدام رودخانه ها از تگزاس آستین میگذرند ؟)
</syn>
<augsyn lang="en">
(S What rivers-[River:1] run-[River:2] through-[River:2] Austin-[CityName:4] Texas-[StateAbbrev:5])
</augsyn>
<mrl lang="geo-funql">
answer(river(traverse_2(cityid('austin', 'tx'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(river(A),traverse(A,B),const(B,cityid(austin,tx))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:River ) }) </node>
<node id="1"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ traverse_2 ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ cityid ( *n:CityName , *n:StateAbbrev ) }) </node>
<node id="4"> *n:CityName -> ({ ' austin ' }) </node>
<node id="5"> *n:StateAbbrev -> ({ ' tx ' }) </node>
</mrl-parse>
</example>

<example id="628">
<nl lang="en">
کدام رودخانه ها از کلرادو میگذرند ؟
</nl>
<nl lang="es">
que rios corren por colorado ?
</nl>
<nl lang="ja">
dono kawa wa kororado wo nagarete imasu ka ?
</nl>
<nl lang="tr">
colorado dan hangi nehirler gecer ?
</nl>
<syn lang="en">
(S کدام رودخانه ها از کلرادو میگذرند ؟)
</syn>
<syn lang="es">
(S que rios corren por colorado)
</syn>
<syn lang="ja">
(S dono kawa wa kororado wo nagarete imasu ka)
</syn>
<syn lang="tr">
(S colorado dan hangi nehirler gecer)
</syn>
<augsyn lang="en">
(S What rivers-[River:1] run-[River:2] through-[River:2] Colorado-[StateName:4])
</augsyn>
<mrl lang="geo-funql">
answer(river(traverse_2(stateid('colorado'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(river(A),traverse(A,B),const(B,stateid(colorado))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:River ) }) </node>
<node id="1"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ traverse_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="4"> *n:StateName -> ({ ' colorado ' }) </node>
</mrl-parse>
</example>

<example id="629">
<nl lang="en">
کدام رودخانه ها از لوئیزیانا میگذرند ؟
</nl>
<syn lang="en">
(S کدام رودخانه ها از لوئیزیانا میگذرند ؟)
</syn>
<augsyn lang="en">
(S What rivers-[River:1] run-[River:2] through-[River:2] Louisiana-[StateName:4])
</augsyn>
<mrl lang="geo-funql">
answer(river(traverse_2(stateid('louisiana'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(river(A),traverse(A,B),const(B,stateid(louisiana))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:River ) }) </node>
<node id="1"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ traverse_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="4"> *n:StateName -> ({ ' louisiana ' }) </node>
</mrl-parse>
</example>

<example id="630">
<nl lang="en">
کدام رودخانه ها از مین میگذرند ؟
</nl>
<syn lang="en">
(S کدام رودخانه ها از مین میگذرند ؟)
</syn>
<augsyn lang="en">
(S What rivers-[River:1] run-[River:2] through-[River:2] Maine-[StateName:4])
</augsyn>
<mrl lang="geo-funql">
answer(river(traverse_2(stateid('maine'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(river(A),traverse(A,B),const(B,stateid(maine))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:River ) }) </node>
<node id="1"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ traverse_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="4"> *n:StateName -> ({ ' maine ' }) </node>
</mrl-parse>
</example>

<example id="631">
<nl lang="en">
کدام رودخانه ها از نیویورک میگذرند ؟
</nl>
<nl lang="es">
que rios corren por new york ?
</nl>
<nl lang="ja">
dono kawa wa nyoo yooku wo nagarete imasu ka ?
</nl>
<nl lang="tr">
new york dan hangi nehirler gecer ?
</nl>
<syn lang="en">
(S کدام رودخانه ها از نیویورک میگذرند ؟)
</syn>
<syn lang="es">
(S que rios corren por new_york)
</syn>
<syn lang="ja">
(S dono kawa wa nyoo_yooku wo nagarete imasu ka)
</syn>
<syn lang="tr">
(S new_york dan hangi nehirler gecer)
</syn>
<augsyn lang="en">
(S What rivers-[River:1] run-[River:2] through-[River:2] New-[StateName:4] York-[StateName:4])
</augsyn>
<mrl lang="geo-funql">
answer(river(traverse_2(stateid('new york'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(river(A),traverse(A,B),const(B,stateid('new york'))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:River ) }) </node>
<node id="1"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ traverse_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="4"> *n:StateName -> ({ ' new york ' }) </node>
</mrl-parse>
</example>

<example id="632">
<nl lang="en">
کدام رودخانه ها در ایالات متحده از ایالتی که پایینترین نقطه در آن واقع شده است میگذرند ؟
</nl>
<syn lang="en">
(S کدام رودخانه ها در ایالات متحده از ایالتی که پایینترین نقطه در آن واقع شده است میگذرند ؟)
</syn>
<augsyn lang="en">
(S What rivers-[River:1] run-[River:2] through-[River:2] the state-[State:3] with-[State:4] the lowest-[Place:5] point-[Place:6] in-[Place:7] the USA-[CountryName:9])
</augsyn>
<mrl lang="geo-funql">
answer(river(traverse_2(state(loc_1(lowest(place(loc_2(countryid('usa')))))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(river(A),traverse(A,B),state(B),loc(C,B),lowest(C,(place(C),loc(C,D),const(D,countryid(usa))))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:River ) }) </node>
<node id="1"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ traverse_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ loc_1 ( *n:Place ) }) </node>
<node id="5"> *n:Place -> ({ lowest ( *n:Place ) }) </node>
<node id="6"> *n:Place -> ({ place ( *n:Place ) }) </node>
<node id="7"> *n:Place -> ({ loc_2 ( *n:Country ) }) </node>
<node id="8"> *n:Country -> ({ countryid ( *n:CountryName ) }) </node>
<node id="9"> *n:CountryName -> ({ ' usa ' }) </node>
</mrl-parse>
</example>

<example id="633">
<nl lang="en">
کدام رودخانه ها از ایالاتی میگذرند که با ایالتی که دارای مرکز استان آتلانتاست مرز مشترک دارند ؟
</nl>
<nl lang="es">
que rios corren por los estados que bordean a el estado con la capital atlanta ?
</nl>
<nl lang="ja">
ataranta wo shuto ni motsu shuu ni rinsetsu suru shuu wo nagareru kawa wa nan desu ka ?
</nl>
<nl lang="tr">
baskenti atlanta olan eyalete komsu eyaletlerden gecen nehir nedir ?
</nl>
<syn lang="en">
(S کدام رودخانه ها از ایالاتی میگذرند که با ایالتی که دارای مرکز استان آتلانتاست مرز مشترک دارند ؟)
</syn>
<syn lang="es">
(S que rios corren por los estados que bordean a el estado con la capital atlanta)
</syn>
<syn lang="ja">
(S ataranta wo shuto ni motsu shuu ni rinsetsu suru shuu wo nagareru kawa wa nan desu ka)
</syn>
<syn lang="tr">
(S baskenti atlanta olan eyalete komsu eyaletlerden gecen nehir nedir)
</syn>
<augsyn lang="en">
(S What rivers-[River:1] run-[River:2] through-[River:2] the states-[State:3] that border-[State:4] the state-[State:5] with-[State:6] the capital-[City:7] Atlanta-[CityName:9])
</augsyn>
<mrl lang="geo-funql">
answer(river(traverse_2(state(next_to_2(state(loc_1(capital(cityid('atlanta', _)))))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(river(A),traverse(A,B),state(B),next_to(B,C),state(C),loc(D,C),capital(D),const(D,cityid(atlanta,_))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:River ) }) </node>
<node id="1"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ traverse_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="6"> *n:State -> ({ loc_1 ( *n:City ) }) </node>
<node id="7"> *n:City -> ({ capital ( *n:City ) }) </node>
<node id="8"> *n:City -> ({ cityid ( *n:CityName , _ ) }) </node>
<node id="9"> *n:CityName -> ({ ' atlanta ' }) </node>
</mrl-parse>
</example>

<example id="634">
<nl lang="en">
کدام رودخانه ها از وست ویرجینیا میگذرند ؟
</nl>
<nl lang="es">
que rios corren por west virginia ?
</nl>
<nl lang="ja">
dono kawa wa uesuto baajinia wo nagarete imasu ka ?
</nl>
<nl lang="tr">
west virginia dan hangi nehirler gecer ?
</nl>
<syn lang="en">
(S کدام رودخانه ها از وست ویرجینیا میگذرند ؟)
</syn>
<syn lang="es">
(S que rios corren por west_virginia)
</syn>
<syn lang="ja">
(S dono kawa wa uesuto_baajinia wo nagarete imasu ka)
</syn>
<syn lang="tr">
(S west_virginia dan hangi nehirler gecer)
</syn>
<augsyn lang="en">
(S What rivers-[River:1] run-[River:2] through-[River:2] West-[StateName:4] Virginia-[StateName:4])
</augsyn>
<mrl lang="geo-funql">
answer(river(traverse_2(stateid('west virginia'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(river(A),traverse(A,B),const(B,stateid('west virginia'))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:River ) }) </node>
<node id="1"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ traverse_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="4"> *n:StateName -> ({ ' west virginia ' }) </node>
</mrl-parse>
</example>

<example id="635">
<nl lang="en">
کدام رودخانه ای از ایالتی که با بیشترین ایالات مرز مشترک دارد میگذرد ؟
</nl>
<syn lang="en">
(S کدام رودخانه ای از ایالتی که با بیشترین ایالات مرز مشترک دارد میگذرد ؟)
</syn>
<augsyn lang="en">
(S What rivers-[River:1] traverses-[River:2] the state-[State:4] which borders-[State:5] the most-[State:3] states-[State:6])
</augsyn>
<mrl lang="geo-funql">
answer(river(traverse_2(most(state(next_to_2(state(all)))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(river(A),traverse(A,B),most(B,C,(state(B),next_to(B,C),state(C)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:River ) }) </node>
<node id="1"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ traverse_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ most ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="6"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="636">
<nl lang="en">
کدام ایالت همجوار نوادا دارای بیشترین جمعیت است ؟
</nl>
<syn lang="en">
(S کدام ایالت همجوار نوادا دارای بیشترین جمعیت است ؟)
</syn>
<augsyn lang="en">
(S What state-[State:2] bordering-[State:3] Nevada-[StateName:5] has-[State:1] the largest-[State:1] population-[State:1])
</augsyn>
<mrl lang="geo-funql">
answer(largest_one(population_1(state(next_to_2(stateid('nevada'))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,largest(B,(state(A),next_to(A,C),const(C,stateid(nevada)),population(A,B))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ largest_one ( population_1 ( *n:State ) ) }) </node>
<node id="2"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' nevada ' }) </node>
</mrl-parse>
</example>

<example id="637">
<nl lang="en">
کدام ایالت همجوار میشیگان است ؟
</nl>
<nl lang="es">
cual estado bordea a michigan ?
</nl>
<nl lang="ja">
mishigan ni rinsetsu suru shuu wa dochira desu ka ?
</nl>
<nl lang="tr">
hangi eyaletin michigan ya siniri vardir ?
</nl>
<syn lang="en">
(S کدام ایالت همجوار میشیگان است ؟)
</syn>
<syn lang="es">
(S cual estado bordea a michigan)
</syn>
<syn lang="ja">
(S mishigan ni rinsetsu suru shuu wa dochira desu ka)
</syn>
<syn lang="tr">
(S hangi eyaletin michigan ya siniri vardir)
</syn>
<augsyn lang="en">
(S What state-[State:1] borders-[State:2] Michigan-[StateName:4])
</augsyn>
<mrl lang="geo-funql">
answer(state(next_to_2(stateid('michigan'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),next_to(A,B),const(B,stateid(michigan))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="4"> *n:StateName -> ({ ' michigan ' }) </node>
</mrl-parse>
</example>

<example id="638">
<nl lang="en">
کدام ایالت با بیشترین ایالات همجوار است ؟
</nl>
<syn lang="en">
(S کدام ایالت با بیشترین ایالات همجوار است ؟)
</syn>
<augsyn lang="en">
(S What state-[State:2] borders-[State:3] most-[State:1] other-[State:4] states-[State:4])
</augsyn>
<mrl lang="geo-funql">
answer(most(state(next_to_2(state(all)))))
</mrl>
<mrl lang="geo-prolog">
answer(A,most(A,B,(state(A),next_to(A,B),state(B))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ most ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="639">
<nl lang="en">
چه ایالتهایی با نیویورک هم مرز هستند ؟
</nl>
<syn lang="en">
(S چه ایالتهایی با نیویورک هم مرز هستند ؟)
</syn>
<augsyn lang="en">
(S What state-[State:1] borders-[State:2] New-[StateName:4] York-[StateName:4])
</augsyn>
<mrl lang="geo-funql">
answer(state(next_to_2(stateid('new york'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),next_to(A,B),const(B,stateid('new york'))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="4"> *n:StateName -> ({ ' new york ' }) </node>
</mrl-parse>
</example>

<example id="640">
<nl lang="en">
چه ایالتهایی با کمترین ایالت ها هم مرز هستند ؟
</nl>
<syn lang="en">
(S چه ایالتهایی با کمترین ایالت ها هم مرز هستند ؟)
</syn>
<augsyn lang="en">
(S What state-[State:2] borders-[State:3] the least-[State:1] states-[State:4])
</augsyn>
<mrl lang="geo-funql">
answer(fewest(state(next_to_2(state(all)))))
</mrl>
<mrl lang="geo-prolog">
answer(A,fewest(A,B,(state(A),next_to(A,B),state(B))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ fewest ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="641">
<nl lang="en">
چه ایالت هایی همجوار کمترین ایالت ها به غیر از آلاسکا و هاوایی هستند ؟
</nl>
<syn lang="en">
(S چه ایالت هایی همجوار کمترین ایالت ها به غیر از آلاسکا و هاوایی هستند ؟)
</syn>
<augsyn lang="en">
(S What state-[State:2] borders-[State:3] the least-[State:1] states-[State:6] excluding-[State:5] Alaska-[StateName:8] and-[State:4] excluding-[State:4] Hawaii-[StateName:10])
</augsyn>
<mrl lang="geo-funql">
answer(fewest(state(next_to_2(exclude(exclude(state(all), stateid('alaska')), stateid('hawaii'))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,fewest(A,B,(state(A),next_to(A,B),state(B),not((const(A,stateid(alaska)))),not((const(A,stateid(hawaii)))))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ fewest ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ exclude ( *n:State , *n:State ) }) </node>
<node id="5"> *n:State -> ({ exclude ( *n:State , *n:State ) }) </node>
<node id="6"> *n:State -> ({ state ( all ) }) </node>
<node id="7"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="8"> *n:StateName -> ({ ' alaska ' }) </node>
<node id="9"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="10"> *n:StateName -> ({ ' hawaii ' }) </node>
</mrl-parse>
</example>

<example id="642">
<nl lang="en">
کدام ایالت با ایالات بیشتری همجوار است ؟
</nl>
<syn lang="en">
(S کدام ایالت با ایالات بیشتری همجوار است ؟)
</syn>
<augsyn lang="en">
(S What state-[State:2] borders-[State:3] the most-[State:1] states-[State:4])
</augsyn>
<mrl lang="geo-funql">
answer(most(state(next_to_2(state(all)))))
</mrl>
<mrl lang="geo-prolog">
answer(A,most(A,B,(state(A),next_to(A,B),state(B))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ most ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="643">
<nl lang="en">
کدام ایالت ها با ایالتی با کمترین جمعیت همجوار هستند ؟
</nl>
<syn lang="en">
(S کدام ایالت ها با ایالتی با کمترین جمعیت همجوار هستند ؟)
</syn>
<augsyn lang="en">
(S What state-[State:1] borders-[State:2] the state-[State:4] with-[State:3] the smallest-[State:3] population-[State:3])
</augsyn>
<mrl lang="geo-funql">
answer(state(next_to_2(smallest_one(population_1(state(all))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),next_to(A,B),smallest(C,(state(B),population(B,C)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ smallest_one ( population_1 ( *n:State ) ) }) </node>
<node id="4"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="644">
<nl lang="en">
بلند ترین نقطه ایالات متحده در کدام ایالت واقع شده است ؟
</nl>
<nl lang="es">
que estado contiene el punto mas alto en los us ?
</nl>
<nl lang="ja">
dono shuu wa beikoku no mottomo takai chiten ga arimasu ka ?
</nl>
<nl lang="tr">
hangi eyalet us deki en yusek noktayi kapsar ?
</nl>
<syn lang="en">
(S بلند ترین نقطه ایالات متحده در کدام ایالت واقع شده است ؟)
</syn>
<syn lang="es">
(S que estado contiene el punto mas alto en los us)
</syn>
<syn lang="ja">
(S dono shuu wa beikoku no mottomo takai chiten ga arimasu ka)
</syn>
<syn lang="tr">
(S hangi eyalet us deki en yusek noktayi kapsar)
</syn>
<augsyn lang="en">
(S What state-[State:1] contains-[State:2] the highest-[Place:3] point-[Place:4] in-[Place:5] the US-[CountryName:7])
</augsyn>
<mrl lang="geo-funql">
answer(state(loc_1(highest(place(loc_2(countryid('usa')))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),loc(B,A),highest(B,(place(B),loc(B,C),const(C,countryid(usa))))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ loc_1 ( *n:Place ) }) </node>
<node id="3"> *n:Place -> ({ highest ( *n:Place ) }) </node>
<node id="4"> *n:Place -> ({ place ( *n:Place ) }) </node>
<node id="5"> *n:Place -> ({ loc_2 ( *n:Country ) }) </node>
<node id="6"> *n:Country -> ({ countryid ( *n:CountryName ) }) </node>
<node id="7"> *n:CountryName -> ({ ' usa ' }) </node>
</mrl-parse>
</example>

<example id="645">
<nl lang="en">
کدام ایالت بلندترین نقطه ای که رود کلرادو از آن میگذرد را دربردارد ؟
</nl>
<syn lang="en">
(S کدام ایالت بلندترین نقطه ای که رود کلرادو از آن میگذرد را دربردارد ؟)
</syn>
<augsyn lang="en">
(S What state-[State:1] contains-[State:2] the highest-[Place:3] point-[Place:4] of-[Place:5] those-[State:6] the Colorado-[RiverName:10] river-[River:8] traverses-[State:7])
</augsyn>
<mrl lang="geo-funql">
answer(state(loc_1(highest(place(loc_2(state(traverse_1(river(riverid('colorado'))))))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),loc(B,A),highest(B,(place(B),loc(B,C),state(C),const(D,riverid(colorado)),river(D),traverse(D,C)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ loc_1 ( *n:Place ) }) </node>
<node id="3"> *n:Place -> ({ highest ( *n:Place ) }) </node>
<node id="4"> *n:Place -> ({ place ( *n:Place ) }) </node>
<node id="5"> *n:Place -> ({ loc_2 ( *n:State ) }) </node>
<node id="6"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="7"> *n:State -> ({ traverse_1 ( *n:River ) }) </node>
<node id="8"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="9"> *n:River -> ({ riverid ( *n:RiverName ) }) </node>
<node id="10"> *n:RiverName -> ({ ' colorado ' }) </node>
</mrl-parse>
</example>

<example id="646">
<nl lang="en">
چه ایالتی بیشترین ارتفاع را داراست ؟
</nl>
<nl lang="es">
que estado tiene la elevacion mas alta ?
</nl>
<nl lang="ja">
dono shuu wa mottomo takai kaibatsu ga arimasu ka ?
</nl>
<nl lang="tr">
hangi eyalet en yuksek yukseltiye sahiptir ?
</nl>
<syn lang="en">
(S چه ایالتی بیشترین ارتفاع را داراست ؟)
</syn>
<syn lang="es">
(S que estado tiene la elevacion mas alta)
</syn>
<syn lang="ja">
(S dono shuu wa mottomo takai kaibatsu ga arimasu ka)
</syn>
<syn lang="tr">
(S hangi eyalet en yuksek yukseltiye sahiptir)
</syn>
<augsyn lang="en">
(S What state-[State:1] has-[State:2] highest-[Place:3] elevation-[Place:4])
</augsyn>
<mrl lang="geo-funql">
answer(state(loc_1(highest(place(all)))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),loc(B,A),highest(B,place(B))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ loc_1 ( *n:Place ) }) </node>
<node id="3"> *n:Place -> ({ highest ( *n:Place ) }) </node>
<node id="4"> *n:Place -> ({ place ( all ) }) </node>
</mrl-parse>
</example>

<example id="647">
<nl lang="en">
کدام ایالت هیچ رودخانه ای ندارد ؟
</nl>
<syn lang="en">
(S کدام ایالت هیچ رودخانه ای ندارد ؟)
</syn>
<augsyn lang="en">
(S What state-[State:2] has-[State:3] no-[State:1] rivers-[River:4])
</augsyn>
<mrl lang="geo-funql">
answer(exclude(state(all), loc_1(river(all))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),not((loc(B,A),river(B)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ exclude ( *n:State , *n:State ) }) </node>
<node id="2"> *n:State -> ({ state ( all ) }) </node>
<node id="3"> *n:State -> ({ loc_1 ( *n:River ) }) </node>
<node id="4"> *n:River -> ({ river ( all ) }) </node>
</mrl-parse>
</example>

<example id="648">
<nl lang="en">
سالم مرکز کدام ایالت است ؟
</nl>
<nl lang="es">
que estado tiene la capital salem ?
</nl>
<nl lang="ja">
dono shuu wa saremu to iu shuto ga arimasu ka ?
</nl>
<nl lang="tr">
hangi eyaletin baskenti salem dir ?
</nl>
<syn lang="en">
(S سالم مرکز کدام ایالت است ؟)
</syn>
<syn lang="es">
(S que estado tiene la capital salem)
</syn>
<syn lang="ja">
(S dono shuu wa saremu to iu shuto ga arimasu ka)
</syn>
<syn lang="tr">
(S hangi eyaletin baskenti salem dir)
</syn>
<augsyn lang="en">
(S What state-[State:1] has-[State:2] the capital-[City:3] Salem-[CityName:5])
</augsyn>
<mrl lang="geo-funql">
answer(state(loc_1(capital(cityid('salem', _)))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),loc(B,A),capital(B),const(B,cityid(salem,_))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ loc_1 ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ capital ( *n:City ) }) </node>
<node id="4"> *n:City -> ({ cityid ( *n:CityName , _ ) }) </node>
<node id="5"> *n:CityName -> ({ ' salem ' }) </node>
</mrl-parse>
</example>

<example id="649">
<nl lang="en">
فلینت متعلق به کدام ایالت است ؟
</nl>
<nl lang="es">
que estado tiene la ciudad flint ?
</nl>
<nl lang="ja">
dono shuu wa furinto toshi ga arimasu ka ?
</nl>
<nl lang="tr">
hangi eyalet in flint sehri vardir ?
</nl>
<syn lang="en">
(S فلینت متعلق به کدام ایالت است ؟)
</syn>
<syn lang="es">
(S que estado tiene la ciudad flint)
</syn>
<syn lang="ja">
(S dono shuu wa furinto toshi ga arimasu ka)
</syn>
<syn lang="tr">
(S hangi eyalet in flint sehri vardir)
</syn>
<augsyn lang="en">
(S What state-[State:1] has-[State:2] the city-[City:3] Flint-[CityName:5])
</augsyn>
<mrl lang="geo-funql">
answer(state(loc_1(city(cityid('flint', _)))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),loc(B,A),city(B),const(B,cityid(flint,_))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ loc_1 ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="4"> *n:City -> ({ cityid ( *n:CityName , _ ) }) </node>
<node id="5"> *n:CityName -> ({ ' flint ' }) </node>
</mrl-parse>
</example>

<example id="650">
<nl lang="en">
کدام ایالت شهری با بیشترین جمعیت دارد ؟
</nl>
<syn lang="en">
(S کدام ایالت شهری با بیشترین جمعیت دارد ؟)
</syn>
<augsyn lang="en">
(S What state-[State:1] has-[State:2] the city-[City:4] with-[City:3] the largest-[City:3] population-[City:3])
</augsyn>
<mrl lang="geo-funql">
answer(state(loc_1(largest_one(population_1(city(all))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),loc(B,A),largest(C,(city(B),population(B,C)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ loc_1 ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ largest_one ( population_1 ( *n:City ) ) }) </node>
<node id="4"> *n:City -> ({ city ( all ) }) </node>
</mrl-parse>
</example>

<example id="651">
<nl lang="en">
کدام ایالت شهری با بیشترین جمعیت را دارد ؟
</nl>
<syn lang="en">
(S کدام ایالت شهری با بیشترین جمعیت را دارد ؟)
</syn>
<augsyn lang="en">
(S What state-[State:1] has-[State:2] the city-[City:4] with-[City:3] the most-[City:3] population-[City:3])
</augsyn>
<mrl lang="geo-funql">
answer(state(loc_1(largest_one(population_1(city(all))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),loc(B,A),largest(C,(city(B),population(B,C)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ loc_1 ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ largest_one ( population_1 ( *n:City ) ) }) </node>
<node id="4"> *n:City -> ({ city ( all ) }) </node>
</mrl-parse>
</example>

<example id="652">
<nl lang="en">
کدام ایالت بیشترین تمرکز جمعیت را داراست ؟
</nl>
<nl lang="es">
que estado tiene la densidad de poblacion mas grande ?
</nl>
<nl lang="ja">
mottomo ookii jinkou no mitsudo ga aru shuu wa nan desu ka ?
</nl>
<nl lang="tr">
hangi eyalet en buyuk nufus yogunluguna sahiptir ?
</nl>
<syn lang="en">
(S کدام ایالت بیشترین تمرکز جمعیت را داراست ؟)
</syn>
<syn lang="es">
(S que estado tiene la densidad de poblacion mas grande)
</syn>
<syn lang="ja">
(S mottomo ookii jinkou no mitsudo ga aru shuu wa nan desu ka)
</syn>
<syn lang="tr">
(S hangi eyalet en buyuk nufus yogunluguna sahiptir)
</syn>
<augsyn lang="en">
(S What state-[State:2] has-[State:1] the greatest-[State:1] population-[State:1] density-[State:1])
</augsyn>
<mrl lang="geo-funql">
answer(largest_one(density_1(state(all))))
</mrl>
<mrl lang="geo-prolog">
answer(A,largest(B,(state(A),density(A,B))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ largest_one ( density_1 ( *n:State ) ) }) </node>
<node id="2"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="653">
<nl lang="en">
کدام ایالت دارای بالاترین ارتفاع است ؟
</nl>
<nl lang="es">
que estado tiene la elevacion mas alta ?
</nl>
<nl lang="ja">
dono shuu wa mottomo takai kaibatsu ga arimsua ka ?
</nl>
<nl lang="tr">
hangi eyalet en yuksek yukseltiye sahiptir ?
</nl>
<syn lang="en">
(S کدام ایالت دارای بالاترین ارتفاع است ؟)
</syn>
<syn lang="es">
(S que estado tiene la elevacion mas alta)
</syn>
<syn lang="ja">
(S dono shuu wa mottomo takai kaibatsu ga arimsua ka)
</syn>
<syn lang="tr">
(S hangi eyalet en yuksek yukseltiye sahiptir)
</syn>
<augsyn lang="en">
(S What state-[State:1] has-[State:2] the highest-[Place:3] elevation-[Place:4])
</augsyn>
<mrl lang="geo-funql">
answer(state(loc_1(highest(place(all)))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),loc(B,A),highest(B,(place(B)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ loc_1 ( *n:Place ) }) </node>
<node id="3"> *n:Place -> ({ highest ( *n:Place ) }) </node>
<node id="4"> *n:Place -> ({ place ( all ) }) </node>
</mrl-parse>
</example>

<example id="654">
<nl lang="en">
کدام ایالت بیشترین جمعیت را داراست ؟
</nl>
<nl lang="es">
cual estado tiene la poblacion mas alta ?
</nl>
<nl lang="ja">
dono shuu wa mottomo ookii jinkou ga ariumasu ka ?
</nl>
<nl lang="tr">
hangi eyalet en yuksek nufusa sahiptir ?
</nl>
<syn lang="en">
(S کدام ایالت بیشترین جمعیت را داراست ؟)
</syn>
<syn lang="es">
(S cual estado tiene la poblacion mas alta)
</syn>
<syn lang="ja">
(S dono shuu wa mottomo ookii jinkou ga ariumasu ka)
</syn>
<syn lang="tr">
(S hangi eyalet en yuksek nufusa sahiptir)
</syn>
<augsyn lang="en">
(S What state-[State:2] has-[State:1] the highest-[State:1] population-[State:1])
</augsyn>
<mrl lang="geo-funql">
answer(largest_one(population_1(state(all))))
</mrl>
<mrl lang="geo-prolog">
answer(A,largest(B,(state(A),population(A,B))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ largest_one ( population_1 ( *n:State ) ) }) </node>
<node id="2"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="655">
<nl lang="en">
کدام ایالت بیشترین تراکم جمعیت را دارد ؟
</nl>
<syn lang="en">
(S کدام ایالت بیشترین تراکم جمعیت را دارد ؟)
</syn>
<augsyn lang="en">
(S What state-[State:2] has-[State:1] the highest-[State:1] population-[State:1] density-[State:1])
</augsyn>
<mrl lang="geo-funql">
answer(largest_one(density_1(state(all))))
</mrl>
<mrl lang="geo-prolog">
answer(A,largest(B,(state(A),density(A,B))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ largest_one ( density_1 ( *n:State ) ) }) </node>
<node id="2"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="656">
<nl lang="en">
کدام ایالت بیشترین مساحت را داراست ؟
</nl>
<syn lang="en">
(S کدام ایالت بیشترین مساحت را داراست ؟)
</syn>
<augsyn lang="en">
(S What state-[State:2] has-[State:1] the largest-[State:1] area-[State:1])
</augsyn>
<mrl lang="geo-funql">
answer(largest_one(area_1(state(all))))
</mrl>
<mrl lang="geo-prolog">
answer(A,largest(B,(state(A),area(A,B))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ largest_one ( area_1 ( *n:State ) ) }) </node>
<node id="2"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="657">
<nl lang="en">
کدام ایالت بزرگترین مرکز ایالت را دارد ؟
</nl>
<syn lang="en">
(S کدام ایالت بزرگترین مرکز ایالت را دارد ؟)
</syn>
<augsyn lang="en">
(S What state-[State:1] has-[State:2] the largest-[City:3] capital-[City:4])
</augsyn>
<mrl lang="geo-funql">
answer(state(loc_1(largest(capital(all)))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),loc(B,A),largest(B,capital(B))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ loc_1 ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ largest ( *n:City ) }) </node>
<node id="4"> *n:City -> ({ capital ( all ) }) </node>
</mrl-parse>
</example>

<example id="658">
<nl lang="en">
بزرگترین شهر در کدام ایالت واقع شده است ؟
</nl>
<syn lang="en">
(S بزرگترین شهر در کدام ایالت واقع شده است ؟)
</syn>
<augsyn lang="en">
(S What state-[State:1] has-[State:2] the largest-[City:3] city-[City:4])
</augsyn>
<mrl lang="geo-funql">
answer(state(loc_1(largest(city(all)))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),loc(B,A),largest(B,(city(B)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ loc_1 ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ largest ( *n:City ) }) </node>
<node id="4"> *n:City -> ({ city ( all ) }) </node>
</mrl-parse>
</example>

<example id="659">
<nl lang="en">
کدام ایالت دارای بزرگترین جمعیت است ؟
</nl>
<syn lang="en">
(S کدام ایالت دارای بزرگترین جمعیت است ؟)
</syn>
<augsyn lang="en">
(S What state-[State:2] has-[State:1] the largest-[State:1] population-[State:1])
</augsyn>
<mrl lang="geo-funql">
answer(largest_one(population_1(state(all))))
</mrl>
<mrl lang="geo-prolog">
answer(A,largest(B,(state(A),population(A,B))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ largest_one ( population_1 ( *n:State ) ) }) </node>
<node id="2"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="660">
<nl lang="en">
کدام ایالت بیشترین تراکم جمعیت را دارد ؟
</nl>
<nl lang="es">
que estado tiene la densidad de poblacion mas grande ?
</nl>
<nl lang="ja">
mottomo ookii jinkou no mitsudo ga aru shuu wa nan desu ka ?
</nl>
<nl lang="tr">
hangi eyalet en buyuk nufus yogunluguna sahiptir ?
</nl>
<syn lang="en">
(S کدام ایالت بیشترین تراکم جمعیت را دارد ؟)
</syn>
<syn lang="es">
(S que estado tiene la densidad de poblacion mas grande)
</syn>
<syn lang="ja">
(S mottomo ookii jinkou no mitsudo ga aru shuu wa nan desu ka)
</syn>
<syn lang="tr">
(S hangi eyalet en buyuk nufus yogunluguna sahiptir)
</syn>
<augsyn lang="en">
(S What state-[State:2] has-[State:1] the largest-[State:1] population-[State:1] density-[State:1])
</augsyn>
<mrl lang="geo-funql">
answer(largest_one(density_1(state(all))))
</mrl>
<mrl lang="geo-prolog">
answer(A,largest(B,(state(A),density(A,B))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ largest_one ( density_1 ( *n:State ) ) }) </node>
<node id="2"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="661">
<nl lang="en">
کدام ایالت بیشترین جمعیت شهری را دارد ؟
</nl>
<syn lang="en">
(S کدام ایالت بیشترین جمعیت شهری را دارد ؟)
</syn>
<augsyn lang="en">
(S What state-[State:2] has-[State:1] the largest-[State:1] urban-[State:1] population-[State:1])
</augsyn>
<mrl lang="geo-funql">
answer(largest_one(population_1(state(all))))
</mrl>
<mrl lang="geo-prolog">
answer(A,largest(B,(state(A),population(A,B))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ largest_one ( population_1 ( *n:State ) ) }) </node>
<node id="2"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="662">
<nl lang="en">
کدام ایالت بیشترین چگالی جمعیت را دارد ؟
</nl>
<syn lang="en">
(S کدام ایالت بیشترین چگالی جمعیت را دارد ؟)
</syn>
<augsyn lang="en">
(S What state-[State:2] has-[State:1] the least-[State:1] population-[State:1] density-[State:1])
</augsyn>
<mrl lang="geo-funql">
answer(smallest_one(density_1(state(all))))
</mrl>
<mrl lang="geo-prolog">
answer(A,smallest(B,(state(A),density(A,B))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ smallest_one ( density_1 ( *n:State ) ) }) </node>
<node id="2"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="663">
<nl lang="en">
کدام ایالت دارای بلند ترین رودخانه است ؟
</nl>
<syn lang="en">
(S کدام ایالت دارای بلند ترین رودخانه است ؟)
</syn>
<augsyn lang="en">
(S What state-[State:1] has-[State:2] the longest-[River:3] river-[River:4])
</augsyn>
<mrl lang="geo-funql">
answer(state(loc_1(longest(river(all)))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),loc(B,A),longest(B,river(B))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ loc_1 ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ longest ( *n:River ) }) </node>
<node id="4"> *n:River -> ({ river ( all ) }) </node>
</mrl-parse>
</example>

<example id="664">
<nl lang="en">
کدام ایالت کمترین تمرکز جمعیت را دارد ؟
</nl>
<syn lang="en">
(S کدام ایالت کمترین تمرکز جمعیت را دارد ؟)
</syn>
<augsyn lang="en">
(S What state-[State:2] has-[State:1] the lowest-[State:1] population-[State:1] density-[State:1])
</augsyn>
<mrl lang="geo-funql">
answer(smallest_one(density_1(state(all))))
</mrl>
<mrl lang="geo-prolog">
answer(A,smallest(B,(state(A),density(A,B))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ smallest_one ( density_1 ( *n:State ) ) }) </node>
<node id="2"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="665">
<nl lang="en">
کدام ایالت بیشترین تعداد شهرها را دارد ؟
</nl>
<syn lang="en">
(S کدام ایالت بیشترین تعداد شهرها را دارد ؟)
</syn>
<augsyn lang="en">
(S What state-[State:2] has-[State:3] the most-[State:1] cities-[City:4])
</augsyn>
<mrl lang="geo-funql">
answer(most(state(loc_1(city(all)))))
</mrl>
<mrl lang="geo-prolog">
answer(A,most(A,B,(state(A),loc(B,A),city(B))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ most ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ loc_1 ( *n:City ) }) </node>
<node id="4"> *n:City -> ({ city ( all ) }) </node>
</mrl-parse>
</example>

<example id="666">
<nl lang="en">
کدام ایالت بیشترین تعداد شهرهای عمده را دارد ؟
</nl>
<syn lang="en">
(S کدام ایالت بیشترین تعداد شهرهای عمده را دارد ؟)
</syn>
<augsyn lang="en">
(S What state-[State:2] has-[State:3] the most-[State:1] major-[City:4] cities-[City:5])
</augsyn>
<mrl lang="geo-funql">
answer(most(state(loc_1(major(city(all))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,most(A,B,(state(A),loc(B,A),major(B),city(B))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ most ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ loc_1 ( *n:City ) }) </node>
<node id="4"> *n:City -> ({ major ( *n:City ) }) </node>
<node id="5"> *n:City -> ({ city ( all ) }) </node>
</mrl-parse>
</example>

<example id="667">
<nl lang="en">
بیشترین رودهای عمده از کدام ایالت میگذرند ؟
</nl>
<syn lang="en">
(S بیشترین رودهای عمده از کدام ایالت میگذرند ؟)
</syn>
<augsyn lang="en">
(S What state-[State:2] has-[State:3] the most-[State:1] major-[River:4] rivers-[River:5] running-[State:3] through-[State:3] it-[State:3])
</augsyn>
<mrl lang="geo-funql">
answer(most(state(traverse_1(major(river(all))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,most(A,B,(state(A),major(B),river(B),traverse(B,A))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ most ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ traverse_1 ( *n:River ) }) </node>
<node id="4"> *n:River -> ({ major ( *n:River ) }) </node>
<node id="5"> *n:River -> ({ river ( all ) }) </node>
</mrl-parse>
</example>

<example id="668">
<nl lang="en">
کدام ایالت جمعیت بیشتری دارد ؟
</nl>
<syn lang="en">
(S کدام ایالت جمعیت بیشتری دارد ؟)
</syn>
<augsyn lang="en">
(S What state-[State:2] has-[State:1] the most-[State:1] people-[State:1])
</augsyn>
<mrl lang="geo-funql">
answer(largest_one(population_1(state(all))))
</mrl>
<mrl lang="geo-prolog">
answer(A,largest(B,(state(A),population(A,B))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ largest_one ( population_1 ( *n:State ) ) }) </node>
<node id="2"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="669">
<nl lang="en">
کدام ایالت رودهای بیشتری دارد ؟
</nl>
<syn lang="en">
(S کدام ایالت رودهای بیشتری دارد ؟)
</syn>
<augsyn lang="en">
(S What state-[State:2] has-[State:3] the most-[State:1] rivers-[River:4])
</augsyn>
<mrl lang="geo-funql">
answer(most(state(loc_1(river(all)))))
</mrl>
<mrl lang="geo-prolog">
answer(A,most(A,B,(state(A),loc(B,A),river(B))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ most ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ loc_1 ( *n:River ) }) </node>
<node id="4"> *n:River -> ({ river ( all ) }) </node>
</mrl-parse>
</example>

<example id="670">
<nl lang="en">
بیشترین رودخانه ها از کدام ایالت میگذرند ؟
</nl>
<syn lang="en">
(S بیشترین رودخانه ها از کدام ایالت میگذرند ؟)
</syn>
<augsyn lang="en">
(S What state-[State:2] has-[State:3] the most-[State:1] rivers-[River:4] running-[State:3] through-[State:3] it-[State:3])
</augsyn>
<mrl lang="geo-funql">
answer(most(state(traverse_1(river(all)))))
</mrl>
<mrl lang="geo-prolog">
answer(A,most(A,B,(state(A),river(B),traverse(B,A))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ most ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ traverse_1 ( *n:River ) }) </node>
<node id="4"> *n:River -> ({ river ( all ) }) </node>
</mrl-parse>
</example>

<example id="671">
<nl lang="en">
کوتاهترین رودخانه از کدام ایالت میگذرد ؟
</nl>
<syn lang="en">
(S کوتاهترین رودخانه از کدام ایالت میگذرد ؟)
</syn>
<augsyn lang="en">
(S What state-[State:1] has-[State:2] the shortest-[River:3] river-[River:4])
</augsyn>
<mrl lang="geo-funql">
answer(state(loc_1(shortest(river(all)))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),loc(B,A),shortest(B,river(B))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ loc_1 ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ shortest ( *n:River ) }) </node>
<node id="4"> *n:River -> ({ river ( all ) }) </node>
</mrl-parse>
</example>

<example id="672">
<nl lang="en">
کدام ایالت کمترین مساحت را دارد ؟
</nl>
<syn lang="en">
(S کدام ایالت کمترین مساحت را دارد ؟)
</syn>
<augsyn lang="en">
(S What state-[State:2] has-[State:1] the smallest-[State:1] area-[State:1])
</augsyn>
<mrl lang="geo-funql">
answer(smallest_one(area_1(state(all))))
</mrl>
<mrl lang="geo-prolog">
answer(A,smallest(B,(state(A),area(A,B))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ smallest_one ( area_1 ( *n:State ) ) }) </node>
<node id="2"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="673">
<nl lang="en">
کدام ایالت کوچکترین مرکز ایالت را دارد ؟
</nl>
<syn lang="en">
(S کدام ایالت کوچکترین مرکز ایالت را دارد ؟)
</syn>
<augsyn lang="en">
(S What state-[State:1] has-[State:2] the smallest-[City:3] capital-[City:4])
</augsyn>
<mrl lang="geo-funql">
answer(state(loc_1(smallest(capital(all)))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),loc(B,A),smallest(B,capital(B))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ loc_1 ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ smallest ( *n:City ) }) </node>
<node id="4"> *n:City -> ({ capital ( all ) }) </node>
</mrl-parse>
</example>

<example id="674">
<nl lang="en">
کدام ایالت جمعیت کمتری دارد ؟
</nl>
<syn lang="en">
(S کدام ایالت جمعیت کمتری دارد ؟)
</syn>
<augsyn lang="en">
(S What state-[State:2] has-[State:1] the smallest-[State:1] population-[State:1])
</augsyn>
<mrl lang="geo-funql">
answer(smallest_one(population_1(state(all))))
</mrl>
<mrl lang="geo-prolog">
answer(A,smallest(B,(state(A),population(A,B))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ smallest_one ( population_1 ( *n:State ) ) }) </node>
<node id="2"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="675">
<nl lang="en">
کدام ایالت تراکم جمعیت کمتری دارد ؟
</nl>
<syn lang="en">
(S کدام ایالت تراکم جمعیت کمتری دارد ؟)
</syn>
<augsyn lang="en">
(S What state-[State:2] has-[State:1] the smallest-[State:1] population-[State:1] density-[State:1])
</augsyn>
<mrl lang="geo-funql">
answer(smallest_one(density_1(state(all))))
</mrl>
<mrl lang="geo-prolog">
answer(A,smallest(B,(state(A),density(A,B))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ smallest_one ( density_1 ( *n:State ) ) }) </node>
<node id="2"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="676">
<nl lang="en">
کدام ایالت کوچکترین جمعیت شهری را دارد ؟
</nl>
<syn lang="en">
(S کدام ایالت کوچکترین جمعیت شهری را دارد ؟)
</syn>
<augsyn lang="en">
(S What state-[State:2] has-[State:1] the smallest-[State:1] urban-[State:1] population-[State:1])
</augsyn>
<mrl lang="geo-funql">
answer(smallest_one(population_1(state(all))))
</mrl>
<mrl lang="geo-prolog">
answer(A,smallest(B,(state(A),population(A,B))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ smallest_one ( population_1 ( *n:State ) ) }) </node>
<node id="2"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="677">
<nl lang="en">
کدام ایالت پراکنده ترین جمعیت را دارد ؟
</nl>
<syn lang="en">
(S کدام ایالت پراکنده ترین جمعیت را دارد ؟)
</syn>
<augsyn lang="en">
(S What state-[State:2] has-[State:1] the sparsest-[State:1] population-[State:1] density-[State:1])
</augsyn>
<mrl lang="geo-funql">
answer(smallest_one(density_1(state(all))))
</mrl>
<mrl lang="geo-prolog">
answer(A,smallest(B,(state(A),density(A,B))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ smallest_one ( density_1 ( *n:State ) ) }) </node>
<node id="2"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="678">
<nl lang="en">
آستین در کدام ایالت است ؟
</nl>
<syn lang="en">
(S آستین در کدام ایالت است ؟)
</syn>
<augsyn lang="en">
(S What state-[State:1] is-[State:2] Austin-[CityName:4] in-[State:2])
</augsyn>
<mrl lang="geo-funql">
answer(state(loc_1(cityid('austin', _))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),const(B,cityid(austin,_)),loc(B,A)))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ loc_1 ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ cityid ( *n:CityName , _ ) }) </node>
<node id="4"> *n:CityName -> ({ ' austin ' }) </node>
</mrl-parse>
</example>

<example id="679">
<nl lang="en">
آستین پایتخت کدام ایالت است ؟
</nl>
<syn lang="en">
(S آستین پایتخت کدام ایالت است ؟)
</syn>
<augsyn lang="en">
(S What state-[State:1] is-[State:2] Austin-[CityName:5] the capital-[City:3] of-[State:2])
</augsyn>
<mrl lang="geo-funql">
answer(state(loc_1(capital(cityid('austin', _)))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),const(B,cityid(austin,_)),capital(B),loc(B,A)))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ loc_1 ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ capital ( *n:City ) }) </node>
<node id="4"> *n:City -> ({ cityid ( *n:CityName , _ ) }) </node>
<node id="5"> *n:CityName -> ({ ' austin ' }) </node>
</mrl-parse>
</example>

<example id="680">
<nl lang="en">
بوستون در کدام ایالت است ؟
</nl>
<syn lang="en">
(S بوستون در کدام ایالت است ؟)
</syn>
<augsyn lang="en">
(S What state-[State:1] is-[State:2] Boston-[CityName:4] in-[State:2])
</augsyn>
<mrl lang="geo-funql">
answer(state(loc_1(cityid('boston', _))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),const(B,cityid(boston,_)),loc(B,A)))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ loc_1 ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ cityid ( *n:CityName , _ ) }) </node>
<node id="4"> *n:CityName -> ({ ' boston ' }) </node>
</mrl-parse>
</example>

<example id="681">
<nl lang="en">
کلمبوس پایتخت کدام ایالت است ؟
</nl>
<nl lang="es">
de cual estado es columbus la capital ?
</nl>
<nl lang="ja">
koronbaasu wa dono shuu no shuto desu ka ?
</nl>
<nl lang="tr">
columbus hangi eyaletin baskentidir ?
</nl>
<syn lang="en">
(S کلمبوس پایتخت کدام ایالت است ؟)
</syn>
<syn lang="es">
(S de cual estado es columbus la capital)
</syn>
<syn lang="ja">
(S koronbaasu wa dono shuu no shuto desu ka)
</syn>
<syn lang="tr">
(S columbus hangi eyaletin baskentidir)
</syn>
<augsyn lang="en">
(S What state-[State:1] is-[State:2] Columbus-[CityName:5] the capital-[City:3] of-[State:2])
</augsyn>
<mrl lang="geo-funql">
answer(state(loc_1(capital(cityid('columbus', _)))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),const(B,cityid(columbus,_)),capital(B),loc(B,A)))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ loc_1 ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ capital ( *n:City ) }) </node>
<node id="4"> *n:City -> ({ cityid ( *n:CityName , _ ) }) </node>
<node id="5"> *n:CityName -> ({ ' columbus ' }) </node>
</mrl-parse>
</example>

<example id="682">
<nl lang="en">
دالاس در کدام ایالت است ؟
</nl>
<syn lang="en">
(S دالاس در کدام ایالت است ؟)
</syn>
<augsyn lang="en">
(S What state-[State:1] is-[State:2] Dallas-[CityName:4] in-[State:2])
</augsyn>
<mrl lang="geo-funql">
answer(state(loc_1(cityid('dallas', _))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),const(B,cityid(dallas,_)),loc(B,A)))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ loc_1 ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ cityid ( *n:CityName , _ ) }) </node>
<node id="4"> *n:CityName -> ({ ' dallas ' }) </node>
</mrl-parse>
</example>

<example id="683">
<nl lang="en">
دس موییز در کدام ایالت واقع شده است ؟
</nl>
<nl lang="es">
en que estado se encuentra des moines ?
</nl>
<nl lang="ja">
demoin wa dono shuu ni arimasu ka ?
</nl>
<nl lang="tr">
des moines hangi eyalettedir ?
</nl>
<syn lang="en">
(S دس موییز در کدام ایالت واقع شده است ؟)
</syn>
<syn lang="es">
(S en que estado se encuentra des_moines)
</syn>
<syn lang="ja">
(S demoin wa dono shuu ni arimasu ka)
</syn>
<syn lang="tr">
(S des_moines hangi eyalettedir)
</syn>
<augsyn lang="en">
(S What state-[State:1] is-[State:2] Des-[CityName:4] Moines-[CityName:4] located-[State:2] in-[State:2])
</augsyn>
<mrl lang="geo-funql">
answer(state(loc_1(cityid('des moines', _))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),const(B,cityid('des moines',_)),loc(B,A)))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ loc_1 ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ cityid ( *n:CityName , _ ) }) </node>
<node id="4"> *n:CityName -> ({ ' des moines ' }) </node>
</mrl-parse>
</example>

<example id="684">
<nl lang="en">
میامی در کدام ایالت است ؟
</nl>
<syn lang="en">
(S میامی در کدام ایالت است ؟)
</syn>
<augsyn lang="en">
(S What state-[State:1] is-[State:2] Miami-[CityName:4] in-[State:2])
</augsyn>
<mrl lang="geo-funql">
answer(state(loc_1(cityid('miami', _))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),const(B,cityid(miami,_)),loc(B,A)))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ loc_1 ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ cityid ( *n:CityName , _ ) }) </node>
<node id="4"> *n:CityName -> ({ ' miami ' }) </node>
</mrl-parse>
</example>

<example id="685">
<nl lang="en">
پطزبورگ در کدام ایالت است ؟
</nl>
<syn lang="en">
(S پطزبورگ در کدام ایالت است ؟)
</syn>
<augsyn lang="en">
(S What state-[State:1] is-[State:2] Pittsburgh-[CityName:4] in-[State:2])
</augsyn>
<mrl lang="geo-funql">
answer(state(loc_1(cityid('pittsburgh', _))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),const(B,cityid(pittsburgh,_)),loc(B,A)))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ loc_1 ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ cityid ( *n:CityName , _ ) }) </node>
<node id="4"> *n:CityName -> ({ ' pittsburgh ' }) </node>
</mrl-parse>
</example>

<example id="686">
<nl lang="en">
بزرگترین ایالت کدامست ؟
</nl>
<syn lang="en">
(S بزرگترین ایالت کدامست ؟)
</syn>
<augsyn lang="en">
(S What state-[State:2] is-[State:1] the biggest-[State:1])
</augsyn>
<mrl lang="geo-funql">
answer(largest(state(all)))
</mrl>
<mrl lang="geo-prolog">
answer(A,largest(A,state(A)))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ largest ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="687">
<nl lang="en">
بزرگترین ایالت از نظر جمعیت کدام است ؟
</nl>
<syn lang="en">
(S بزرگترین ایالت از نظر جمعیت کدام است ؟)
</syn>
<augsyn lang="en">
(S What state-[State:2] is-[State:1] the largest-[State:1] in-[State:1] population-[State:1])
</augsyn>
<mrl lang="geo-funql">
answer(largest_one(population_1(state(all))))
</mrl>
<mrl lang="geo-prolog">
answer(A,largest(B,(state(A),population(A,B))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ largest_one ( population_1 ( *n:State ) ) }) </node>
<node id="2"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="688">
<nl lang="en">
کدام ایالت دارای بیشترین رودخانه هاست ؟
</nl>
<syn lang="en">
(S کدام ایالت دارای بیشترین رودخانه هاست ؟)
</syn>
<augsyn lang="en">
(S What state-[State:1] is-[State:1] the state-[State:3] with-[State:4] the most-[State:2] rivers-[River:5])
</augsyn>
<mrl lang="geo-funql">
answer(state(most(state(loc_1(river(all))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),most(A,B,(state(A),loc(B,A),river(B)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ most ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ loc_1 ( *n:River ) }) </node>
<node id="5"> *n:River -> ({ river ( all ) }) </node>
</mrl-parse>
</example>

<example id="689">
<nl lang="en">
کدام ایالت همجوار تگزاس دارای بیشترین جمعیت است ؟
</nl>
<syn lang="en">
(S کدام ایالت همجوار تگزاس دارای بیشترین جمعیت است ؟)
</syn>
<augsyn lang="en">
(S What state-[State:2] that borders-[State:3] Texas-[StateName:5] has-[State:1] the highest-[State:1] population-[State:1])
</augsyn>
<mrl lang="geo-funql">
answer(largest_one(population_1(state(next_to_2(stateid('texas'))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,largest(B,(state(A),next_to(A,C),const(C,stateid(texas)),population(A,B))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ largest_one ( population_1 ( *n:State ) ) }) </node>
<node id="2"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' texas ' }) </node>
</mrl-parse>
</example>

<example id="690">
<nl lang="en">
کدام ایالت همجوار تگزاس بزرگتر است ؟
</nl>
<syn lang="en">
(S کدام ایالت همجوار تگزاس بزرگتر است ؟)
</syn>
<augsyn lang="en">
(S What state-[State:2] that borders-[State:3] Texas-[StateName:5] is-[State:1] the largest-[State:1])
</augsyn>
<mrl lang="geo-funql">
answer(largest(state(next_to_2(stateid('texas')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,largest(A,(state(A),next_to(A,B),const(B,stateid(texas)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ largest ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' texas ' }) </node>
</mrl-parse>
</example>

<example id="691">
<nl lang="en">
کدام ایالتی که میسیسیپی از آن عبور میکند دارای بیشترین جمعیت است ؟
</nl>
<syn lang="en">
(S کدام ایالتی که میسیسیپی از آن عبور میکند دارای بیشترین جمعیت است ؟)
</syn>
<augsyn lang="en">
(S What state-[State:2] which the Mississippi-[RiverName:5] runs-[State:3] through-[State:3] has-[State:1] the largest-[State:1] population-[State:1])
</augsyn>
<mrl lang="geo-funql">
answer(largest_one(population_1(state(traverse_1(riverid('mississippi'))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,largest(B,(state(A),const(C,riverid(mississippi)),traverse(C,A),population(A,B))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ largest_one ( population_1 ( *n:State ) ) }) </node>
<node id="2"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ traverse_1 ( *n:River ) }) </node>
<node id="4"> *n:River -> ({ riverid ( *n:RiverName ) }) </node>
<node id="5"> *n:RiverName -> ({ ' mississippi ' }) </node>
</mrl-parse>
</example>

<example id="692">
<nl lang="en">
کدام ایالات همجوار آریزونا هستند ؟
</nl>
<syn lang="en">
(S کدام ایالات همجوار آریزونا هستند ؟)
</syn>
<augsyn lang="en">
(S What states-[State:1] are-[State:2] next-[State:2] to-[State:2] Arizona-[StateName:4])
</augsyn>
<mrl lang="geo-funql">
answer(state(next_to_2(stateid('arizona'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),next_to(A,B),const(B,stateid(arizona))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="4"> *n:StateName -> ({ ' arizona ' }) </node>
</mrl-parse>
</example>

<example id="693">
<nl lang="en">
کدام ایالات همجوار تگزاس هستند ؟
</nl>
<syn lang="en">
(S کدام ایالات همجوار تگزاس هستند ؟)
</syn>
<augsyn lang="en">
(S What states-[State:1] are-[State:2] next-[State:2] to-[State:2] Texas-[StateName:4])
</augsyn>
<mrl lang="geo-funql">
answer(state(next_to_2(stateid('texas'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),next_to(A,B),const(B,stateid(texas))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="4"> *n:StateName -> ({ ' texas ' }) </node>
</mrl-parse>
</example>

<example id="694">
<nl lang="en">
کدام ایالات همجوار میسیسیپی هستند ؟
</nl>
<syn lang="en">
(S کدام ایالات همجوار میسیسیپی هستند ؟)
</syn>
<augsyn lang="en">
(S What states-[State:1] are-[State:2] next-[State:2] to-[State:2] the Mississippi-[StateName:4])
</augsyn>
<mrl lang="geo-funql">
answer(state(next_to_2(stateid('mississippi'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),next_to(A,B),const(B,stateid(mississippi))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="4"> *n:StateName -> ({ ' mississippi ' }) </node>
</mrl-parse>
</example>

<example id="695">
<nl lang="en">
کدام ایالات با آلاسکا هم مرزند ؟
</nl>
<syn lang="en">
(S کدام ایالات با آلاسکا هم مرزند ؟)
</syn>
<augsyn lang="en">
(S What states-[State:1] border-[State:2] Alaska-[StateName:4])
</augsyn>
<mrl lang="geo-funql">
answer(state(next_to_2(stateid('alaska'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),next_to(A,B),const(B,stateid(alaska))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="4"> *n:StateName -> ({ ' alaska ' }) </node>
</mrl-parse>
</example>

<example id="696">
<nl lang="en">
کدام ایالات با آرکانزاس هم مرز هستند ؟
</nl>
<nl lang="es">
cuales estados bordean a arkansas ?
</nl>
<nl lang="ja">
aakansaa ni rinsetsu suru shuu wa nan desu ka ?
</nl>
<nl lang="tr">
arkansas a siniri olan eyaletler nelerdir ?
</nl>
<syn lang="en">
(S کدام ایالات با آرکانزاس هم مرز هستند ؟)
</syn>
<syn lang="es">
(S cuales estados bordean a arkansas)
</syn>
<syn lang="ja">
(S aakansaa ni rinsetsu suru shuu wa nan desu ka)
</syn>
<syn lang="tr">
(S arkansas a siniri olan eyaletler nelerdir)
</syn>
<augsyn lang="en">
(S What states-[State:1] border-[State:2] Arkansas-[StateName:4])
</augsyn>
<mrl lang="geo-funql">
answer(state(next_to_2(stateid('arkansas'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),next_to(A,B),const(B,stateid(arkansas))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="4"> *n:StateName -> ({ ' arkansas ' }) </node>
</mrl-parse>
</example>

<example id="697">
<nl lang="en">
کدام ایالت ها هم مرز دلاور هستند ؟
</nl>
<nl lang="es">
cuales estados bordean a delaware ?
</nl>
<nl lang="ja">
derawaru ni rinsetsu suru shuu wa nan desu ka ?
</nl>
<nl lang="tr">
delaware a siniri olan eyaletler nelerdir ?
</nl>
<syn lang="en">
(S کدام ایالت ها هم مرز دلاور هستند ؟)
</syn>
<syn lang="es">
(S cuales estados bordean a delaware)
</syn>
<syn lang="ja">
(S derawaru ni rinsetsu suru shuu wa nan desu ka)
</syn>
<syn lang="tr">
(S delaware a siniri olan eyaletler nelerdir)
</syn>
<augsyn lang="en">
(S What states-[State:1] border-[State:2] Delaware-[StateName:4])
</augsyn>
<mrl lang="geo-funql">
answer(state(next_to_2(stateid('delaware'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),next_to(A,B),const(B,stateid(delaware))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="4"> *n:StateName -> ({ ' delaware ' }) </node>
</mrl-parse>
</example>

<example id="698">
<nl lang="en">
کدام ایالات هم مرز فلوریدا هستند ؟
</nl>
<nl lang="es">
cuales estados bordean a florida ?
</nl>
<nl lang="ja">
furorida ni rinsetsu suru shuu wa nan desu ka ?
</nl>
<nl lang="tr">
florida a siniri olan eyaletler nelerdir ?
</nl>
<syn lang="en">
(S کدام ایالات هم مرز فلوریدا هستند ؟)
</syn>
<syn lang="es">
(S cuales estados bordean a florida)
</syn>
<syn lang="ja">
(S furorida ni rinsetsu suru shuu wa nan desu ka)
</syn>
<syn lang="tr">
(S florida a siniri olan eyaletler nelerdir)
</syn>
<augsyn lang="en">
(S What states-[State:1] border-[State:2] Florida-[StateName:4])
</augsyn>
<mrl lang="geo-funql">
answer(state(next_to_2(stateid('florida'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),next_to(A,B),const(B,stateid(florida))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="4"> *n:StateName -> ({ ' florida ' }) </node>
</mrl-parse>
</example>

<example id="699">
<nl lang="en">
کدام ایالات همجوار جورجیا هستند ؟
</nl>
<nl lang="es">
cuales estados bordean a georgia ?
</nl>
<nl lang="ja">
joojaa ni rinsetsu suru shuu wa nan desu ka ?
</nl>
<nl lang="tr">
georgia a siniri olan eyaletler nelerdir ?
</nl>
<syn lang="en">
(S کدام ایالات همجوار جورجیا هستند ؟)
</syn>
<syn lang="es">
(S cuales estados bordean a georgia)
</syn>
<syn lang="ja">
(S joojaa ni rinsetsu suru shuu wa nan desu ka)
</syn>
<syn lang="tr">
(S georgia a siniri olan eyaletler nelerdir)
</syn>
<augsyn lang="en">
(S What states-[State:1] border-[State:2] Georgia-[StateName:4])
</augsyn>
<mrl lang="geo-funql">
answer(state(next_to_2(stateid('georgia'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),next_to(A,B),const(B,stateid(georgia))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="4"> *n:StateName -> ({ ' georgia ' }) </node>
</mrl-parse>
</example>

<example id="700">
<nl lang="en">
کدام ایالات همجوار هاوایی هستند ؟
</nl>
<nl lang="es">
cuales estados bordean a hawaii ?
</nl>
<nl lang="ja">
hawai ni rinsetsu suru shuu wa nan desu ka ?
</nl>
<nl lang="tr">
hawaii a siniri olan eyaletler nelerdir ?
</nl>
<syn lang="en">
(S کدام ایالات همجوار هاوایی هستند ؟)
</syn>
<syn lang="es">
(S cuales estados bordean a hawaii)
</syn>
<syn lang="ja">
(S hawai ni rinsetsu suru shuu wa nan desu ka)
</syn>
<syn lang="tr">
(S hawaii a siniri olan eyaletler nelerdir)
</syn>
<augsyn lang="en">
(S What states-[State:1] border-[State:2] Hawaii-[StateName:4])
</augsyn>
<mrl lang="geo-funql">
answer(state(next_to_2(stateid('hawaii'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),next_to(A,B),const(B,stateid(hawaii))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="4"> *n:StateName -> ({ ' hawaii ' }) </node>
</mrl-parse>
</example>

<example id="701">
<nl lang="en">
کدام ایالت ها همجوار ایندیانا هستند ؟
</nl>
<nl lang="es">
cuales estados bordean a indiana ?
</nl>
<nl lang="ja">
indiana ni rinsetsu suru shuu wa nan desu ka ?
</nl>
<nl lang="tr">
indiana a siniri olan eyaletler nelerdir ?
</nl>
<syn lang="en">
(S کدام ایالت ها همجوار ایندیانا هستند ؟)
</syn>
<syn lang="es">
(S cuales estados bordean a indiana)
</syn>
<syn lang="ja">
(S indiana ni rinsetsu suru shuu wa nan desu ka)
</syn>
<syn lang="tr">
(S indiana a siniri olan eyaletler nelerdir)
</syn>
<augsyn lang="en">
(S What states-[State:1] border-[State:2] Indiana-[StateName:4])
</augsyn>
<mrl lang="geo-funql">
answer(state(next_to_2(stateid('indiana'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),next_to(A,B),const(B,stateid(indiana))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="4"> *n:StateName -> ({ ' indiana ' }) </node>
</mrl-parse>
</example>

<example id="702">
<nl lang="en">
کدام ایالت ها هم مرز کنتاکی هستند ؟
</nl>
<nl lang="es">
cuales estados bordean a kentucky ?
</nl>
<nl lang="ja">
kentakkii ni rinsetsu suru shuu wa nan desu ka ?
</nl>
<nl lang="tr">
kentucky a siniri olan eyaletler nelerdir ?
</nl>
<syn lang="en">
(S کدام ایالت ها هم مرز کنتاکی هستند ؟)
</syn>
<syn lang="es">
(S cuales estados bordean a kentucky)
</syn>
<syn lang="ja">
(S kentakkii ni rinsetsu suru shuu wa nan desu ka)
</syn>
<syn lang="tr">
(S kentucky a siniri olan eyaletler nelerdir)
</syn>
<augsyn lang="en">
(S What states-[State:1] border-[State:2] Kentucky-[StateName:4])
</augsyn>
<mrl lang="geo-funql">
answer(state(next_to_2(stateid('kentucky'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),next_to(A,B),const(B,stateid(kentucky))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="4"> *n:StateName -> ({ ' kentucky ' }) </node>
</mrl-parse>
</example>

<example id="703">
<nl lang="en">
کدام ایالات هم مرز میشیگان هستند ؟
</nl>
<syn lang="en">
(S کدام ایالات هم مرز میشیگان هستند ؟)
</syn>
<augsyn lang="en">
(S What states-[State:1] border-[State:2] Michigan-[StateName:4])
</augsyn>
<mrl lang="geo-funql">
answer(state(next_to_2(stateid('michigan'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),next_to(A,B),const(B,stateid(michigan))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="4"> *n:StateName -> ({ ' michigan ' }) </node>
</mrl-parse>
</example>

<example id="704">
<nl lang="en">
کدام ایالات با مسیوری همجوار هستند ؟
</nl>
<syn lang="en">
(S کدام ایالات با مسیوری همجوار هستند ؟)
</syn>
<augsyn lang="en">
(S What states-[State:1] border-[State:2] Missouri-[StateName:4])
</augsyn>
<mrl lang="geo-funql">
answer(state(next_to_2(stateid('missouri'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),next_to(A,B),const(B,stateid(missouri))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="4"> *n:StateName -> ({ ' missouri ' }) </node>
</mrl-parse>
</example>

<example id="705">
<nl lang="en">
کدام ایالات هم مرز مونتانا هستند ؟
</nl>
<nl lang="es">
cuales estados bordean a montana ?
</nl>
<nl lang="ja">
montana ni rinsetsu suru shuu wa nan desu ka ?
</nl>
<nl lang="tr">
montana a siniri olan eyaletler nelerdir ?
</nl>
<syn lang="en">
(S کدام ایالات هم مرز مونتانا هستند ؟)
</syn>
<syn lang="es">
(S cuales estados bordean a montana)
</syn>
<syn lang="ja">
(S montana ni rinsetsu suru shuu wa nan desu ka)
</syn>
<syn lang="tr">
(S montana a siniri olan eyaletler nelerdir)
</syn>
<augsyn lang="en">
(S What states-[State:1] border-[State:2] Montana-[StateName:4])
</augsyn>
<mrl lang="geo-funql">
answer(state(next_to_2(stateid('montana'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),next_to(A,B),const(B,stateid(montana))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="4"> *n:StateName -> ({ ' montana ' }) </node>
</mrl-parse>
</example>

<example id="706">
<nl lang="en">
کدام ایالات همجوار نیوهمپشایر هستند ؟
</nl>
<nl lang="es">
cuales estados bordean a new hampshire ?
</nl>
<nl lang="ja">
nyuu hanpushaa ni rinsetsu suru shuu wa nan desu ka ?
</nl>
<nl lang="tr">
new hampshire a siniri olan eyaletler nelerdir ?
</nl>
<syn lang="en">
(S کدام ایالات همجوار نیوهمپشایر هستند ؟)
</syn>
<syn lang="es">
(S cuales estados bordean a new_hampshire)
</syn>
<syn lang="ja">
(S nyuu_hanpushaa ni rinsetsu suru shuu wa nan desu ka)
</syn>
<syn lang="tr">
(S new_hampshire a siniri olan eyaletler nelerdir)
</syn>
<augsyn lang="en">
(S What states-[State:1] border-[State:2] New-[StateName:4] Hampshire-[StateName:4])
</augsyn>
<mrl lang="geo-funql">
answer(state(next_to_2(stateid('new hampshire'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),next_to(A,B),const(B,stateid('new hampshire'))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="4"> *n:StateName -> ({ ' new hampshire ' }) </node>
</mrl-parse>
</example>

<example id="707">
<nl lang="en">
کدام ایالات همجوار نیوجرسی هستند ؟
</nl>
<nl lang="es">
cuales estados bordean a new jersey ?
</nl>
<nl lang="ja">
nyuu jaajii ni rinsetsu suru shuu wa nan desu ka ?
</nl>
<nl lang="tr">
new jersey a siniri olan eyaletler nelerdir ?
</nl>
<syn lang="en">
(S کدام ایالات همجوار نیوجرسی هستند ؟)
</syn>
<syn lang="es">
(S cuales estados bordean a new_jersey)
</syn>
<syn lang="ja">
(S nyuu_jaajii ni rinsetsu suru shuu wa nan desu ka)
</syn>
<syn lang="tr">
(S new_jersey a siniri olan eyaletler nelerdir)
</syn>
<augsyn lang="en">
(S What states-[State:1] border-[State:2] New-[StateName:4] Jersey-[StateName:4])
</augsyn>
<mrl lang="geo-funql">
answer(state(next_to_2(stateid('new jersey'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),next_to(A,B),const(B,stateid('new jersey'))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="4"> *n:StateName -> ({ ' new jersey ' }) </node>
</mrl-parse>
</example>

<example id="708">
<nl lang="en">
کدام ایالات همجوار اوهایو هستند ؟
</nl>
<nl lang="es">
cuales estados bordean a ohio ?
</nl>
<nl lang="ja">
ohaio ni rinsetsu suru shuu wa nan desu ka ?
</nl>
<nl lang="tr">
ohio ya siniri bulunan eyaletler nelerdir ?
</nl>
<syn lang="en">
(S کدام ایالات همجوار اوهایو هستند ؟)
</syn>
<syn lang="es">
(S cuales estados bordean a ohio)
</syn>
<syn lang="ja">
(S ohaio ni rinsetsu suru shuu wa nan desu ka)
</syn>
<syn lang="tr">
(S ohio ya siniri bulunan eyaletler nelerdir)
</syn>
<augsyn lang="en">
(S What states-[State:1] border-[State:2] Ohio-[StateName:4])
</augsyn>
<mrl lang="geo-funql">
answer(state(next_to_2(stateid('ohio'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),next_to(A,B),const(B,stateid(ohio))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="4"> *n:StateName -> ({ ' ohio ' }) </node>
</mrl-parse>
</example>

<example id="709">
<nl lang="en">
کدام ایالات همجوار رودایلند هستند ؟
</nl>
<nl lang="es">
cuales estados bordean a rhode island ?
</nl>
<nl lang="ja">
roodoairando ni rinsetsu suru shuu wa nan desu ka ?
</nl>
<nl lang="tr">
rhode island a siniri olan eyaletler nelerdir ?
</nl>
<syn lang="en">
(S کدام ایالات همجوار رودایلند هستند ؟)
</syn>
<syn lang="es">
(S cuales estados bordean a rhode island)
</syn>
<syn lang="ja">
(S roodoairando ni rinsetsu suru shuu wa nan desu ka)
</syn>
<syn lang="tr">
(S rhode island a siniri olan eyaletler nelerdir)
</syn>
<augsyn lang="en">
(S What states-[State:1] border-[State:2] Rhode-[StateName:4] Island-[StateName:4])
</augsyn>
<mrl lang="geo-funql">
answer(state(next_to_2(stateid('rhode island'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),next_to(A,B),const(B,stateid('rhode island'))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="4"> *n:StateName -> ({ ' rhode island ' }) </node>
</mrl-parse>
</example>

<example id="710">
<nl lang="en">
کدام ایالات همجوار ایالت هایی هستند که با کلرادو هم مرز هستند ؟
</nl>
<syn lang="en">
(S کدام ایالات همجوار ایالت هایی هستند که با کلرادو هم مرز هستند ؟)
</syn>
<augsyn lang="en">
(S What states-[State:1] border-[State:2] states-[State:3] that border-[State:4] Colorado-[StateName:6])
</augsyn>
<mrl lang="geo-funql">
answer(state(next_to_2(state(next_to_2(stateid('colorado'))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),next_to(A,B),state(B),next_to(B,C),const(C,stateid(colorado))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="6"> *n:StateName -> ({ ' colorado ' }) </node>
</mrl-parse>
</example>

<example id="711">
<nl lang="en">
کدام ایالات همجوار ایالت هایی هستند که با میسیسیپی هم مرز هستند ؟
</nl>
<syn lang="en">
(S کدام ایالات همجوار ایالت هایی هستند که با میسیسیپی هم مرز هستند ؟)
</syn>
<augsyn lang="en">
(S What states-[State:1] border-[State:2] states-[State:3] that border-[State:4] Mississippi-[StateName:6])
</augsyn>
<mrl lang="geo-funql">
answer(state(next_to_2(state(next_to_2(stateid('mississippi'))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),next_to(A,B),state(B),next_to(B,C),const(C,stateid(mississippi))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="6"> *n:StateName -> ({ ' mississippi ' }) </node>
</mrl-parse>
</example>

<example id="712">
<nl lang="en">
کدام ایالات همجوار ایالات هایی هستند که با ایالت های هم مرز فلوریدا همسایه هستند ؟
</nl>
<syn lang="en">
(S کدام ایالات همجوار ایالات هایی هستند که با ایالت های هم مرز فلوریدا همسایه هستند ؟)
</syn>
<augsyn lang="en">
(S What states-[State:1] border-[State:2] states-[State:3] that border-[State:4] states-[State:5] that border-[State:6] Florida-[StateName:8])
</augsyn>
<mrl lang="geo-funql">
answer(state(next_to_2(state(next_to_2(state(next_to_2(stateid('florida'))))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),next_to(A,B),state(B),next_to(B,C),state(C),next_to(C,D),const(D,stateid(florida))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="6"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="7"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="8"> *n:StateName -> ({ ' florida ' }) </node>
</mrl-parse>
</example>

<example id="713">
<nl lang="en">
کدام ایالت ها همسایه ایالت هایی هست که همر مرز ایالاتی هساند که همجوار ایالت هایی هستند که با تکزاس مرز مشترک دارند ؟
</nl>
<syn lang="en">
(S کدام ایالت ها همسایه ایالت هایی هست که همر مرز ایالاتی هساند که همجوار ایالت هایی هستند که با تکزاس مرز مشترک دارند ؟)
</syn>
<augsyn lang="en">
(S What states-[State:1] border-[State:2] states-[State:3] that border-[State:4] states-[State:5] that border-[State:6] states-[State:7] that border-[State:8] Texas-[StateName:10])
</augsyn>
<mrl lang="geo-funql">
answer(state(next_to_2(state(next_to_2(state(next_to_2(state(next_to_2(stateid('texas'))))))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),next_to(A,B),state(B),next_to(B,C),state(C),next_to(C,D),state(D),next_to(D,E),const(E,stateid(texas))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="6"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="7"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="8"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="9"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="10"> *n:StateName -> ({ ' texas ' }) </node>
</mrl-parse>
</example>

<example id="714">
<nl lang="en">
کدام ایالت ها هم مرز ایالات هم مرز پر جمعیت ترین ایالت هستند ؟
</nl>
<syn lang="en">
(S کدام ایالت ها هم مرز ایالات هم مرز پر جمعیت ترین ایالت هستند ؟)
</syn>
<augsyn lang="en">
(S What states-[State:1] border-[State:2] states-[State:3] that border-[State:4] the state-[State:6] with-[State:5] the largest-[State:5] population-[State:5])
</augsyn>
<mrl lang="geo-funql">
answer(state(next_to_2(state(next_to_2(largest_one(population_1(state(all))))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),next_to(A,B),state(B),next_to(B,C),largest(D,(state(C),population(C,D)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ largest_one ( population_1 ( *n:State ) ) }) </node>
<node id="6"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="715">
<nl lang="en">
کدام ایالت ها هم مرز ایالت هایی هستند که میسیسیپی از آنها عبور میکند ؟
</nl>
<syn lang="en">
(S کدام ایالت ها هم مرز ایالت هایی هستند که میسیسیپی از آنها عبور میکند ؟)
</syn>
<augsyn lang="en">
(S What states-[State:1] border-[State:2] states-[State:3] that the Mississsippi-[RiverName:6] runs-[State:4] through-[State:4])
</augsyn>
<mrl lang="geo-funql">
answer(state(next_to_2(state(traverse_1(riverid('mississippi'))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),next_to(A,B),state(B),const(C,riverid(mississippi)),traverse(C,B)))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ traverse_1 ( *n:River ) }) </node>
<node id="5"> *n:River -> ({ riverid ( *n:RiverName ) }) </node>
<node id="6"> *n:RiverName -> ({ ' mississippi ' }) </node>
</mrl-parse>
</example>

<example id="716">
<nl lang="en">
کدام ایالت ها هم مرز ایالت هایی هستند که اوهایو از آنها میگذرد ؟
</nl>
<syn lang="en">
(S کدام ایالت ها هم مرز ایالت هایی هستند که اوهایو از آنها میگذرد ؟)
</syn>
<augsyn lang="en">
(S What states-[State:1] border-[State:2] states-[State:3] that the Ohio-[RiverName:6] runs-[State:4] through-[State:4])
</augsyn>
<mrl lang="geo-funql">
answer(state(next_to_2(state(traverse_1(riverid('ohio'))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),next_to(A,B),state(B),const(C,riverid(ohio)),traverse(C,B)))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ traverse_1 ( *n:River ) }) </node>
<node id="5"> *n:River -> ({ riverid ( *n:RiverName ) }) </node>
<node id="6"> *n:RiverName -> ({ ' ohio ' }) </node>
</mrl-parse>
</example>

<example id="717">
<nl lang="en">
کدام ایالت ها هم مرز ایالتی هستند که میسیسیپی از آن عبور میکند ؟
</nl>
<syn lang="en">
(S کدام ایالت ها هم مرز ایالتی هستند که میسیسیپی از آن عبور میکند ؟)
</syn>
<augsyn lang="en">
(S What states-[State:1] border-[State:2] states-[State:3] which the Mississippi-[RiverName:6] runs-[State:4] through-[State:4])
</augsyn>
<mrl lang="geo-funql">
answer(state(next_to_2(state(traverse_1(riverid('mississippi'))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),next_to(A,B),state(B),const(C,riverid(mississippi)),traverse(C,B)))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ traverse_1 ( *n:River ) }) </node>
<node id="5"> *n:River -> ({ riverid ( *n:RiverName ) }) </node>
<node id="6"> *n:RiverName -> ({ ' mississippi ' }) </node>
</mrl-parse>
</example>

<example id="718">
<nl lang="en">
کدام ایالت ها همجوار تگزاس هستند ؟
</nl>
<syn lang="en">
(S کدام ایالت ها همجوار تگزاس هستند ؟)
</syn>
<augsyn lang="en">
(S What states-[State:1] border-[State:2] Texas-[StateName:4])
</augsyn>
<mrl lang="geo-funql">
answer(state(next_to_2(stateid('texas'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),next_to(A,B),const(B,stateid(texas))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="4"> *n:StateName -> ({ ' texas ' }) </node>
</mrl-parse>
</example>

<example id="719">
<nl lang="en">
کدام ایالت ها هم مرز تگزاس هستند و یک رودخانه عمده دارند ؟
</nl>
<syn lang="en">
(S کدام ایالت ها هم مرز تگزاس هستند و یک رودخانه عمده دارند ؟)
</syn>
<augsyn lang="en">
(S What states-[State:2] border-[State:3] Texas-[StateName:5] and-[State:1] have-[State:6] a-[River:7] major-[River:7] river-[River:8])
</augsyn>
<mrl lang="geo-funql">
answer(intersection(state(next_to_2(stateid('texas'))), loc_1(major(river(all)))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),next_to(A,B),const(B,stateid(texas)),loc(C,A),major(C),river(C)))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ intersection ( *n:State , *n:State ) }) </node>
<node id="2"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' texas ' }) </node>
<node id="6"> *n:State -> ({ loc_1 ( *n:River ) }) </node>
<node id="7"> *n:River -> ({ major ( *n:River ) }) </node>
<node id="8"> *n:River -> ({ river ( all ) }) </node>
</mrl-parse>
</example>

<example id="720">
<nl lang="en">
کدام ایالات هم مرز رودخانه میسیسیپی هستند ؟
</nl>
<syn lang="en">
(S کدام ایالات هم مرز رودخانه میسیسیپی هستند ؟)
</syn>
<augsyn lang="en">
(S What states-[State:1] border-[State:2] the Mississippi-[RiverName:5] river-[River:3])
</augsyn>
<mrl lang="geo-funql">
answer(state(next_to_2(river(riverid('mississippi')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),next_to(A,B),const(B,riverid(mississippi)),river(B)))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ next_to_2 ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="4"> *n:River -> ({ riverid ( *n:RiverName ) }) </node>
<node id="5"> *n:RiverName -> ({ ' mississippi ' }) </node>
</mrl-parse>
</example>

<example id="721">
<nl lang="en">
کدام ایالت ها همجوار پرجمعیت ترین ایالت هستند ؟
</nl>
<syn lang="en">
(S کدام ایالت ها همجوار پرجمعیت ترین ایالت هستند ؟)
</syn>
<augsyn lang="en">
(S What states-[State:1] border-[State:2] the most-[State:3] populous-[State:3] state-[State:4])
</augsyn>
<mrl lang="geo-funql">
answer(state(next_to_2(largest_one(population_1(state(all))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),next_to(A,B),largest(C,(population(B,C),state(B)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ largest_one ( population_1 ( *n:State ) ) }) </node>
<node id="4"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="722">
<nl lang="en">
کدام ایالت ها با ایالتی که با بیشترین ایالتها هم مرز است همجوار است ؟
</nl>
<syn lang="en">
(S کدام ایالت ها با ایالتی که با بیشترین ایالتها هم مرز است همجوار است ؟)
</syn>
<augsyn lang="en">
(S What states-[State:1] border-[State:2] the state-[State:4] that borders-[State:5] the most-[State:3] states-[State:6])
</augsyn>
<mrl lang="geo-funql">
answer(state(next_to_2(most(state(next_to_2(state(all)))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),next_to(A,B),most(B,C,(state(B),next_to(B,C),state(C)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ most ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="6"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="723">
<nl lang="en">
کدام ایالت ها با ایالتی با بیشترین تعداد شهرها هم مرز هستند ؟
</nl>
<syn lang="en">
(S کدام ایالت ها با ایالتی با بیشترین تعداد شهرها هم مرز هستند ؟)
</syn>
<augsyn lang="en">
(S What states-[State:1] border-[State:2] the state-[State:4] with-[State:5] the most-[State:3] cities-[City:6])
</augsyn>
<mrl lang="geo-funql">
answer(state(next_to_2(most(state(loc_1(city(all)))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),next_to(A,B),most(B,C,(state(B),loc(C,B),city(C)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ most ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ loc_1 ( *n:City ) }) </node>
<node id="6"> *n:City -> ({ city ( all ) }) </node>
</mrl-parse>
</example>

<example id="724">
<nl lang="en">
کدام ایالت ها با ایالتی با بیشترین تعداد شهرهای عمده همجوار هستند ؟
</nl>
<syn lang="en">
(S کدام ایالت ها با ایالتی با بیشترین تعداد شهرهای عمده همجوار هستند ؟)
</syn>
<augsyn lang="en">
(S What states-[State:1] border-[State:2] the state-[State:4] with-[State:5] the most-[State:3] major-[City:6] cities-[City:7])
</augsyn>
<mrl lang="geo-funql">
answer(state(next_to_2(most(state(loc_1(major(city(all))))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),next_to(A,B),most(B,C,(state(B),loc(C,B),major(C),city(C)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ most ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ loc_1 ( *n:City ) }) </node>
<node id="6"> *n:City -> ({ major ( *n:City ) }) </node>
<node id="7"> *n:City -> ({ city ( all ) }) </node>
</mrl-parse>
</example>

<example id="725">
<nl lang="en">
کدام ایالت ها با کوچکترین ایالت همجوار هستند ؟
</nl>
<syn lang="en">
(S کدام ایالت ها با کوچکترین ایالت همجوار هستند ؟)
</syn>
<augsyn lang="en">
(S What states-[State:1] border-[State:2] the state-[State:4] with-[State:3] the smallest-[State:3] area-[State:3])
</augsyn>
<mrl lang="geo-funql">
answer(state(next_to_2(smallest_one(area_1(state(all))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),next_to(A,B),smallest(C,(state(B),area(B,C)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ smallest_one ( area_1 ( *n:State ) ) }) </node>
<node id="4"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="726">
<nl lang="en">
کدام ایالت ها با ایالتی با بیشترین تعداد شهرها هم مرز هستند ؟
</nl>
<syn lang="en">
(S کدام ایالت ها با ایالتی با بیشترین تعداد شهرها هم مرز هستند ؟)
</syn>
<augsyn lang="en">
(S What states-[State:1] border-[State:2] the states-[State:4] with-[State:5] the most-[State:3] cities-[City:6])
</augsyn>
<mrl lang="geo-funql">
answer(state(next_to_2(most(state(loc_1(city(all)))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),next_to(A,B),most(B,C,(state(B),loc(C,B),city(C)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ most ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ loc_1 ( *n:City ) }) </node>
<node id="6"> *n:City -> ({ city ( all ) }) </node>
</mrl-parse>
</example>

<example id="727">
<nl lang="en">
کدام ایالت ها با ویسکنسین هم مرز هستند ؟
</nl>
<syn lang="en">
(S کدام ایالت ها با ویسکنسین هم مرز هستند ؟)
</syn>
<augsyn lang="en">
(S What states-[State:1] border-[State:2] Wisconsin-[StateName:4])
</augsyn>
<mrl lang="geo-funql">
answer(state(next_to_2(stateid('wisconsin'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),next_to(A,B),const(B,stateid(wisconsin))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="4"> *n:StateName -> ({ ' wisconsin ' }) </node>
</mrl-parse>
</example>

<example id="728">
<nl lang="en">
دوور مرکز کدام ایالت است ؟
</nl>
<nl lang="es">
que estado tiene la capital dover ?
</nl>
<nl lang="ja">
doobaa to iu shuto wa dono shuu desu ka ?
</nl>
<nl lang="tr">
hangi eyaletin baskenti dover dir ?
</nl>
<syn lang="en">
(S دوور مرکز کدام ایالت است ؟)
</syn>
<syn lang="es">
(S que estado tiene la capital dover)
</syn>
<syn lang="ja">
(S doobaa to iu shuto wa dono shuu desu ka)
</syn>
<syn lang="tr">
(S hangi eyaletin baskenti dover dir)
</syn>
<augsyn lang="en">
(S What state-[State:1] 's-[State:2] capital-[State:2] is-[State:2] Dover-[CityName:4])
</augsyn>
<mrl lang="geo-funql">
answer(state(capital_2(cityid('dover', _))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),capital(A,B),const(B,cityid(dover,_))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ capital_2 ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ cityid ( *n:CityName , _ ) }) </node>
<node id="4"> *n:CityName -> ({ ' dover ' }) </node>
</mrl-parse>
</example>

<example id="729">
<nl lang="en">
کدام ایالت ها حداقل یک رودخانه عمده دارند ؟
</nl>
<syn lang="en">
(S کدام ایالت ها حداقل یک رودخانه عمده دارند ؟)
</syn>
<augsyn lang="en">
(S What states-[State:1] contain-[State:2] at-[River:4] least-[River:4] one-[River:4] major-[River:3] rivers-[River:4])
</augsyn>
<mrl lang="geo-funql">
answer(state(loc_1(major(river(all)))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),loc(B,A),major(B),river(B)))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ loc_1 ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ major ( *n:River ) }) </node>
<node id="4"> *n:River -> ({ river ( all ) }) </node>
</mrl-parse>
</example>

<example id="730">
<nl lang="en">
رودخانه کلرادو از کدام ایالت ها عبور میکند ؟
</nl>
<syn lang="en">
(S رودخانه کلرادو از کدام ایالت ها عبور میکند ؟)
</syn>
<augsyn lang="en">
(S What states-[State:1] does-[State:2] the Colorado-[RiverName:5] river-[River:3] run-[State:2] through-[State:2])
</augsyn>
<mrl lang="geo-funql">
answer(state(traverse_1(river(riverid('colorado')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),const(B,riverid(colorado)),river(B),traverse(B,A)))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ traverse_1 ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="4"> *n:River -> ({ riverid ( *n:RiverName ) }) </node>
<node id="5"> *n:RiverName -> ({ ' colorado ' }) </node>
</mrl-parse>
</example>

<example id="731">
<nl lang="en">
رود دلاور از کدام ایالت ها میگذرد ؟
</nl>
<nl lang="es">
por cuales estados corre el rio delaware ?
</nl>
<nl lang="ja">
derawaru kawa wa dono shuu wo nagarete imasu ka ?
</nl>
<nl lang="tr">
delaware nehri hangi eyaletlerden gecer ?
</nl>
<syn lang="en">
(S رود دلاور از کدام ایالت ها میگذرد ؟)
</syn>
<syn lang="es">
(S por cuales estados corre el rio delaware)
</syn>
<syn lang="ja">
(S derawaru kawa wa dono shuu wo nagarete imasu ka)
</syn>
<syn lang="tr">
(S delaware nehri hangi eyaletlerden gecer)
</syn>
<augsyn lang="en">
(S What states-[State:1] does-[State:2] the Delaware-[RiverName:5] river-[River:3] run-[State:2] through-[State:2])
</augsyn>
<mrl lang="geo-funql">
answer(state(traverse_1(river(riverid('delaware')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),const(B,riverid(delaware)),river(B),traverse(B,A)))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ traverse_1 ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="4"> *n:River -> ({ riverid ( *n:RiverName ) }) </node>
<node id="5"> *n:RiverName -> ({ ' delaware ' }) </node>
</mrl-parse>
</example>

<example id="732">
<nl lang="en">
رود میسیسیپی از کدام ایالت ها میگذرد ؟
</nl>
<syn lang="en">
(S رود میسیسیپی از کدام ایالت ها میگذرد ؟)
</syn>
<augsyn lang="en">
(S What states-[State:1] does-[State:2] the Mississippi-[RiverName:5] river-[River:3] run-[State:2] through-[State:2])
</augsyn>
<mrl lang="geo-funql">
answer(state(traverse_1(river(riverid('mississippi')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),const(B,riverid(mississippi)),river(B),traverse(B,A)))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ traverse_1 ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="4"> *n:River -> ({ riverid ( *n:RiverName ) }) </node>
<node id="5"> *n:RiverName -> ({ ' mississippi ' }) </node>
</mrl-parse>
</example>

<example id="733">
<nl lang="en">
رود میسیسیپی از کدام ایالت ها میگذرد ؟
</nl>
<syn lang="en">
(S رود میسیسیپی از کدام ایالت ها میگذرد ؟)
</syn>
<augsyn lang="en">
(S What states-[State:1] does-[State:2] the Mississippi-[RiverName:4] run-[State:2] through-[State:2])
</augsyn>
<mrl lang="geo-funql">
answer(state(traverse_1(riverid('mississippi'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),const(B,riverid(mississippi)),traverse(B,A)))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ traverse_1 ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ riverid ( *n:RiverName ) }) </node>
<node id="4"> *n:RiverName -> ({ ' mississippi ' }) </node>
</mrl-parse>
</example>

<example id="734">
<nl lang="en">
رود میسوری از کدام ایالت ها عبور میکند ؟
</nl>
<syn lang="en">
(S رود میسوری از کدام ایالت ها عبور میکند ؟)
</syn>
<augsyn lang="en">
(S What states-[State:1] does-[State:2] the Missouri-[RiverName:5] river-[River:3] run-[State:2] through-[State:2])
</augsyn>
<mrl lang="geo-funql">
answer(state(traverse_1(river(riverid('missouri')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),const(B,riverid(missouri)),river(B),traverse(B,A)))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ traverse_1 ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="4"> *n:River -> ({ riverid ( *n:RiverName ) }) </node>
<node id="5"> *n:RiverName -> ({ ' missouri ' }) </node>
</mrl-parse>
</example>

<example id="735">
<nl lang="en">
رود میسوری از کدام ایالت ها میگذرد ؟
</nl>
<nl lang="es">
por cuales estados corre el missouri ?
</nl>
<nl lang="ja">
mizuuri kawa wa dono shuu wo nagarete imasu ka ?
</nl>
<nl lang="tr">
missouri hangi eyaletlerin icinden gecer ?
</nl>
<syn lang="en">
(S رود میسوری از کدام ایالت ها میگذرد ؟)
</syn>
<syn lang="es">
(S por cuales estados corre el missouri)
</syn>
<syn lang="ja">
(S mizuuri kawa wa dono shuu wo nagarete imasu ka)
</syn>
<syn lang="tr">
(S missouri hangi eyaletlerin icinden gecer)
</syn>
<augsyn lang="en">
(S What states-[State:1] does-[State:2] the Missouri-[RiverName:4] run-[State:2] through-[State:2])
</augsyn>
<mrl lang="geo-funql">
answer(state(traverse_1(riverid('missouri'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),const(B,riverid(missouri)),traverse(B,A)))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ traverse_1 ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ riverid ( *n:RiverName ) }) </node>
<node id="4"> *n:RiverName -> ({ ' missouri ' }) </node>
</mrl-parse>
</example>

<example id="736">
<nl lang="en">
رود اوهایو از کدام ایالت ها میگذرد ؟
</nl>
<nl lang="es">
por cuales estados corre el rio ohio ?
</nl>
<nl lang="ja">
ohaio kawa wa dono shuu wo nagarete imasu ka ?
</nl>
<nl lang="tr">
ohio nehri hangi eyaletlerin icinden gecer ?
</nl>
<syn lang="en">
(S رود اوهایو از کدام ایالت ها میگذرد ؟)
</syn>
<syn lang="es">
(S por cuales estados corre el rio ohio)
</syn>
<syn lang="ja">
(S ohaio kawa wa dono shuu wo nagarete imasu ka)
</syn>
<syn lang="tr">
(S ohio nehri hangi eyaletlerin icinden gecer)
</syn>
<augsyn lang="en">
(S What states-[State:1] does-[State:2] the Ohio-[RiverName:5] river-[River:3] go-[State:2] through-[State:2])
</augsyn>
<mrl lang="geo-funql">
answer(state(traverse_1(river(riverid('ohio')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),const(B,riverid(ohio)),river(B),traverse(B,A)))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ traverse_1 ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="4"> *n:River -> ({ riverid ( *n:RiverName ) }) </node>
<node id="5"> *n:RiverName -> ({ ' ohio ' }) </node>
</mrl-parse>
</example>

<example id="737">
<nl lang="en">
رود اوهایو از کدام ایالت ها عبور میکند ؟
</nl>
<syn lang="en">
(S رود اوهایو از کدام ایالت ها عبور میکند ؟)
</syn>
<augsyn lang="en">
(S What states-[State:1] does-[State:2] the Ohio-[RiverName:5] river-[River:3] run-[State:2] through-[State:2])
</augsyn>
<mrl lang="geo-funql">
answer(state(traverse_1(river(riverid('ohio')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),const(B,riverid(ohio)),river(B),traverse(B,A)))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ traverse_1 ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="4"> *n:River -> ({ riverid ( *n:RiverName ) }) </node>
<node id="5"> *n:RiverName -> ({ ' ohio ' }) </node>
</mrl-parse>
</example>

<example id="738">
<nl lang="en">
کوتاه ترین رود از کدام ایالت ها میگذرد ؟
</nl>
<syn lang="en">
(S کوتاه ترین رود از کدام ایالت ها میگذرد ؟)
</syn>
<augsyn lang="en">
(S What states-[State:1] does-[State:2] the shortest-[River:3] river-[River:4] run-[State:2] through-[State:2])
</augsyn>
<mrl lang="geo-funql">
answer(state(traverse_1(shortest(river(all)))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),shortest(B,river(B)),traverse(B,A)))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ traverse_1 ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ shortest ( *n:River ) }) </node>
<node id="4"> *n:River -> ({ river ( all ) }) </node>
</mrl-parse>
</example>

<example id="739">
<nl lang="en">
کدام ایالت ها دارای مرکز ایالتی هستند که بلندترین نقطه در آن ایالت است ؟
</nl>
<syn lang="en">
(S کدام ایالت ها دارای مرکز ایالتی هستند که بلندترین نقطه در آن ایالت است ؟)
</syn>
<augsyn lang="en">
(S What states-[State:1] have-[State:2] a-[City:3] capital-[City:3] that is-[Place:4] the highest-[Place:4] point-[Place:5] in-[Place:4] the state-[Place:4])
</augsyn>
<mrl lang="geo-funql">
answer(state(loc_1(capital(highest(place(all))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),loc(B,A),capital(B),highest(B,(place(B)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ loc_1 ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ capital ( *n:Place ) }) </node>
<node id="4"> *n:Place -> ({ highest ( *n:Place ) }) </node>
<node id="5"> *n:Place -> ({ place ( all ) }) </node>
</mrl-parse>
</example>

<example id="740">
<nl lang="en">
کدام ایالت ها شهری به نام آستین دارند ؟
</nl>
<syn lang="en">
(S کدام ایالت ها شهری به نام آستین دارند ؟)
</syn>
<augsyn lang="en">
(S What states-[State:1] have-[State:2] a-[City:3] city-[City:3] named-[City:3] Austin-[CityName:5])
</augsyn>
<mrl lang="geo-funql">
answer(state(loc_1(city(cityid('austin', _)))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),loc(B,A),const(B,cityid(austin,_))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ loc_1 ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="4"> *n:City -> ({ cityid ( *n:CityName , _ ) }) </node>
<node id="5"> *n:CityName -> ({ ' austin ' }) </node>
</mrl-parse>
</example>

<example id="741">
<nl lang="en">
کدام آیالت ها شهری دارند که آستین نامیده میشود ؟
</nl>
<syn lang="en">
(S کدام آیالت ها شهری دارند که آستین نامیده میشود ؟)
</syn>
<augsyn lang="en">
(S What states-[State:1] have-[State:2] cities-[City:3] named-[City:3] Austin-[CityName:5])
</augsyn>
<mrl lang="geo-funql">
answer(state(loc_1(city(cityid('austin', _)))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),loc(B,A),city(B),const(B,cityid(austin,_))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ loc_1 ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="4"> *n:City -> ({ cityid ( *n:CityName , _ ) }) </node>
<node id="5"> *n:CityName -> ({ ' austin ' }) </node>
</mrl-parse>
</example>

<example id="742">
<nl lang="en">
کدام ایالت ها شهری به نام دالاس دارند ؟
</nl>
<nl lang="es">
cuales estados tienen ciudades con el nombre dallas ?
</nl>
<nl lang="ja">
darasu to iu toshi ga aru shuu wa nan desu ka ?
</nl>
<nl lang="tr">
hangi eyaletlerde dallas sehri vardir ?
</nl>
<syn lang="en">
(S کدام ایالت ها شهری به نام دالاس دارند ؟)
</syn>
<syn lang="es">
(S cuales estados tienen ciudades con el nombre dallas)
</syn>
<syn lang="ja">
(S darasu to iu toshi ga aru shuu wa nan desu ka)
</syn>
<syn lang="tr">
(S hangi eyaletlerde dallas sehri vardir)
</syn>
<augsyn lang="en">
(S What states-[State:1] have-[State:2] cities-[City:3] named-[City:3] Dallas-[CityName:5])
</augsyn>
<mrl lang="geo-funql">
answer(state(loc_1(city(cityid('dallas', _)))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),loc(B,A),city(B),const(B,cityid(dallas,_))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ loc_1 ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="4"> *n:City -> ({ cityid ( *n:CityName , _ ) }) </node>
<node id="5"> *n:CityName -> ({ ' dallas ' }) </node>
</mrl-parse>
</example>

<example id="743">
<nl lang="en">
کدام ایالت ها شهری به نام پلانو دارند ؟
</nl>
<nl lang="es">
cuales estados tienen ciudades con el nombre plano ?
</nl>
<nl lang="ja">
purano to iu toshi ga aru shuu wa nan desu ka ?
</nl>
<nl lang="tr">
hangi eyaletlerde plano sehri vardir ?
</nl>
<syn lang="en">
(S کدام ایالت ها شهری به نام پلانو دارند ؟)
</syn>
<syn lang="es">
(S cuales estados tienen ciudades con el nombre plano)
</syn>
<syn lang="ja">
(S purano to iu toshi ga aru shuu wa nan desu ka)
</syn>
<syn lang="tr">
(S hangi eyaletlerde plano sehri vardir)
</syn>
<augsyn lang="en">
(S What states-[State:1] have-[State:2] cities-[City:3] named-[City:3] Plano-[CityName:5])
</augsyn>
<mrl lang="geo-funql">
answer(state(loc_1(city(cityid('plano', _)))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),loc(B,A),city(B),const(B,cityid(plano,_))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ loc_1 ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="4"> *n:City -> ({ cityid ( *n:CityName , _ ) }) </node>
<node id="5"> *n:CityName -> ({ ' plano ' }) </node>
</mrl-parse>
</example>

<example id="744">
<nl lang="en">
کدام ایالت ها شهری به نام پروتلند دارند ؟
</nl>
<syn lang="en">
(S کدام ایالت ها شهری به نام پروتلند دارند ؟)
</syn>
<augsyn lang="en">
(S What states-[State:1] have-[State:2] cities-[City:3] named-[City:3] Portland-[CityName:5])
</augsyn>
<mrl lang="geo-funql">
answer(state(loc_1(city(cityid('portland', _)))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),loc(B,A),city(B),const(B,cityid(portland,_))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ loc_1 ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="4"> *n:City -> ({ cityid ( *n:CityName , _ ) }) </node>
<node id="5"> *n:CityName -> ({ ' portland ' }) </node>
</mrl-parse>
</example>

<example id="745">
<nl lang="en">
کدام ایالت ها شهری به نام روچستر دارند ؟
</nl>
<syn lang="en">
(S کدام ایالت ها شهری به نام روچستر دارند ؟)
</syn>
<augsyn lang="en">
(S What states-[State:1] have-[State:2] cities-[City:3] named-[City:3] Rochester-[CityName:5])
</augsyn>
<mrl lang="geo-funql">
answer(state(loc_1(city(cityid('rochester', _)))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),loc(B,A),city(B),const(B,cityid(rochester,_))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ loc_1 ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="4"> *n:City -> ({ cityid ( *n:CityName , _ ) }) </node>
<node id="5"> *n:CityName -> ({ ' rochester ' }) </node>
</mrl-parse>
</example>

<example id="746">
<nl lang="en">
کدام ایالت ها شهری به نام سالت لیک دارند ؟
</nl>
<syn lang="en">
(S کدام ایالت ها شهری به نام سالت لیک دارند ؟)
</syn>
<augsyn lang="en">
(S What states-[State:1] have-[State:2] cities-[City:3] named-[City:3] Salt-[CityName:5] Lake-[CityName:5] City-[CityName:5])
</augsyn>
<mrl lang="geo-funql">
answer(state(loc_1(city(cityid('salt lake city', _)))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),loc(B,A),city(B),const(B,cityid('salt lake city',_))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ loc_1 ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="4"> *n:City -> ({ cityid ( *n:CityName , _ ) }) </node>
<node id="5"> *n:CityName -> ({ ' salt lake city ' }) </node>
</mrl-parse>
</example>

<example id="747">
<nl lang="en">
کدام ایالت ها با هیچ ایالتی هم مرز نیستند ؟
</nl>
<syn lang="en">
(S کدام ایالت ها با هیچ ایالتی هم مرز نیستند ؟)
</syn>
<augsyn lang="en">
(S What states-[State:2] have-[State:1] no-[State:1] bordering-[State:3] state-[State:4])
</augsyn>
<mrl lang="geo-funql">
answer(exclude(state(all), next_to_2(state(all))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),not((next_to(A,B),state(B)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ exclude ( *n:State , *n:State ) }) </node>
<node id="2"> *n:State -> ({ state ( all ) }) </node>
<node id="3"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="748">
<nl lang="en">
کدام ایالت ها رودخانه ای به نام کلرادو دارند ؟
</nl>
<syn lang="en">
(S کدام ایالت ها رودخانه ای به نام کلرادو دارند ؟)
</syn>
<augsyn lang="en">
(S What states-[State:1] have-[State:2] rivers-[River:3] named-[River:3] Colorado-[RiverName:5])
</augsyn>
<mrl lang="geo-funql">
answer(state(loc_1(river(riverid('colorado')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),loc(B,A),const(B,riverid(colorado))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ loc_1 ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="4"> *n:River -> ({ riverid ( *n:RiverName ) }) </node>
<node id="5"> *n:RiverName -> ({ ' colorado ' }) </node>
</mrl-parse>
</example>

<example id="749">
<nl lang="en">
از میان کدام ایالت ها رودخانه ای میگذرد ؟
</nl>
<syn lang="en">
(S از میان کدام ایالت ها رودخانه ای میگذرد ؟)
</syn>
<augsyn lang="en">
(S What states-[State:1] have-[State:2] rivers-[River:3] running-[State:2] through-[State:2] them-[State:2])
</augsyn>
<mrl lang="geo-funql">
answer(state(traverse_1(river(all))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),river(B),traverse(B,A)))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ traverse_1 ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ river ( all ) }) </node>
</mrl-parse>
</example>

<example id="750">
<nl lang="en">
کدام ایالت ها شهری به نام اسپرینگفیلد دارند ؟
</nl>
<syn lang="en">
(S کدام ایالت ها شهری به نام اسپرینگفیلد دارند ؟)
</syn>
<augsyn lang="en">
(S What states-[State:1] have-[State:2] towns-[City:3] named-[City:3] Springfield-[CityName:5])
</augsyn>
<mrl lang="geo-funql">
answer(state(loc_1(city(cityid('springfield', _)))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),loc(B,A),const(B,cityid(springfield,_))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ loc_1 ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="4"> *n:City -> ({ cityid ( *n:CityName , _ ) }) </node>
<node id="5"> *n:CityName -> ({ ' springfield ' }) </node>
</mrl-parse>
</example>

<example id="751">
<nl lang="en">
بلند ترین نقطه کدام ایالت از بلندترین نقطه کلرادو بلند تر است ؟
</nl>
<syn lang="en">
(S بلند ترین نقطه کدام ایالت از بلندترین نقطه کلرادو بلند تر است ؟)
</syn>
<augsyn lang="en">
(S What state-[State:1] 's-[State:2] high-[State:2] point-[State:2] is-[Place:3] higher-[Place:3] than-[Place:3] that of-[Place:4] Colorado-[StateName:6])
</augsyn>
<mrl lang="geo-funql">
answer(state(high_point_2(higher_2(high_point_1(stateid('colorado'))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),high_point(A,B),higher(B,C),high_point(D,C),const(D,stateid(colorado))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ high_point_2 ( *n:Place ) }) </node>
<node id="3"> *n:Place -> ({ higher_2 ( *n:Place ) }) </node>
<node id="4"> *n:Place -> ({ high_point_1 ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="6"> *n:StateName -> ({ ' colorado ' }) </node>
</mrl-parse>
</example>

<example id="752">
<nl lang="en">
کدام ایالات در ایالات متحده شهری به نام اسپرینگفیلد دارند ؟
</nl>
<syn lang="en">
(S کدام ایالات در ایالات متحده شهری به نام اسپرینگفیلد دارند ؟)
</syn>
<augsyn lang="en">
(S What states-[State:2] in-[State:3] the United-[CountryName:5] States-[CountryName:5] have-[State:6] a-[City:7] city-[City:7] of-[City:7] Springfield-[CityName:9])
</augsyn>
<mrl lang="geo-funql">
answer(intersection(state(loc_2(countryid('usa'))), loc_1(city(cityid('springfield', _)))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),loc(A,B),const(B,countryid(usa)),loc(C,A),const(C,cityid(springfield,_))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ intersection ( *n:State , *n:State ) }) </node>
<node id="2"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ loc_2 ( *n:Country ) }) </node>
<node id="4"> *n:Country -> ({ countryid ( *n:CountryName ) }) </node>
<node id="5"> *n:CountryName -> ({ ' usa ' }) </node>
<node id="6"> *n:State -> ({ loc_1 ( *n:City ) }) </node>
<node id="7"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="8"> *n:City -> ({ cityid ( *n:CityName , _ ) }) </node>
<node id="9"> *n:CityName -> ({ ' springfield ' }) </node>
</mrl-parse>
</example>

<example id="753">
<nl lang="en">
کدام ایالات با مین همسایه اند ؟
</nl>
<syn lang="en">
(S کدام ایالات با مین همسایه اند ؟)
</syn>
<augsyn lang="en">
(S What states-[State:1] neighbor-[State:2] Maine-[StateName:4])
</augsyn>
<mrl lang="geo-funql">
answer(state(next_to_2(stateid('maine'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),next_to(A,B),const(B,stateid(maine))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="4"> *n:StateName -> ({ ' maine ' }) </node>
</mrl-parse>
</example>

<example id="754">
<nl lang="en">
کدام ایالات همسایه کنتاکی اند ؟
</nl>
<nl lang="es">
cuales estados rodean a kentucky ?
</nl>
<nl lang="ja">
donna shuu ga kentakkii no mawari ni arimasu ka ?
</nl>
<nl lang="tr">
kentucky yi hangi eyaletler cevreler ?
</nl>
<syn lang="en">
(S کدام ایالات همسایه کنتاکی اند ؟)
</syn>
<syn lang="es">
(S cuales estados rodean a kentucky)
</syn>
<syn lang="ja">
(S donna shuu ga kentakkii no mawari ni arimasu ka)
</syn>
<syn lang="tr">
(S kentucky yi hangi eyaletler cevreler)
</syn>
<augsyn lang="en">
(S What states-[State:1] surround-[State:2] Kentucky-[StateName:4])
</augsyn>
<mrl lang="geo-funql">
answer(state(next_to_2(stateid('kentucky'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),next_to(A,B),const(B,stateid(kentucky))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="4"> *n:StateName -> ({ ' kentucky ' }) </node>
</mrl-parse>
</example>

<example id="755">
<nl lang="en">
کدام شهر تگزاس دارای بیشترین جمعیت است ؟
</nl>
<syn lang="en">
(S کدام شهر تگزاس دارای بیشترین جمعیت است ؟)
</syn>
<augsyn lang="en">
(S What Texas-[StateName:5] city-[City:2] has-[City:1] the largest-[City:1] population-[City:1])
</augsyn>
<mrl lang="geo-funql">
answer(largest_one(population_1(city(loc_2(stateid('texas'))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,largest(B,(const(C,stateid(texas)),city(A),loc(A,C),population(A,B))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ largest_one ( population_1 ( *n:City ) ) }) </node>
<node id="2"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' texas ' }) </node>
</mrl-parse>
</example>

<example id="756">
<nl lang="en">
بزرگترین شهر کدام است ؟
</nl>
<nl lang="es">
que es la ciudad mas grande ?
</nl>
<nl lang="ja">
mottomo ookii toshi wa nan desu ka ?
</nl>
<nl lang="tr">
en buyuk sehir nedir ?
</nl>
<syn lang="en">
(S بزرگترین شهر کدام است ؟)
</syn>
<syn lang="es">
(S que es la ciudad mas grande)
</syn>
<syn lang="ja">
(S mottomo ookii toshi wa nan desu ka)
</syn>
<syn lang="tr">
(S en buyuk sehir nedir)
</syn>
<augsyn lang="en">
(S What 's-[Query:0] the largest-[City:1] city-[City:2])
</augsyn>
<mrl lang="geo-funql">
answer(largest(city(all)))
</mrl>
<mrl lang="geo-prolog">
answer(A,largest(A,city(A)))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ largest ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ city ( all ) }) </node>
</mrl-parse>
</example>

<example id="757">
<nl lang="en">
کوهستان ها در کجا واقع شده اند ؟
</nl>
<syn lang="en">
(S کوهستان ها در کجا واقع شده اند ؟)
</syn>
<augsyn lang="en">
(S Where-[State:1] are-[State:1] mountains-[Place:2])
</augsyn>
<mrl lang="geo-funql">
answer(loc_1(mountain(all)))
</mrl>
<mrl lang="geo-prolog">
answer(A,(loc(B,A),mountain(B)))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ loc_1 ( *n:Place ) }) </node>
<node id="2"> *n:Place -> ({ mountain ( all ) }) </node>
</mrl-parse>
</example>

<example id="758">
<nl lang="en">
آسیتن در کجا واقع شده است ؟
</nl>
<syn lang="en">
(S آسیتن در کجا واقع شده است ؟)
</syn>
<augsyn lang="en">
(S Where-[State:1] is-[State:1] Austin-[CityName:3])
</augsyn>
<mrl lang="geo-funql">
answer(loc_1(cityid('austin', _)))
</mrl>
<mrl lang="geo-prolog">
answer(A,(loc(B,A),const(B,cityid(austin,_))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ loc_1 ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ cityid ( *n:CityName , _ ) }) </node>
<node id="3"> *n:CityName -> ({ ' austin ' }) </node>
</mrl-parse>
</example>

<example id="759">
<nl lang="en">
باتون راگ در کجا واقع شده است ؟
</nl>
<syn lang="en">
(S باتون راگ در کجا واقع شده است ؟)
</syn>
<augsyn lang="en">
(S Where-[State:1] is-[State:1] Baton-[CityName:3] Rouge-[CityName:3])
</augsyn>
<mrl lang="geo-funql">
answer(loc_1(cityid('baton rouge', _)))
</mrl>
<mrl lang="geo-prolog">
answer(A,(loc(B,A),const(B,cityid('baton rouge',_))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ loc_1 ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ cityid ( *n:CityName , _ ) }) </node>
<node id="3"> *n:CityName -> ({ ' baton rouge ' }) </node>
</mrl-parse>
</example>

<example id="760">
<nl lang="en">
دالاس در کجا واقع شده است ؟
</nl>
<syn lang="en">
(S دالاس در کجا واقع شده است ؟)
</syn>
<augsyn lang="en">
(S Where-[State:1] is-[State:1] Dallas-[CityName:3])
</augsyn>
<mrl lang="geo-funql">
answer(loc_1(cityid('dallas', _)))
</mrl>
<mrl lang="geo-prolog">
answer(A,(loc(B,A),const(B,cityid(dallas,_))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ loc_1 ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ cityid ( *n:CityName , _ ) }) </node>
<node id="3"> *n:CityName -> ({ ' dallas ' }) </node>
</mrl-parse>
</example>

<example id="761">
<nl lang="en">
فورت واین درکجا واقع شده است ؟
</nl>
<syn lang="en">
(S فورت واین درکجا واقع شده است ؟)
</syn>
<augsyn lang="en">
(S Where-[State:1] is-[State:1] Fort-[CityName:3] Wayne-[CityName:3])
</augsyn>
<mrl lang="geo-funql">
answer(loc_1(cityid('fort wayne', _)))
</mrl>
<mrl lang="geo-prolog">
answer(A,(loc(B,A),const(B,cityid('fort wayne',_))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ loc_1 ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ cityid ( *n:CityName , _ ) }) </node>
<node id="3"> *n:CityName -> ({ ' fort wayne ' }) </node>
</mrl-parse>
</example>

<example id="762">
<nl lang="en">
هوستون در کجا واقع شده است ؟
</nl>
<syn lang="en">
(S هوستون در کجا واقع شده است ؟)
</syn>
<augsyn lang="en">
(S Where-[State:1] is-[State:1] Houston-[CityName:3])
</augsyn>
<mrl lang="geo-funql">
answer(loc_1(cityid('houston', _)))
</mrl>
<mrl lang="geo-prolog">
answer(A,(loc(B,A),const(B,cityid(houston,_))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ loc_1 ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ cityid ( *n:CityName , _ ) }) </node>
<node id="3"> *n:CityName -> ({ ' houston ' }) </node>
</mrl-parse>
</example>

<example id="763">
<nl lang="en">
ایندیاناپولیس در کجا واقع شده است ؟
</nl>
<syn lang="en">
(S ایندیاناپولیس در کجا واقع شده است ؟)
</syn>
<augsyn lang="en">
(S Where-[State:1] is-[State:1] Indianapolis-[CityName:3])
</augsyn>
<mrl lang="geo-funql">
answer(loc_1(cityid('indianapolis', _)))
</mrl>
<mrl lang="geo-prolog">
answer(A,(loc(B,A),const(B,cityid(indianapolis,_))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ loc_1 ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ cityid ( *n:CityName , _ ) }) </node>
<node id="3"> *n:CityName -> ({ ' indianapolis ' }) </node>
</mrl-parse>
</example>

<example id="764">
<nl lang="en">
ماساچوست در کجا واقع شده است ؟
</nl>
<syn lang="en">
(S ماساچوست در کجا واقع شده است ؟)
</syn>
<augsyn lang="en">
(S Where-[Country:1] is-[Country:1] Massachusetts-[StateName:3])
</augsyn>
<mrl lang="geo-funql">
answer(loc_1(stateid('massachusetts')))
</mrl>
<mrl lang="geo-prolog">
answer(A,(loc(B,A),const(B,stateid(massachusetts))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Country ) }) </node>
<node id="1"> *n:Country -> ({ loc_1 ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="3"> *n:StateName -> ({ ' massachusetts ' }) </node>
</mrl-parse>
</example>

<example id="765">
<nl lang="en">
مونت ویتنی در کجا واقع شده است ؟
</nl>
<syn lang="en">
(S مونت ویتنی در کجا واقع شده است ؟)
</syn>
<augsyn lang="en">
(S Where-[State:1] is-[State:1] Mount-[PlaceName:3] Whitney-[PlaceName:3])
</augsyn>
<mrl lang="geo-funql">
answer(loc_1(placeid('mount whitney')))
</mrl>
<mrl lang="geo-prolog">
answer(A,(loc(B,A),const(B,placeid('mount whitney'))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ loc_1 ( *n:Place ) }) </node>
<node id="2"> *n:Place -> ({ placeid ( *n:PlaceName ) }) </node>
<node id="3"> *n:PlaceName -> ({ ' mount whitney ' }) </node>
</mrl-parse>
</example>

<example id="766">
<nl lang="en">
مونت ویتنی در کجا واقع شده است ؟
</nl>
<syn lang="en">
(S مونت ویتنی در کجا واقع شده است ؟)
</syn>
<augsyn lang="en">
(S Where-[State:1] is-[State:1] Mount-[PlaceName:3] Whitney-[PlaceName:3] located-[State:1])
</augsyn>
<mrl lang="geo-funql">
answer(loc_1(placeid('mount whitney')))
</mrl>
<mrl lang="geo-prolog">
answer(A,(loc(B,A),const(B,placeid('mount whitney'))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ loc_1 ( *n:Place ) }) </node>
<node id="2"> *n:Place -> ({ placeid ( *n:PlaceName ) }) </node>
<node id="3"> *n:PlaceName -> ({ ' mount whitney ' }) </node>
</mrl-parse>
</example>

<example id="767">
<nl lang="en">
نیو همپشایر در کجاست ؟
</nl>
<syn lang="en">
(S نیو همپشایر در کجاست ؟)
</syn>
<augsyn lang="en">
(S Where-[Country:1] is-[Country:1] New-[StateName:3] Hampshire-[StateName:3])
</augsyn>
<mrl lang="geo-funql">
answer(loc_1(stateid('new hampshire')))
</mrl>
<mrl lang="geo-prolog">
answer(A,(loc(B,A),const(B,stateid('new hampshire'))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Country ) }) </node>
<node id="1"> *n:Country -> ({ loc_1 ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="3"> *n:StateName -> ({ ' new hampshire ' }) </node>
</mrl-parse>
</example>

<example id="768">
<nl lang="en">
نیو اورلئان در کجاست ؟
</nl>
<syn lang="en">
(S نیو اورلئان در کجاست ؟)
</syn>
<augsyn lang="en">
(S Where-[State:1] is-[State:1] New-[CityName:3] Orleans-[CityName:3])
</augsyn>
<mrl lang="geo-funql">
answer(loc_1(cityid('new orleans', _)))
</mrl>
<mrl lang="geo-prolog">
answer(A,(loc(B,A),const(B,cityid('new orleans',_))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ loc_1 ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ cityid ( *n:CityName , _ ) }) </node>
<node id="3"> *n:CityName -> ({ ' new orleans ' }) </node>
</mrl-parse>
</example>

<example id="769">
<nl lang="en">
پورتلند در کجاست ؟
</nl>
<syn lang="en">
(S پورتلند در کجاست ؟)
</syn>
<augsyn lang="en">
(S Where-[State:1] is-[State:1] Portland-[CityName:3])
</augsyn>
<mrl lang="geo-funql">
answer(loc_1(cityid('portland', _)))
</mrl>
<mrl lang="geo-prolog">
answer(A,(loc(B,A),const(B,cityid(portland,_))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ loc_1 ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ cityid ( *n:CityName , _ ) }) </node>
<node id="3"> *n:CityName -> ({ ' portland ' }) </node>
</mrl-parse>
</example>

<example id="770">
<nl lang="en">
سن دیگو در کجا است ؟
</nl>
<syn lang="en">
(S سن دیگو در کجا است ؟)
</syn>
<augsyn lang="en">
(S Where-[State:1] is-[State:1] San-[CityName:3] Diego-[CityName:3])
</augsyn>
<mrl lang="geo-funql">
answer(loc_1(cityid('san diego', _)))
</mrl>
<mrl lang="geo-prolog">
answer(A,(loc(B,A),const(B,cityid('san diego',_))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ loc_1 ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ cityid ( *n:CityName , _ ) }) </node>
<node id="3"> *n:CityName -> ({ ' san diego ' }) </node>
</mrl-parse>
</example>

<example id="771">
<nl lang="en">
سن خوزه در کجا است ؟
</nl>
<syn lang="en">
(S سن خوزه در کجا است ؟)
</syn>
<augsyn lang="en">
(S Where-[State:1] is-[State:1] San-[CityName:3] Jose-[CityName:3])
</augsyn>
<mrl lang="geo-funql">
answer(loc_1(cityid('san jose', _)))
</mrl>
<mrl lang="geo-prolog">
answer(A,(loc(B,A),const(B,cityid('san jose',_))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ loc_1 ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ cityid ( *n:CityName , _ ) }) </node>
<node id="3"> *n:CityName -> ({ ' san jose ' }) </node>
</mrl-parse>
</example>

<example id="772">
<nl lang="en">
اسکاتس ولی در کجا است ؟
</nl>
<syn lang="en">
(S اسکاتس ولی در کجا است ؟)
</syn>
<augsyn lang="en">
(S Where-[State:1] is-[State:1] Scotts-[CityName:3] Valley-[CityName:3])
</augsyn>
<mrl lang="geo-funql">
answer(loc_1(cityid('scotts valley', _)))
</mrl>
<mrl lang="geo-prolog">
answer(A,(loc(B,A),const(B,cityid('scotts valley',_))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ loc_1 ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ cityid ( *n:CityName , _ ) }) </node>
<node id="3"> *n:CityName -> ({ ' scotts valley ' }) </node>
</mrl-parse>
</example>

<example id="773">
<nl lang="en">
اسپرینگفیلد کجا واقع شده است ؟
</nl>
<syn lang="en">
(S اسپرینگفیلد کجا واقع شده است ؟)
</syn>
<augsyn lang="en">
(S Where-[State:1] is-[State:1] Springfield-[CityName:3])
</augsyn>
<mrl lang="geo-funql">
answer(loc_1(cityid('springfield', _)))
</mrl>
<mrl lang="geo-prolog">
answer(A,(loc(B,A),const(B,cityid(springfield,_))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ loc_1 ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ cityid ( *n:CityName , _ ) }) </node>
<node id="3"> *n:CityName -> ({ ' springfield ' }) </node>
</mrl-parse>
</example>

<example id="774">
<nl lang="en">
رودخانه چاتاهوچی در کجا واقع شده است ؟
</nl>
<syn lang="en">
(S رودخانه چاتاهوچی در کجا واقع شده است ؟)
</syn>
<augsyn lang="en">
(S Where-[State:1] is-[State:1] the Chattahoochee-[RiverName:4] river-[River:2])
</augsyn>
<mrl lang="geo-funql">
answer(loc_1(river(riverid('chattahoochee'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(loc(B,A),const(B,riverid(chattahoochee)),river(B)))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ loc_1 ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ riverid ( *n:RiverName ) }) </node>
<node id="4"> *n:RiverName -> ({ ' chattahoochee ' }) </node>
</mrl-parse>
</example>

<example id="775">
<nl lang="en">
بلندترین کوه ایالات متحده کجاست ؟
</nl>
<syn lang="en">
(S بلندترین کوه ایالات متحده کجاست ؟)
</syn>
<augsyn lang="en">
(S Where-[Query:0] is-[Query:0] the highest-[Place:1] mountain-[Place:2] of-[Place:3] the United-[CountryName:5] States-[CountryName:5])
</augsyn>
<mrl lang="geo-funql">
answer(highest(mountain(loc_2(countryid('usa')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,highest(A,(mountain(A),loc(A,B),const(B,countryid(usa)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Place ) }) </node>
<node id="1"> *n:Place -> ({ highest ( *n:Place ) }) </node>
<node id="2"> *n:Place -> ({ mountain ( *n:Place ) }) </node>
<node id="3"> *n:Place -> ({ loc_2 ( *n:Country ) }) </node>
<node id="4"> *n:Country -> ({ countryid ( *n:CountryName ) }) </node>
<node id="5"> *n:CountryName -> ({ ' usa ' }) </node>
</mrl-parse>
</example>

<example id="776">
<nl lang="en">
بالاترین نقطه در هاوایی کجا است ؟
</nl>
<nl lang="es">
que es el punto mas alto en hawaii ?
</nl>
<nl lang="ja">
hawai no mottomo takai chiten wa doko desu ka ?
</nl>
<nl lang="tr">
hawaii deki en yuksek nokta nerededir ?
</nl>
<syn lang="en">
(S بالاترین نقطه در هاوایی کجا است ؟)
</syn>
<syn lang="es">
(S que es el punto mas alto en hawaii)
</syn>
<syn lang="ja">
(S hawai no mottomo takai chiten wa doko desu ka)
</syn>
<syn lang="tr">
(S hawaii deki en yuksek nokta nerededir)
</syn>
<augsyn lang="en">
(S Where-[Query:0] is-[Query:0] the highest-[Place:1] point-[Place:2] in-[Place:3] Hawaii-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(highest(place(loc_2(stateid('hawaii')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(hawaii)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Place ) }) </node>
<node id="1"> *n:Place -> ({ highest ( *n:Place ) }) </node>
<node id="2"> *n:Place -> ({ place ( *n:Place ) }) </node>
<node id="3"> *n:Place -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' hawaii ' }) </node>
</mrl-parse>
</example>

<example id="777">
<nl lang="en">
بالاترین نقطه در مونتانا کجا است ؟
</nl>
<nl lang="es">
donde esta el punto mas alto en montana ?
</nl>
<nl lang="ja">
montana no mottomo takai chiten wa doko desu ka ?
</nl>
<nl lang="tr">
montana daki en yuksek nokta nerededir ?
</nl>
<syn lang="en">
(S بالاترین نقطه در مونتانا کجا است ؟)
</syn>
<syn lang="es">
(S donde esta el punto mas alto en montana)
</syn>
<syn lang="ja">
(S montana no mottomo takai chiten wa doko desu ka)
</syn>
<syn lang="tr">
(S montana daki en yuksek nokta nerededir)
</syn>
<augsyn lang="en">
(S Where-[Query:0] is-[Query:0] the highest-[Place:1] point-[Place:2] in-[Place:3] Montana-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(highest(place(loc_2(stateid('montana')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(montana)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Place ) }) </node>
<node id="1"> *n:Place -> ({ highest ( *n:Place ) }) </node>
<node id="2"> *n:Place -> ({ place ( *n:Place ) }) </node>
<node id="3"> *n:Place -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' montana ' }) </node>
</mrl-parse>
</example>

<example id="778">
<nl lang="en">
پایین ترین نقطه در مریلند کجا است ؟
</nl>
<syn lang="en">
(S پایین ترین نقطه در مریلند کجا است ؟)
</syn>
<augsyn lang="en">
(S Where-[Query:0] is-[Query:0] the lowest-[Place:1] point-[Place:2] in-[Place:3] Maryland-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(lowest(place(loc_2(stateid('maryland')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,lowest(A,(place(A),loc(A,B),const(B,stateid(maryland)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Place ) }) </node>
<node id="1"> *n:Place -> ({ lowest ( *n:Place ) }) </node>
<node id="2"> *n:Place -> ({ place ( *n:Place ) }) </node>
<node id="3"> *n:Place -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' maryland ' }) </node>
</mrl-parse>
</example>

<example id="779">
<nl lang="en">
پایین ترین نقطه در ایالات متحده کجاست ؟
</nl>
<nl lang="es">
donde esta el punto mas bajo en los us ?
</nl>
<nl lang="ja">
beikoku no mottomo hikui chiten wa doko desu ka ?
</nl>
<nl lang="tr">
us deki en alcak nokta nerededir ?
</nl>
<syn lang="en">
(S پایین ترین نقطه در ایالات متحده کجاست ؟)
</syn>
<syn lang="es">
(S donde esta el punto mas bajo en los us)
</syn>
<syn lang="ja">
(S beikoku no mottomo hikui chiten wa doko desu ka)
</syn>
<syn lang="tr">
(S us deki en alcak nokta nerededir)
</syn>
<augsyn lang="en">
(S Where-[Query:0] is-[Query:0] the lowest-[Place:1] point-[Place:2] in-[Place:3] the US-[CountryName:5])
</augsyn>
<mrl lang="geo-funql">
answer(lowest(place(loc_2(countryid('usa')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,lowest(A,(place(A),loc(A,B),const(B,countryid(usa)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Place ) }) </node>
<node id="1"> *n:Place -> ({ lowest ( *n:Place ) }) </node>
<node id="2"> *n:Place -> ({ place ( *n:Place ) }) </node>
<node id="3"> *n:Place -> ({ loc_2 ( *n:Country ) }) </node>
<node id="4"> *n:Country -> ({ countryid ( *n:CountryName ) }) </node>
<node id="5"> *n:CountryName -> ({ ' usa ' }) </node>
</mrl-parse>
</example>

<example id="780">
<nl lang="en">
پایین ترین نقطه در آیووا کجا است ؟
</nl>
<nl lang="es">
donde esta el punto mas bajo en iowa ?
</nl>
<nl lang="ja">
aiowa no mottomo hikui chiten wa nan desu ka ?
</nl>
<nl lang="tr">
iowa daki en alcak nokta nerededir ?
</nl>
<syn lang="en">
(S پایین ترین نقطه در آیووا کجا است ؟)
</syn>
<syn lang="es">
(S donde esta el punto mas bajo en iowa)
</syn>
<syn lang="ja">
(S aiowa no mottomo hikui chiten wa nan desu ka)
</syn>
<syn lang="tr">
(S iowa daki en alcak nokta nerededir)
</syn>
<augsyn lang="en">
(S Where-[Query:0] is-[Query:0] the lowest-[Place:1] spot-[Place:2] in-[Place:3] Iowa-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(lowest(place(loc_2(stateid('iowa')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,lowest(A,(place(A),loc(A,B),const(B,stateid(iowa)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Place ) }) </node>
<node id="1"> *n:Place -> ({ lowest ( *n:Place ) }) </node>
<node id="2"> *n:Place -> ({ place ( *n:Place ) }) </node>
<node id="3"> *n:Place -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' iowa ' }) </node>
</mrl-parse>
</example>

<example id="781">
<nl lang="en">
پرجمعیت ترین منطقه نیومکزیکو کجا است ؟
</nl>
<syn lang="en">
(S پرجمعیت ترین منطقه نیومکزیکو کجا است ؟)
</syn>
<augsyn lang="en">
(S Where-[Query:0] is-[Query:0] the most-[City:1] populated-[City:1] area-[City:2] of-[City:3] New-[StateName:5] Mexico-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(largest_one(population_1(city(loc_2(stateid('new mexico'))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,largest(B,(population(A,B),city(A),loc(A,C),const(C,stateid('new mexico')))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ largest_one ( population_1 ( *n:City ) ) }) </node>
<node id="2"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' new mexico ' }) </node>
</mrl-parse>
</example>

<example id="782">
<nl lang="en">
کوچکترین شهرستان در کجا واقع شده است ؟
</nl>
<syn lang="en">
(S کوچکترین شهرستان در کجا واقع شده است ؟)
</syn>
<augsyn lang="en">
(S Where-[State:1] is-[State:1] the smallest-[City:2] city-[City:3])
</augsyn>
<mrl lang="geo-funql">
answer(loc_1(smallest(city(all))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(loc(B,A),smallest(B,city(B))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ loc_1 ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ smallest ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ city ( all ) }) </node>
</mrl-parse>
</example>

<example id="783">
<nl lang="en">
مراکز ایالت هایی که با تگزاس همجوار هستند کدامند ؟
</nl>
<syn lang="en">
(S مراکز ایالت هایی که با تگزاس همجوار هستند کدامند ؟)
</syn>
<augsyn lang="en">
(S Which capitals-[City:1] are-[City:2] in-[City:2] the states-[State:3] that border-[State:4] Texas-[StateName:6])
</augsyn>
<mrl lang="geo-funql">
answer(capital(loc_2(state(next_to_2(stateid('texas'))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(capital(A),loc(A,B),state(B),next_to(B,C),const(C,stateid(texas))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ capital ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="6"> *n:StateName -> ({ ' texas ' }) </node>
</mrl-parse>
</example>

<example id="784">
<nl lang="en">
کدام مراکز ایالات شهر عمده ای نیستند ؟
</nl>
<syn lang="en">
(S کدام مراکز ایالات شهر عمده ای نیستند ؟)
</syn>
<augsyn lang="en">
(S Which capitals-[City:2] are-[City:1] not-[City:1] major-[City:3] cities-[City:4])
</augsyn>
<mrl lang="geo-funql">
answer(exclude(capital(all), major(city(all))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(capital(A),not((major(A),city(A)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ exclude ( *n:City , *n:City ) }) </node>
<node id="2"> *n:City -> ({ capital ( all ) }) </node>
<node id="3"> *n:City -> ({ major ( *n:City ) }) </node>
<node id="4"> *n:City -> ({ city ( all ) }) </node>
</mrl-parse>
</example>

<example id="785">
<nl lang="en">
کدام شهر کالیفرنیا دارای بیشترین جمعیت است ؟
</nl>
<syn lang="en">
(S کدام شهر کالیفرنیا دارای بیشترین جمعیت است ؟)
</syn>
<augsyn lang="en">
(S Which city-[City:2] in-[City:3] California-[StateName:5] has-[City:1] the largest-[City:1] population-[City:1])
</augsyn>
<mrl lang="geo-funql">
answer(largest_one(population_1(city(loc_2(stateid('california'))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,largest(B,(city(A),loc(A,C),const(C,stateid(california)),population(A,B))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ largest_one ( population_1 ( *n:City ) ) }) </node>
<node id="2"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' california ' }) </node>
</mrl-parse>
</example>

<example id="786">
<nl lang="en">
تراکم جمعیت ایالتی که بزرگترین رود در ایالات متحده از آن عبور میکند چقدر است ؟
</nl>
<syn lang="en">
(S تراکم جمعیت ایالتی که بزرگترین رود در ایالات متحده از آن عبور میکند چقدر است ؟)
</syn>
<augsyn lang="en">
(S Which is-[Query:0] the density-[Num:1] of-[Num:1] the state-[State:2] that the largest-[River:4] river-[River:5] in-[River:6] the United-[CountryName:8] States-[CountryName:8] runs-[State:3] through-[State:3])
</augsyn>
<mrl lang="geo-funql">
answer(density_1(state(traverse_1(longest(river(loc_2(countryid('usa'))))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(density(B,A),state(B),longest(C,(river(C),loc(C,D),const(D,countryid(usa)))),traverse(C,B)))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ density_1 ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ traverse_1 ( *n:River ) }) </node>
<node id="4"> *n:River -> ({ longest ( *n:River ) }) </node>
<node id="5"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="6"> *n:River -> ({ loc_2 ( *n:Country ) }) </node>
<node id="7"> *n:Country -> ({ countryid ( *n:CountryName ) }) </node>
<node id="8"> *n:CountryName -> ({ ' usa ' }) </node>
</mrl-parse>
</example>

<example id="787">
<nl lang="en">
بزرگترین قله ای که در آلاسکا واقع نشده است کدام است ؟
</nl>
<syn lang="en">
(S بزرگترین قله ای که در آلاسکا واقع نشده است کدام است ؟)
</syn>
<augsyn lang="en">
(S Which is-[Query:0] the highest-[Place:1] peak-[Place:3] not-[Place:2] in-[Place:4] Alaska-[StateName:6])
</augsyn>
<mrl lang="geo-funql">
answer(highest(exclude(mountain(all),  loc_2(stateid('alaska')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,highest(A,(mountain(A),not((loc(A,B),const(B,stateid(alaska)))))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Place ) }) </node>
<node id="1"> *n:Place -> ({ highest ( *n:Place ) }) </node>
<node id="2"> *n:Place -> ({ exclude ( *n:Place , *n:Place ) }) </node>
<node id="3"> *n:Place -> ({ mountain ( all ) }) </node>
<node id="4"> *n:Place -> ({ loc_2 ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="6"> *n:StateName -> ({ ' alaska ' }) </node>
</mrl-parse>
</example>

<example id="788">
<nl lang="en">
بلندترین رودخانه در ایالات متحده آمریکا کدام است ؟
</nl>
<syn lang="en">
(S بلندترین رودخانه در ایالات متحده آمریکا کدام است ؟)
</syn>
<augsyn lang="en">
(S Which is-[Query:0] the longest-[River:1] river-[River:2] in-[River:3] USA-[CountryName:5])
</augsyn>
<mrl lang="geo-funql">
answer(longest(river(loc_2(countryid('usa')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,longest(A,(river(A),loc(A,B),const(B,countryid(usa)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:River ) }) </node>
<node id="1"> *n:River -> ({ longest ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ loc_2 ( *n:Country ) }) </node>
<node id="4"> *n:Country -> ({ countryid ( *n:CountryName ) }) </node>
<node id="5"> *n:CountryName -> ({ ' usa ' }) </node>
</mrl-parse>
</example>

<example id="789">
<nl lang="en">
پایین نقطه ایالتهایی که میسیسیپی از آنها عبور میکند کجاست ؟
</nl>
<syn lang="en">
(S پایین نقطه ایالتهایی که میسیسیپی از آنها عبور میکند کجاست ؟)
</syn>
<augsyn lang="en">
(S Which is-[Query:0] the lowest-[Place:1] point-[Place:2] of-[Place:3] the states-[State:4] that the Mississippi-[RiverName:7] runs-[State:5] through-[State:5])
</augsyn>
<mrl lang="geo-funql">
answer(lowest(place(loc_2(state(traverse_1(riverid('mississippi')))))))
</mrl>
<mrl lang="geo-prolog">
answer(B,lowest(B,(place(B),loc(B,A),state(A),const(C,riverid(mississippi)),traverse(C,A))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Place ) }) </node>
<node id="1"> *n:Place -> ({ lowest ( *n:Place ) }) </node>
<node id="2"> *n:Place -> ({ place ( *n:Place ) }) </node>
<node id="3"> *n:Place -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ traverse_1 ( *n:River ) }) </node>
<node id="6"> *n:River -> ({ riverid ( *n:RiverName ) }) </node>
<node id="7"> *n:RiverName -> ({ ' mississippi ' }) </node>
</mrl-parse>
</example>

<example id="790">
<nl lang="en">
کوتاهترین رودخانه کدام است ؟
</nl>
<syn lang="en">
(S کوتاهترین رودخانه کدام است ؟)
</syn>
<augsyn lang="en">
(S Which is-[Query:0] the shortest-[River:1] river-[River:2])
</augsyn>
<mrl lang="geo-funql">
answer(shortest(river(all)))
</mrl>
<mrl lang="geo-prolog">
answer(A,shortest(A,river(A)))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:River ) }) </node>
<node id="1"> *n:River -> ({ shortest ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ river ( all ) }) </node>
</mrl-parse>
</example>

<example id="791">
<nl lang="en">
کوچکترین ایالت کدام است ؟
</nl>
<syn lang="en">
(S کوچکترین ایالت کدام است ؟)
</syn>
<augsyn lang="en">
(S Which is-[Query:0] the smallest-[State:1] state-[State:2])
</augsyn>
<mrl lang="geo-funql">
answer(smallest(state(all)))
</mrl>
<mrl lang="geo-prolog">
answer(A,smallest(A,state(A)))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ smallest ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="792">
<nl lang="en">
کدامیک از ایالت هایی که با پنسلیوانیا همجوار هستند دارای جمعیت بیشتری میباشند ؟
</nl>
<syn lang="en">
(S کدامیک از ایالت هایی که با پنسلیوانیا همجوار هستند دارای جمعیت بیشتری میباشند ؟)
</syn>
<augsyn lang="en">
(S Which of-[State:2] the states-[State:2] bordering-[State:3] Pennsylvania-[StateName:5] has-[State:1] the largest-[State:1] population-[State:1])
</augsyn>
<mrl lang="geo-funql">
answer(largest_one(population_1(state(next_to_2(stateid('pennsylvania'))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,largest(B,(state(A),next_to(A,C),const(C,stateid(pennsylvania)),population(A,B))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ largest_one ( population_1 ( *n:State ) ) }) </node>
<node id="2"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' pennsylvania ' }) </node>
</mrl-parse>
</example>

<example id="793">
<nl lang="en">
کدام رودخانه از ایالت های بیشتری عبور میکند ؟
</nl>
<syn lang="en">
(S کدام رودخانه از ایالت های بیشتری عبور میکند ؟)
</syn>
<augsyn lang="en">
(S Which river-[River:2] goes-[River:3] through-[River:3] the most-[River:1] states-[State:4])
</augsyn>
<mrl lang="geo-funql">
answer(most(river(traverse_2(state(all)))))
</mrl>
<mrl lang="geo-prolog">
answer(A,most(A,B,(river(A),traverse(A,B),state(B))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:River ) }) </node>
<node id="1"> *n:River -> ({ most ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ traverse_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="794">
<nl lang="en">
کدام رودخانه از ایالت های بیشتری عبور میکند ؟
</nl>
<syn lang="en">
(S کدام رودخانه از ایالت های بیشتری عبور میکند ؟)
</syn>
<augsyn lang="en">
(S Which river-[River:2] runs-[River:3] through-[River:3] most-[River:1] states-[State:4])
</augsyn>
<mrl lang="geo-funql">
answer(most(river(traverse_2(state(all)))))
</mrl>
<mrl lang="geo-prolog">
answer(A,most(A,B,(river(A),traverse(A,B),state(B))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:River ) }) </node>
<node id="1"> *n:River -> ({ most ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ traverse_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="795">
<nl lang="en">
کدام رودخانه از بیشتر ایالت ها میگذرد ؟
</nl>
<nl lang="es">
cual rio corre por mas estados ?
</nl>
<nl lang="ja">
donna kawa ga mottomo ooku no kawa wo nagarete imasu ka ?
</nl>
<nl lang="tr">
hangi nehir en cok eyaletten gecer ?
</nl>
<syn lang="en">
(S کدام رودخانه از بیشتر ایالت ها میگذرد ؟)
</syn>
<syn lang="es">
(S cual rio corre por mas estados)
</syn>
<syn lang="ja">
(S donna kawa ga mottomo ooku no kawa wo nagarete imasu ka)
</syn>
<syn lang="tr">
(S hangi nehir en cok eyaletten gecer)
</syn>
<augsyn lang="en">
(S Which river-[River:2] runs-[River:3] through-[River:3] the most-[River:1] states-[State:4])
</augsyn>
<mrl lang="geo-funql">
answer(most(river(traverse_2(state(all)))))
</mrl>
<mrl lang="geo-prolog">
answer(A,most(A,B,(river(A),traverse(A,B),state(B))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:River ) }) </node>
<node id="1"> *n:River -> ({ most ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ traverse_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="796">
<nl lang="en">
کدام رودخانه از ایالت های بیشتری میگذرد ؟
</nl>
<syn lang="en">
(S کدام رودخانه از ایالت های بیشتری میگذرد ؟)
</syn>
<augsyn lang="en">
(S Which river-[River:2] traverses-[River:3] most-[River:1] states-[State:4])
</augsyn>
<mrl lang="geo-funql">
answer(most(river(traverse_2(state(all)))))
</mrl>
<mrl lang="geo-prolog">
answer(A,most(A,B,(river(A),traverse(A,B),state(B))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:River ) }) </node>
<node id="1"> *n:River -> ({ most ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ traverse_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="797">
<nl lang="en">
کدام رودخانه ها در آلاسکا واقع شده اند ؟
</nl>
<syn lang="en">
(S کدام رودخانه ها در آلاسکا واقع شده اند ؟)
</syn>
<augsyn lang="en">
(S Which rivers-[River:1] are-[River:2] in-[River:2] Alaska-[StateName:4])
</augsyn>
<mrl lang="geo-funql">
answer(river(loc_2(stateid('alaska'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(river(A),loc(A,B),const(B,stateid(alaska))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:River ) }) </node>
<node id="1"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ loc_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="4"> *n:StateName -> ({ ' alaska ' }) </node>
</mrl-parse>
</example>

<example id="798">
<nl lang="en">
کدام رودخانه ها از تگزاس نمیگذرند ؟
</nl>
<syn lang="en">
(S کدام رودخانه ها از تگزاس نمیگذرند ؟)
</syn>
<augsyn lang="en">
(S Which rivers-[River:2] do-[River:1] not-[River:1] run-[River:3] through-[River:3] Texas-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(exclude(river(all), traverse_2(stateid('texas'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(river(A),not((traverse(A,B),const(B,stateid(texas))))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:River ) }) </node>
<node id="1"> *n:River -> ({ exclude ( *n:River , *n:River ) }) </node>
<node id="2"> *n:River -> ({ river ( all ) }) </node>
<node id="3"> *n:River -> ({ traverse_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' texas ' }) </node>
</mrl-parse>
</example>

<example id="799">
<nl lang="en">
کدام روخانه ها از ایالات متحده آمریکا نمیگذرند ؟
</nl>
<syn lang="en">
(S کدام روخانه ها از ایالات متحده آمریکا نمیگذرند ؟)
</syn>
<augsyn lang="en">
(S Which rivers-[River:2] do-[River:1] not-[River:1] run-[River:3] through-[River:3] USA-[CountryName:5])
</augsyn>
<mrl lang="geo-funql">
answer(exclude(river(all), traverse_2(countryid('usa'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(river(A),not((traverse(A,B),const(B,countryid(usa))))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:River ) }) </node>
<node id="1"> *n:River -> ({ exclude ( *n:River , *n:River ) }) </node>
<node id="2"> *n:River -> ({ river ( all ) }) </node>
<node id="3"> *n:River -> ({ traverse_2 ( *n:Country ) }) </node>
<node id="4"> *n:Country -> ({ countryid ( *n:CountryName ) }) </node>
<node id="5"> *n:CountryName -> ({ ' usa ' }) </node>
</mrl-parse>
</example>

<example id="800">
<nl lang="en">
کدام رودخانه ها از آلاسکا میگذرند ؟
</nl>
<nl lang="es">
cuales rios corren por alaska ?
</nl>
<nl lang="ja">
dono kawa wa arasuka wo nagarete imasu ka ?
</nl>
<nl lang="tr">
hangi nehirler alaska nin icinden akar ?
</nl>
<syn lang="en">
(S کدام رودخانه ها از آلاسکا میگذرند ؟)
</syn>
<syn lang="es">
(S cuales rios corren por alaska)
</syn>
<syn lang="ja">
(S dono kawa wa arasuka wo nagarete imasu ka)
</syn>
<syn lang="tr">
(S hangi nehirler alaska nin icinden akar)
</syn>
<augsyn lang="en">
(S Which rivers-[River:1] flow-[River:2] through-[River:2] Alaska-[StateName:4])
</augsyn>
<mrl lang="geo-funql">
answer(river(traverse_2(stateid('alaska'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(river(A),traverse(A,B),const(B,stateid(alaska))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:River ) }) </node>
<node id="1"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ traverse_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="4"> *n:StateName -> ({ ' alaska ' }) </node>
</mrl-parse>
</example>

<example id="801">
<nl lang="en">
کدام رودخانه ها از ایالت هایی میگذرند که با نیومکزیکو همجوار هستند ؟
</nl>
<nl lang="es">
cuales rios corren por estados bordeando a new mexico ?
</nl>
<nl lang="ja">
donna kawa wa nyuu mekishiko ni rinsetsu suru shuu wo nagarete imasu ka ?
</nl>
<nl lang="tr">
hangi nehirler new mexico ya siniri olan eyaletlerden gecer ?
</nl>
<syn lang="en">
(S کدام رودخانه ها از ایالت هایی میگذرند که با نیومکزیکو همجوار هستند ؟)
</syn>
<syn lang="es">
(S cuales rios corren por estados bordeando a new_mexico)
</syn>
<syn lang="ja">
(S donna kawa wa nyuu_mekishiko ni rinsetsu suru shuu wo nagarete imasu ka)
</syn>
<syn lang="tr">
(S hangi nehirler new_mexico ya siniri olan eyaletlerden gecer)
</syn>
<augsyn lang="en">
(S Which rivers-[River:1] run-[River:2] through-[River:2] states-[State:3] bordering-[State:4] New-[StateName:6] Mexico-[StateName:6])
</augsyn>
<mrl lang="geo-funql">
answer(river(traverse_2(state(next_to_2(stateid('new mexico'))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(river(A),traverse(A,B),state(B),next_to(B,C),const(C,stateid('new mexico'))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:River ) }) </node>
<node id="1"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ traverse_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="6"> *n:StateName -> ({ ' new mexico ' }) </node>
</mrl-parse>
</example>

<example id="802">
<nl lang="en">
کدام رودخانه ها از ایالت هایی میگذرند که با استانی با مرکزیت آستین همجوار است ؟
</nl>
<syn lang="en">
(S کدام رودخانه ها از ایالت هایی میگذرند که با استانی با مرکزیت آستین همجوار است ؟)
</syn>
<augsyn lang="en">
(S Which rivers-[River:1] run-[River:2] through-[River:2] states-[State:3] that border-[State:4] the state-[State:5] with-[State:6] the capital-[City:7] Austin-[CityName:9])
</augsyn>
<mrl lang="geo-funql">
answer(river(traverse_2(state(next_to_2(state(loc_1(capital(cityid('austin', _)))))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(river(A),traverse(A,B),state(B),next_to(B,C),state(C),loc(D,C),capital(D),const(D,cityid(austin,_))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:River ) }) </node>
<node id="1"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ traverse_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="6"> *n:State -> ({ loc_1 ( *n:City ) }) </node>
<node id="7"> *n:City -> ({ capital ( *n:City ) }) </node>
<node id="8"> *n:City -> ({ cityid ( *n:CityName , _ ) }) </node>
<node id="9"> *n:CityName -> ({ ' austin ' }) </node>
</mrl-parse>
</example>

<example id="803">
<nl lang="en">
کدام رودخانه ها از ایالت هایی که کمترین شهرها را دارند میگذرند ؟
</nl>
<syn lang="en">
(S کدام رودخانه ها از ایالت هایی که کمترین شهرها را دارند میگذرند ؟)
</syn>
<augsyn lang="en">
(S Which rivers-[River:1] run-[River:2] through-[River:2] states-[State:4] with-[State:5] fewest-[State:3] cities-[City:6])
</augsyn>
<mrl lang="geo-funql">
answer(river(traverse_2(fewest(state(loc_1(city(all)))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(river(A),traverse(A,B),fewest(B,C,(state(B),loc(C,B),city(C)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:River ) }) </node>
<node id="1"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ traverse_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ fewest ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ loc_1 ( *n:City ) }) </node>
<node id="6"> *n:City -> ({ city ( all ) }) </node>
</mrl-parse>
</example>

<example id="804">
<nl lang="en">
کدام رودخانه ها از ایالتی که بزرگترین شهر آمریکا در آن واقع شده است میگذرند ؟
</nl>
<syn lang="en">
(S کدام رودخانه ها از ایالتی که بزرگترین شهر آمریکا در آن واقع شده است میگذرند ؟)
</syn>
<augsyn lang="en">
(S Which rivers-[River:1] run-[River:2] through-[River:2] the state-[State:3] with-[State:4] the largest-[City:5] city-[City:6] in-[City:7] the US-[CountryName:9])
</augsyn>
<mrl lang="geo-funql">
answer(river(traverse_2(state(loc_1(largest(city(loc_2(countryid('usa')))))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(river(A),traverse(A,B),state(B),loc(C,B),largest(C,(city(C),loc(C,D),const(D,countryid(usa))))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:River ) }) </node>
<node id="1"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ traverse_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ loc_1 ( *n:City ) }) </node>
<node id="5"> *n:City -> ({ largest ( *n:City ) }) </node>
<node id="6"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="7"> *n:City -> ({ loc_2 ( *n:Country ) }) </node>
<node id="8"> *n:Country -> ({ countryid ( *n:CountryName ) }) </node>
<node id="9"> *n:CountryName -> ({ ' usa ' }) </node>
</mrl-parse>
</example>

<example id="805">
<nl lang="en">
کدام رودخانه ها از ایالتی که کمترین ارتفاع را در ایالات متحده آمریکا دارد میگذرند ؟
</nl>
<syn lang="en">
(S کدام رودخانه ها از ایالتی که کمترین ارتفاع را در ایالات متحده آمریکا دارد میگذرند ؟)
</syn>
<augsyn lang="en">
(S Which rivers-[River:1] run-[River:2] through-[River:2] the state-[State:3] with-[State:4] the lowest-[Place:5] elevation-[Place:6] in-[Place:7] the USA-[CountryName:9])
</augsyn>
<mrl lang="geo-funql">
answer(river(traverse_2(state(loc_1(lowest(place(loc_2(countryid('usa')))))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(river(A),traverse(A,B),state(B),loc(C,B),lowest(C,(place(C),loc(C,D),const(D,countryid(usa))))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:River ) }) </node>
<node id="1"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ traverse_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ loc_1 ( *n:Place ) }) </node>
<node id="5"> *n:Place -> ({ lowest ( *n:Place ) }) </node>
<node id="6"> *n:Place -> ({ place ( *n:Place ) }) </node>
<node id="7"> *n:Place -> ({ loc_2 ( *n:Country ) }) </node>
<node id="8"> *n:Country -> ({ countryid ( *n:CountryName ) }) </node>
<node id="9"> *n:CountryName -> ({ ' usa ' }) </node>
</mrl-parse>
</example>

<example id="806">
<nl lang="en">
کدام ایالت همجوار کنتاکی است ؟
</nl>
<nl lang="es">
cual estado bordean a kentucky ?
</nl>
<nl lang="ja">
kentakkii ni rinsetsu suru shuu wa nan desu ka ?
</nl>
<nl lang="tr">
hangi eyaletin kentucky ye siniri vardir ?
</nl>
<syn lang="en">
(S کدام ایالت همجوار کنتاکی است ؟)
</syn>
<syn lang="es">
(S cual estado bordean a kentucky)
</syn>
<syn lang="ja">
(S kentakkii ni rinsetsu suru shuu wa nan desu ka)
</syn>
<syn lang="tr">
(S hangi eyaletin kentucky ye siniri vardir)
</syn>
<augsyn lang="en">
(S Which state-[State:1] border-[State:2] Kentucky-[StateName:4])
</augsyn>
<mrl lang="geo-funql">
answer(state(next_to_2(stateid('kentucky'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),next_to(A,B),const(B,stateid(kentucky))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="4"> *n:StateName -> ({ ' kentucky ' }) </node>
</mrl-parse>
</example>

<example id="807">
<nl lang="en">
کدام ایالت همجوار فلوریدا است ؟
</nl>
<nl lang="es">
cual estado bordea a florida ?
</nl>
<nl lang="ja">
furorida ni rinsetsu suru shuu wa dochira desu ka ?
</nl>
<nl lang="tr">
hangi eyaletin florida ya siniri vardir ?
</nl>
<syn lang="en">
(S کدام ایالت همجوار فلوریدا است ؟)
</syn>
<syn lang="es">
(S cual estado bordea a florida)
</syn>
<syn lang="ja">
(S furorida ni rinsetsu suru shuu wa dochira desu ka)
</syn>
<syn lang="tr">
(S hangi eyaletin florida ya siniri vardir)
</syn>
<augsyn lang="en">
(S Which state-[State:1] borders-[State:2] Florida-[StateName:4])
</augsyn>
<mrl lang="geo-funql">
answer(state(next_to_2(stateid('florida'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),next_to(A,B),const(B,stateid(florida))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="4"> *n:StateName -> ({ ' florida ' }) </node>
</mrl-parse>
</example>

<example id="808">
<nl lang="en">
کدام ایالت همجوار هاوایی است ؟
</nl>
<nl lang="es">
cual estado bordea a hawaii ?
</nl>
<nl lang="ja">
hawai ni rinsetsu suru shuu wa dochira desu ka ?
</nl>
<nl lang="tr">
hangi eyaletin hawaii ya siniri vardir ?
</nl>
<syn lang="en">
(S کدام ایالت همجوار هاوایی است ؟)
</syn>
<syn lang="es">
(S cual estado bordea a hawaii)
</syn>
<syn lang="ja">
(S hawai ni rinsetsu suru shuu wa dochira desu ka)
</syn>
<syn lang="tr">
(S hangi eyaletin hawaii ya siniri vardir)
</syn>
<augsyn lang="en">
(S Which state-[State:1] borders-[State:2] Hawaii-[StateName:4])
</augsyn>
<mrl lang="geo-funql">
answer(state(next_to_2(stateid('hawaii'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),next_to(A,B),const(B,stateid(hawaii))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="4"> *n:StateName -> ({ ' hawaii ' }) </node>
</mrl-parse>
</example>

<example id="809">
<nl lang="en">
کدام ایالت با بیشتر ایالت ها همجوار است ؟
</nl>
<nl lang="es">
cual estado bordea a los mas estados ?
</nl>
<nl lang="ja">
donna shuu ga mottomo ooku no shuu ni rinsetsu shite imasu ka ?
</nl>
<nl lang="tr">
hangi eyaletin en cok eyalete siniri vardir ?
</nl>
<syn lang="en">
(S کدام ایالت با بیشتر ایالت ها همجوار است ؟)
</syn>
<syn lang="es">
(S cual estado bordea a los mas estados)
</syn>
<syn lang="ja">
(S donna shuu ga mottomo ooku no shuu ni rinsetsu shite imasu ka)
</syn>
<syn lang="tr">
(S hangi eyaletin en cok eyalete siniri vardir)
</syn>
<augsyn lang="en">
(S Which state-[State:2] borders-[State:3] most-[State:1] states-[State:4])
</augsyn>
<mrl lang="geo-funql">
answer(most(state(next_to_2(state(all)))))
</mrl>
<mrl lang="geo-prolog">
answer(A,most(A,B,(state(A),next_to(A,B),state(B))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ most ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="810">
<nl lang="en">
کدام ایالت با بیشتر ایالت ها هم مرز است ؟
</nl>
<nl lang="es">
cual estado bordea a mas estados ?
</nl>
<nl lang="ja">
donna shuu ga mottomo ooku no shuu ni rinsetsu shite imasu ka ?
</nl>
<nl lang="tr">
hangi eyaletin en cok eyalete siniri vardir ?
</nl>
<syn lang="en">
(S کدام ایالت با بیشتر ایالت ها هم مرز است ؟)
</syn>
<syn lang="es">
(S cual estado bordea a mas estados)
</syn>
<syn lang="ja">
(S donna shuu ga mottomo ooku no shuu ni rinsetsu shite imasu ka)
</syn>
<syn lang="tr">
(S hangi eyaletin en cok eyalete siniri vardir)
</syn>
<augsyn lang="en">
(S Which state-[State:2] borders-[State:3] the most-[State:1] states-[State:4])
</augsyn>
<mrl lang="geo-funql">
answer(most(state(next_to_2(state(all)))))
</mrl>
<mrl lang="geo-prolog">
answer(A,most(A,B,(state(A),next_to(A,B),state(B))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ most ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="811">
<nl lang="en">
کدام مرکز ایالت دارای کمترین جمعیت است ؟
</nl>
<syn lang="en">
(S کدام مرکز ایالت دارای کمترین جمعیت است ؟)
</syn>
<augsyn lang="en">
(S Which state-[City:2] capital-[City:2] has-[City:1] the smallest-[City:1] population-[City:1])
</augsyn>
<mrl lang="geo-funql">
answer(smallest_one(population_1(capital(all))))
</mrl>
<mrl lang="geo-prolog">
answer(A,smallest(B,(capital(A),population(A,B))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ smallest_one ( population_1 ( *n:City ) ) }) </node>
<node id="2"> *n:City -> ({ capital ( all ) }) </node>
</mrl-parse>
</example>

<example id="812">
<nl lang="en">
کدام ایالت بیشترین رودخانه ها را دارد ؟
</nl>
<syn lang="en">
(S کدام ایالت بیشترین رودخانه ها را دارد ؟)
</syn>
<augsyn lang="en">
(S Which state-[State:2] contains-[State:3] most-[State:1] rivers-[River:4])
</augsyn>
<mrl lang="geo-funql">
answer(most(state(loc_1(river(all)))))
</mrl>
<mrl lang="geo-prolog">
answer(A,most(A,B,(state(A),loc(B,A),river(B))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ most ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ loc_1 ( *n:River ) }) </node>
<node id="4"> *n:River -> ({ river ( all ) }) </node>
</mrl-parse>
</example>

<example id="813">
<nl lang="en">
کدام ایالت بیشترین جمعیت را دارد ؟
</nl>
<syn lang="en">
(S کدام ایالت بیشترین جمعیت را دارد ؟)
</syn>
<augsyn lang="en">
(S Which state-[State:2] has-[State:1] the biggest-[State:1] population-[State:1])
</augsyn>
<mrl lang="geo-funql">
answer(largest_one(population_1(state(all))))
</mrl>
<mrl lang="geo-prolog">
answer(A,largest(B,(state(A),population(A,B))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ largest_one ( population_1 ( *n:State ) ) }) </node>
<node id="2"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="814">
<nl lang="en">
کدام ایالت بیشترین تراکم جمعیت را دارد ؟
</nl>
<syn lang="en">
(S کدام ایالت بیشترین تراکم جمعیت را دارد ؟)
</syn>
<augsyn lang="en">
(S Which state-[State:2] has-[State:1] the greatest-[State:1] density-[State:1])
</augsyn>
<mrl lang="geo-funql">
answer(largest_one(density_1(state(all))))
</mrl>
<mrl lang="geo-prolog">
answer(A,largest(B,(state(A),density(A,B))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ largest_one ( density_1 ( *n:State ) ) }) </node>
<node id="2"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="815">
<nl lang="en">
کدام ایالت بیشترین جمعیت را داراست ؟
</nl>
<nl lang="es">
cual estado tiene la poblacion mas grande ?
</nl>
<nl lang="ja">
dono shuu wa mottomo ookii jinkou ga ariumasu ka ?
</nl>
<nl lang="tr">
hangi eyalet en buyuk nufusa sahiptir ?
</nl>
<syn lang="en">
(S کدام ایالت بیشترین جمعیت را داراست ؟)
</syn>
<syn lang="es">
(S cual estado tiene la poblacion mas grande)
</syn>
<syn lang="ja">
(S dono shuu wa mottomo ookii jinkou ga ariumasu ka)
</syn>
<syn lang="tr">
(S hangi eyalet en buyuk nufusa sahiptir)
</syn>
<augsyn lang="en">
(S Which state-[State:2] has-[State:1] the greatest-[State:1] population-[State:1])
</augsyn>
<mrl lang="geo-funql">
answer(largest_one(population_1(state(all))))
</mrl>
<mrl lang="geo-prolog">
answer(A,largest(B,(state(A),population(A,B))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ largest_one ( population_1 ( *n:State ) ) }) </node>
<node id="2"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="816">
<nl lang="en">
کدام ایالت بیشترین ارتفاع را داراست ؟
</nl>
<nl lang="es">
cual estado tiene la elevacion mas alta ?
</nl>
<nl lang="ja">
dono shuu wa mottomo takai kaibatsu ga arimasu ka ?
</nl>
<nl lang="tr">
hangi eyalet en yuksek yukseltiye sahiptir ?
</nl>
<syn lang="en">
(S کدام ایالت بیشترین ارتفاع را داراست ؟)
</syn>
<syn lang="es">
(S cual estado tiene la elevacion mas alta)
</syn>
<syn lang="ja">
(S dono shuu wa mottomo takai kaibatsu ga arimasu ka)
</syn>
<syn lang="tr">
(S hangi eyalet en yuksek yukseltiye sahiptir)
</syn>
<augsyn lang="en">
(S Which state-[State:1] has-[State:2] the highest-[Place:3] elevation-[Place:4])
</augsyn>
<mrl lang="geo-funql">
answer(state(loc_1(highest(place(all)))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A), loc(B,A), highest(B,(place(B)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ loc_1 ( *n:Place ) }) </node>
<node id="3"> *n:Place -> ({ highest ( *n:Place ) }) </node>
<node id="4"> *n:Place -> ({ place ( all ) }) </node>
</mrl-parse>
</example>

<example id="817">
<nl lang="en">
کدام ایالت بلند ترین قله را در کشور دارد ؟
</nl>
<nl lang="es">
cual estado tiene el pico mas alto en el pais ?
</nl>
<nl lang="ja">
dono shuu wa kuni no mottomo takai choujou ga arimasu ka ?
</nl>
<nl lang="tr">
hangi eyalet ulkedeki en yuksek zirveye sahiptir ?
</nl>
<syn lang="en">
(S کدام ایالت بلند ترین قله را در کشور دارد ؟)
</syn>
<syn lang="es">
(S cual estado tiene el pico mas alto en el pais)
</syn>
<syn lang="ja">
(S dono shuu wa kuni no mottomo takai choujou ga arimasu ka)
</syn>
<syn lang="tr">
(S hangi eyalet ulkedeki en yuksek zirveye sahiptir)
</syn>
<augsyn lang="en">
(S Which state-[State:1] has-[State:2] the highest-[Place:3] peak-[Place:4] in-[Place:3] the country-[Place:3])
</augsyn>
<mrl lang="geo-funql">
answer(state(loc_1(highest(place(all)))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),loc(B,A),highest(B,(mountain(B)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ loc_1 ( *n:Place ) }) </node>
<node id="3"> *n:Place -> ({ highest ( *n:Place ) }) </node>
<node id="4"> *n:Place -> ({ place ( all ) }) </node>
</mrl-parse>
</example>

<example id="818">
<nl lang="en">
بلندترین نقطه در کدام ایالت واقع شده است ؟
</nl>
<nl lang="es">
cual estado tiene el punto mas alto ?
</nl>
<nl lang="ja">
dono shuu wa mottomo takai chiten ga arimasu ka ?
</nl>
<nl lang="tr">
hangi eyalet en yuksek noktaya sahiptir ?
</nl>
<syn lang="en">
(S بلندترین نقطه در کدام ایالت واقع شده است ؟)
</syn>
<syn lang="es">
(S cual estado tiene el punto mas alto)
</syn>
<syn lang="ja">
(S dono shuu wa mottomo takai chiten ga arimasu ka)
</syn>
<syn lang="tr">
(S hangi eyalet en yuksek noktaya sahiptir)
</syn>
<augsyn lang="en">
(S Which state-[State:1] has-[State:2] the highest-[Place:3] point-[Place:4])
</augsyn>
<mrl lang="geo-funql">
answer(state(loc_1(highest(place(all)))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),loc(B,A),highest(B,place(B))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ loc_1 ( *n:Place ) }) </node>
<node id="3"> *n:Place -> ({ highest ( *n:Place ) }) </node>
<node id="4"> *n:Place -> ({ place ( all ) }) </node>
</mrl-parse>
</example>

<example id="819">
<nl lang="en">
بیشترین تمرکز جمعیت در کدام ایالت واقع شده است ؟
</nl>
<nl lang="es">
cual estado tiene la densidad de poblacion mas alta ?
</nl>
<nl lang="ja">
dono shuu wa mottomo ookii jinkou no mitsudo ga arimasu ka ?
</nl>
<nl lang="tr">
hangi eyalet en yuksek nufus yogunluguna sahiptir ?
</nl>
<syn lang="en">
(S بیشترین تمرکز جمعیت در کدام ایالت واقع شده است ؟)
</syn>
<syn lang="es">
(S cual estado tiene la densidad de poblacion mas alta)
</syn>
<syn lang="ja">
(S dono shuu wa mottomo ookii jinkou no mitsudo ga arimasu ka)
</syn>
<syn lang="tr">
(S hangi eyalet en yuksek nufus yogunluguna sahiptir)
</syn>
<augsyn lang="en">
(S Which state-[State:2] has-[State:1] the highest-[State:1] population-[State:1] density-[State:1])
</augsyn>
<mrl lang="geo-funql">
answer(largest_one(density_1(state(all))))
</mrl>
<mrl lang="geo-prolog">
answer(A,largest(B,(state(A),density(A,B))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ largest_one ( density_1 ( *n:State ) ) }) </node>
<node id="2"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="820">
<nl lang="en">
بزرگترین شهر در کدام ایالت واقع شده است ؟
</nl>
<nl lang="es">
cual estado tiene la ciudad mas grande ?
</nl>
<nl lang="ja">
dono shuu wa mottomo ookii toshi ga arimasu ka ?
</nl>
<nl lang="tr">
hangi eyalet en buyuk sehre sahiptir ?
</nl>
<syn lang="en">
(S بزرگترین شهر در کدام ایالت واقع شده است ؟)
</syn>
<syn lang="es">
(S cual estado tiene la ciudad mas grande)
</syn>
<syn lang="ja">
(S dono shuu wa mottomo ookii toshi ga arimasu ka)
</syn>
<syn lang="tr">
(S hangi eyalet en buyuk sehre sahiptir)
</syn>
<augsyn lang="en">
(S Which state-[State:1] has-[State:2] the largest-[City:3] city-[City:4])
</augsyn>
<mrl lang="geo-funql">
answer(state(loc_1(largest(city(all)))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),loc(B,A),largest(B,(city(B)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ loc_1 ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ largest ( *n:City ) }) </node>
<node id="4"> *n:City -> ({ city ( all ) }) </node>
</mrl-parse>
</example>

<example id="821">
<nl lang="en">
کدام ایالت بیشترین چگالی جمعیت را دارد ؟
</nl>
<syn lang="en">
(S کدام ایالت بیشترین چگالی جمعیت را دارد ؟)
</syn>
<augsyn lang="en">
(S Which state-[State:2] has-[State:1] the largest-[State:1] density-[State:1])
</augsyn>
<mrl lang="geo-funql">
answer(largest_one(density_1(state(all))))
</mrl>
<mrl lang="geo-prolog">
answer(A,largest(B,(state(A),density(A,B))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ largest_one ( density_1 ( *n:State ) ) }) </node>
<node id="2"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="822">
<nl lang="en">
کدام ایالت کمترین تمرکز جمعیت را دارد ؟
</nl>
<syn lang="en">
(S کدام ایالت کمترین تمرکز جمعیت را دارد ؟)
</syn>
<augsyn lang="en">
(S Which state-[State:2] has-[State:1] the least-[State:1] population-[State:1] density-[State:1])
</augsyn>
<mrl lang="geo-funql">
answer(smallest_one(density_1(state(all))))
</mrl>
<mrl lang="geo-prolog">
answer(A,smallest(B,(state(A),density(A,B))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ smallest_one ( density_1 ( *n:State ) ) }) </node>
<node id="2"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="823">
<nl lang="en">
کدام ایالت بلند ترین رود را دارد ؟
</nl>
<nl lang="es">
cual estado tiene el rio mas largo ?
</nl>
<nl lang="ja">
dono shuu wa mottomo nagai kawa ga arimasu ka ?
</nl>
<nl lang="tr">
hangi eyalet en uzun nehre sahiptir ?
</nl>
<syn lang="en">
(S کدام ایالت بلند ترین رود را دارد ؟)
</syn>
<syn lang="es">
(S cual estado tiene el rio mas largo)
</syn>
<syn lang="ja">
(S dono shuu wa mottomo nagai kawa ga arimasu ka)
</syn>
<syn lang="tr">
(S hangi eyalet en uzun nehre sahiptir)
</syn>
<augsyn lang="en">
(S Which state-[State:1] has-[State:2] the longest-[River:3] river-[River:4])
</augsyn>
<mrl lang="geo-funql">
answer(state(loc_1(longest(river(all)))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),loc(B,A),longest(B,(river(B)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ loc_1 ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ longest ( *n:River ) }) </node>
<node id="4"> *n:River -> ({ river ( all ) }) </node>
</mrl-parse>
</example>

<example id="824">
<nl lang="en">
کدام ایالت کمترین ارتفاع را دارد ؟
</nl>
<syn lang="en">
(S کدام ایالت کمترین ارتفاع را دارد ؟)
</syn>
<augsyn lang="en">
(S Which state-[State:1] has-[State:2] the lowest-[Place:3] elevation-[Place:4])
</augsyn>
<mrl lang="geo-funql">
answer(state(loc_1(lowest(place(all)))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),loc(B,A),lowest(B,place(B))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ loc_1 ( *n:Place ) }) </node>
<node id="3"> *n:Place -> ({ lowest ( *n:Place ) }) </node>
<node id="4"> *n:Place -> ({ place ( all ) }) </node>
</mrl-parse>
</example>

<example id="825">
<nl lang="en">
کدام ایالت همجوار اوهایو کمترین جمعیت را دارد ؟
</nl>
<syn lang="en">
(S کدام ایالت همجوار اوهایو کمترین جمعیت را دارد ؟)
</syn>
<augsyn lang="en">
(S Which state-[State:1] has-[State:2] the lowest-[Place:3] point-[Place:4] that borders-[State:6] Idaho-[StateName:8])
</augsyn>
<mrl lang="geo-funql">
answer(state(loc_1(lowest(place(loc_2(next_to_2(stateid('idaho'))))))))
</mrl>
<mrl lang="geo-prolog">
answer(D,(state(D),loc(B,D),lowest(B,(place(B), state(A), loc(B,A), next_to(A,C),const(C,stateid(idaho))))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ loc_1 ( *n:Place ) }) </node>
<node id="3"> *n:Place -> ({ lowest ( *n:Place ) }) </node>
<node id="4"> *n:Place -> ({ place ( *n:Place ) }) </node>
<node id="5"> *n:Place -> ({ loc_2 ( *n:State ) }) </node>
<node id="6"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="7"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="8"> *n:StateName -> ({ ' idaho ' }) </node>
</mrl-parse>
</example>

<example id="826">
<nl lang="en">
کدام ایالت دارای کمترین تمرکز جمعیت است ؟
</nl>
<syn lang="en">
(S کدام ایالت دارای کمترین تمرکز جمعیت است ؟)
</syn>
<augsyn lang="en">
(S Which state-[State:2] has-[State:1] the lowest-[State:1] population-[State:1] density-[State:1])
</augsyn>
<mrl lang="geo-funql">
answer(smallest_one(density_1(state(all))))
</mrl>
<mrl lang="geo-prolog">
answer(A,smallest(B,(state(A),density(A,B))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ smallest_one ( density_1 ( *n:State ) ) }) </node>
<node id="2"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="827">
<nl lang="en">
بیشتر شهرهای عمده در کدام ایالت واقع شده اند ؟
</nl>
<syn lang="en">
(S بیشتر شهرهای عمده در کدام ایالت واقع شده اند ؟)
</syn>
<augsyn lang="en">
(S Which state-[State:2] has-[State:3] the most-[State:1] major-[City:4] cities-[City:5])
</augsyn>
<mrl lang="geo-funql">
answer(most(state(loc_1(major(city(all))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,most(A,B,(state(A),loc(B,A),major(B),city(B))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ most ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ loc_1 ( *n:City ) }) </node>
<node id="4"> *n:City -> ({ major ( *n:City ) }) </node>
<node id="5"> *n:City -> ({ city ( all ) }) </node>
</mrl-parse>
</example>

<example id="828">
<nl lang="en">
بیشتر رودهای عمده در کدام ایالت واقع شده اند ؟
</nl>
<syn lang="en">
(S بیشتر رودهای عمده در کدام ایالت واقع شده اند ؟)
</syn>
<augsyn lang="en">
(S Which state-[State:2] has-[State:3] the most-[State:1] major-[River:4] rivers-[River:5])
</augsyn>
<mrl lang="geo-funql">
answer(most(state(loc_1(major(river(all))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,most(A,B,(state(A),loc(B,A),major(B),river(B))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ most ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ loc_1 ( *n:River ) }) </node>
<node id="4"> *n:River -> ({ major ( *n:River ) }) </node>
<node id="5"> *n:River -> ({ river ( all ) }) </node>
</mrl-parse>
</example>

<example id="829">
<nl lang="en">
بیشتر رودهای عمده از کدام ایالت عبور میکنند ؟
</nl>
<syn lang="en">
(S بیشتر رودهای عمده از کدام ایالت عبور میکنند ؟)
</syn>
<augsyn lang="en">
(S Which state-[State:2] has-[State:3] the most-[State:1] major-[River:4] rivers-[River:5] running-[State:3] through-[State:3] it-[State:3])
</augsyn>
<mrl lang="geo-funql">
answer(most(state(traverse_1(major(river(all))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,most(A,B,(state(A),major(B),river(B),traverse(B,A))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ most ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ traverse_1 ( *n:River ) }) </node>
<node id="4"> *n:River -> ({ major ( *n:River ) }) </node>
<node id="5"> *n:River -> ({ river ( all ) }) </node>
</mrl-parse>
</example>

<example id="830">
<nl lang="en">
کدام ایالت بیشترین جمعیت را دارد ؟
</nl>
<syn lang="en">
(S کدام ایالت بیشترین جمعیت را دارد ؟)
</syn>
<augsyn lang="en">
(S Which state-[State:2] has-[State:1] the most-[State:1] people-[State:1])
</augsyn>
<mrl lang="geo-funql">
answer(largest_one(population_1(state(all))))
</mrl>
<mrl lang="geo-prolog">
answer(A,largest(B,(state(A),population(A,B))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ largest_one ( population_1 ( *n:State ) ) }) </node>
<node id="2"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="831">
<nl lang="en">
کدام ایالت بیشترین جمعیت را داراست ؟
</nl>
<syn lang="en">
(S کدام ایالت بیشترین جمعیت را داراست ؟)
</syn>
<augsyn lang="en">
(S Which state-[State:2] has-[State:1] the most-[State:1] population-[State:1])
</augsyn>
<mrl lang="geo-funql">
answer(largest_one(population_1(state(all))))
</mrl>
<mrl lang="geo-prolog">
answer(A,largest(B,(state(A),population(A,B))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ largest_one ( population_1 ( *n:State ) ) }) </node>
<node id="2"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="832">
<nl lang="en">
کدام ایالت بیشترین تعداد رودها را دارد ؟
</nl>
<syn lang="en">
(S کدام ایالت بیشترین تعداد رودها را دارد ؟)
</syn>
<augsyn lang="en">
(S Which state-[State:2] has-[State:3] the most-[State:1] rivers-[River:4])
</augsyn>
<mrl lang="geo-funql">
answer(most(state(loc_1(river(all)))))
</mrl>
<mrl lang="geo-prolog">
answer(A,most(A,B,(state(A),loc(B,A),river(B))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ most ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ loc_1 ( *n:River ) }) </node>
<node id="4"> *n:River -> ({ river ( all ) }) </node>
</mrl-parse>
</example>

<example id="833">
<nl lang="en">
از کدام ایالت رودهای بیشتری میگذرند ؟
</nl>
<syn lang="en">
(S از کدام ایالت رودهای بیشتری میگذرند ؟)
</syn>
<augsyn lang="en">
(S Which state-[State:2] has-[State:3] the most-[State:1] rivers-[River:4] running-[State:3] through-[State:3] it-[State:3])
</augsyn>
<mrl lang="geo-funql">
answer(most(state(traverse_1(river(all)))))
</mrl>
<mrl lang="geo-prolog">
answer(A,most(A,B,(state(A),river(B),traverse(B,A))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ most ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ traverse_1 ( *n:River ) }) </node>
<node id="4"> *n:River -> ({ river ( all ) }) </node>
</mrl-parse>
</example>

<example id="834">
<nl lang="en">
رودخانه رد در کدام ایالت واقع شده است ؟
</nl>
<syn lang="en">
(S رودخانه رد در کدام ایالت واقع شده است ؟)
</syn>
<augsyn lang="en">
(S Which state-[State:1] has-[State:2] the Red-[RiverName:5] river-[River:3])
</augsyn>
<mrl lang="geo-funql">
answer(state(loc_1(river(riverid('red')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),loc(B,A),const(B,riverid(red)),river(B)))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ loc_1 ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="4"> *n:River -> ({ riverid ( *n:RiverName ) }) </node>
<node id="5"> *n:RiverName -> ({ ' red ' }) </node>
</mrl-parse>
</example>

<example id="835">
<nl lang="en">
کدام ایالت همجوار تگزاس کمترین مساحت را دارد ؟
</nl>
<syn lang="en">
(S کدام ایالت همجوار تگزاس کمترین مساحت را دارد ؟)
</syn>
<augsyn lang="en">
(S Which state-[State:2] has-[State:1] the smallest-[State:1] area-[State:1] that borders-[State:3] Texas-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(smallest_one(area_1(state(next_to_2(stateid('texas'))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,smallest(B,(state(A),area(A,B),next_to(A,C),const(C,stateid(texas)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ smallest_one ( area_1 ( *n:State ) ) }) </node>
<node id="2"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' texas ' }) </node>
</mrl-parse>
</example>

<example id="836">
<nl lang="en">
کدام دولت است که کوچکترین متوسط جمعیت شهری ؟
</nl>
<syn lang="en">
(S کدام دولت است که کوچکترین متوسط جمعیت شهری ؟)
</syn>
<augsyn lang="en">
(S Which state-[State:2] has-[State:1] the smallest-[State:1] average-[State:1] urban-[State:1] population-[State:1])
</augsyn>
<mrl lang="geo-funql">
answer(smallest_one(density_1(state(all))))
</mrl>
<mrl lang="geo-prolog">
answer(A,smallest(B,(state(A),density(A,B))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ smallest_one ( density_1 ( *n:State ) ) }) </node>
<node id="2"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="837">
<nl lang="en">
کدام ایالت کمترین جمعیت شهری را دارد ؟
</nl>
<nl lang="es">
cual estado tiene la densidad de poblacion mas pequena ?
</nl>
<nl lang="ja">
mottomo chiisai jinkou no mitsudo ga aru shuu wa nan desu ka ?
</nl>
<nl lang="tr">
hangi eyalet en kucuk nufus yogunluguna sahiptir ?
</nl>
<syn lang="en">
(S کدام ایالت کمترین جمعیت شهری را دارد ؟)
</syn>
<syn lang="es">
(S cual estado tiene la densidad de poblacion mas pequena)
</syn>
<syn lang="ja">
(S mottomo chiisai jinkou no mitsudo ga aru shuu wa nan desu ka)
</syn>
<syn lang="tr">
(S hangi eyalet en kucuk nufus yogunluguna sahiptir)
</syn>
<augsyn lang="en">
(S Which state-[State:2] has-[State:1] the smallest-[State:1] population-[State:1] density-[State:1])
</augsyn>
<mrl lang="geo-funql">
answer(smallest_one(density_1(state(all))))
</mrl>
<mrl lang="geo-prolog">
answer(A,smallest(B,(state(A),density(A,B))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ smallest_one ( density_1 ( *n:State ) ) }) </node>
<node id="2"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="838">
<nl lang="en">
کدام ایالت غیر متمرکز ترین جمعیت شهری را دارد ؟
</nl>
<syn lang="en">
(S کدام ایالت غیر متمرکز ترین جمعیت شهری را دارد ؟)
</syn>
<augsyn lang="en">
(S Which state-[State:2] has-[State:1] the sparsest-[State:1] population-[State:1] density-[State:1])
</augsyn>
<mrl lang="geo-funql">
answer(smallest_one(density_1(state(all))))
</mrl>
<mrl lang="geo-prolog">
answer(A,smallest(B,(state(A),density(A,B))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ smallest_one ( density_1 ( *n:State ) ) }) </node>
<node id="2"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="839">
<nl lang="en">
کالامازو در کدام ایالت واقع شده است ؟
</nl>
<nl lang="es">
en que estado esta kalamazoo ?
</nl>
<nl lang="ja">
dono shuu ni wa karamazuu kawa desu ka ?
</nl>
<nl lang="tr">
kalamazoo hangi eyalettedir ?
</nl>
<syn lang="en">
(S کالامازو در کدام ایالت واقع شده است ؟)
</syn>
<syn lang="es">
(S en que estado esta kalamazoo)
</syn>
<syn lang="ja">
(S dono shuu ni wa karamazuu kawa desu ka)
</syn>
<syn lang="tr">
(S kalamazoo hangi eyalettedir)
</syn>
<augsyn lang="en">
(S Which state-[State:1] is-[State:2] Kalamazoo-[CityName:4] in-[State:2])
</augsyn>
<mrl lang="geo-funql">
answer(state(loc_1(cityid('kalamazoo', _))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),const(B,cityid(kalamazoo,_)),loc(B,A)))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ loc_1 ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ cityid ( *n:CityName , _ ) }) </node>
<node id="4"> *n:CityName -> ({ ' kalamazoo ' }) </node>
</mrl-parse>
</example>

<example id="840">
<nl lang="en">
کوه مونت مک کینلی در کدام ایالت واقع شده است ؟
</nl>
<syn lang="en">
(S کوه مونت مک کینلی در کدام ایالت واقع شده است ؟)
</syn>
<augsyn lang="en">
(S Which state-[State:1] is-[State:2] Mount-[PlaceName:4] McKinley-[PlaceName:4] in-[State:2])
</augsyn>
<mrl lang="geo-funql">
answer(state(loc_1(placeid('mount mckinley'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),const(B,placeid('mount mckinley')),loc(B,A)))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ loc_1 ( *n:Place ) }) </node>
<node id="3"> *n:Place -> ({ placeid ( *n:PlaceName ) }) </node>
<node id="4"> *n:PlaceName -> ({ ' mount mckinley ' }) </node>
</mrl-parse>
</example>

<example id="841">
<nl lang="en">
شهر دنور در کدام ایالت واقع شده است ؟
</nl>
<nl lang="es">
en cual estado se encuentra la ciudad denver ?
</nl>
<nl lang="ja">
dono shuu ni wa denbaru toshi ga arimasu ka ?
</nl>
<nl lang="tr">
denver sehri hangi eyalettedir ?
</nl>
<syn lang="en">
(S شهر دنور در کدام ایالت واقع شده است ؟)
</syn>
<syn lang="es">
(S en cual estado se encuentra la ciudad denver)
</syn>
<syn lang="ja">
(S dono shuu ni wa denbaru toshi ga arimasu ka)
</syn>
<syn lang="tr">
(S denver sehri hangi eyalettedir)
</syn>
<augsyn lang="en">
(S Which state-[State:1] is-[State:2] the city-[City:3] Denver-[CityName:5] located-[State:2] in-[State:2])
</augsyn>
<mrl lang="geo-funql">
answer(state(loc_1(city(cityid('denver', _)))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),city(B),const(B,cityid(denver,_)),loc(B,A)))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ loc_1 ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="4"> *n:City -> ({ cityid ( *n:CityName , _ ) }) </node>
<node id="5"> *n:CityName -> ({ ' denver ' }) </node>
</mrl-parse>
</example>

<example id="842">
<nl lang="en">
بزرگترین شهر مونتانا در کدام ایالت واقع شده است ؟
</nl>
<syn lang="en">
(S بزرگترین شهر مونتانا در کدام ایالت واقع شده است ؟)
</syn>
<augsyn lang="en">
(S Which state-[State:1] is-[State:2] the largest-[City:3] city-[City:4] in-[City:5] Montana-[StateName:7] in-[State:2])
</augsyn>
<mrl lang="geo-funql">
answer(state(loc_1(largest(city(loc_2(stateid('montana')))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),largest(B,(city(B),loc(B,C),const(C,stateid(montana)))),loc(B,A)))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ loc_1 ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ largest ( *n:City ) }) </node>
<node id="4"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="5"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="6"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="7"> *n:StateName -> ({ ' montana ' }) </node>
</mrl-parse>
</example>

<example id="843">
<nl lang="en">
کوچکترین ایالت کدام است ؟
</nl>
<nl lang="es">
cual estado es el mas pequeno ?
</nl>
<nl lang="ja">
mottomo chiisai shuu wa nan desu ka ?
</nl>
<nl lang="tr">
hangi eyalet en kucuktur ?
</nl>
<syn lang="en">
(S کوچکترین ایالت کدام است ؟)
</syn>
<syn lang="es">
(S cual estado es el mas pequeno)
</syn>
<syn lang="ja">
(S mottomo chiisai shuu wa nan desu ka)
</syn>
<syn lang="tr">
(S hangi eyalet en kucuktur)
</syn>
<augsyn lang="en">
(S Which state-[State:2] is-[State:1] the smallest-[State:1])
</augsyn>
<mrl lang="geo-funql">
answer(smallest(state(all)))
</mrl>
<mrl lang="geo-prolog">
answer(A,smallest(A,state(A)))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ smallest ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="844">
<nl lang="en">
کدام ایالت ها همجوار آلاباما هستند ؟
</nl>
<syn lang="en">
(S کدام ایالت ها همجوار آلاباما هستند ؟)
</syn>
<augsyn lang="en">
(S Which states-[State:1] adjoin-[State:2] Alabama-[StateName:4])
</augsyn>
<mrl lang="geo-funql">
answer(state(next_to_2(stateid('alabama'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),next_to(A,B),const(B,stateid(alabama))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="4"> *n:StateName -> ({ ' alabama ' }) </node>
</mrl-parse>
</example>

<example id="845">
<nl lang="en">
کدام ایالت ها هم مرز آلاباما هستند ؟
</nl>
<syn lang="en">
(S کدام ایالت ها هم مرز آلاباما هستند ؟)
</syn>
<augsyn lang="en">
(S Which states-[State:1] border-[State:2] Alabama-[StateName:4])
</augsyn>
<mrl lang="geo-funql">
answer(state(next_to_2(stateid('alabama'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),next_to(A,B),const(B,stateid(alabama))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="4"> *n:StateName -> ({ ' alabama ' }) </node>
</mrl-parse>
</example>

<example id="846">
<nl lang="en">
کدام ایالت ها هم مرز آلاسکا هستند ؟
</nl>
<syn lang="en">
(S کدام ایالت ها هم مرز آلاسکا هستند ؟)
</syn>
<augsyn lang="en">
(S Which states-[State:1] border-[State:2] Alaska-[StateName:4])
</augsyn>
<mrl lang="geo-funql">
answer(state(next_to_2(stateid('alaska'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),next_to(A,B),const(B,stateid(alaska))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="4"> *n:StateName -> ({ ' alaska ' }) </node>
</mrl-parse>
</example>

<example id="847">
<nl lang="en">
کدام ایالت ها هم مرز آریزونا هستند ؟
</nl>
<nl lang="es">
cuales estados bordean a arizona ?
</nl>
<nl lang="ja">
arizona ni rinsetsu suru shuu wa nan desu ka ?
</nl>
<nl lang="tr">
arizona a siniri olan eyaletler nelerdir ?
</nl>
<syn lang="en">
(S کدام ایالت ها هم مرز آریزونا هستند ؟)
</syn>
<syn lang="es">
(S cuales estados bordean a arizona)
</syn>
<syn lang="ja">
(S arizona ni rinsetsu suru shuu wa nan desu ka)
</syn>
<syn lang="tr">
(S arizona a siniri olan eyaletler nelerdir)
</syn>
<augsyn lang="en">
(S Which states-[State:1] border-[State:2] Arizona-[StateName:4])
</augsyn>
<mrl lang="geo-funql">
answer(state(next_to_2(stateid('arizona'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),next_to(A,B),const(B,stateid(arizona))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="4"> *n:StateName -> ({ ' arizona ' }) </node>
</mrl-parse>
</example>

<example id="848">
<nl lang="en">
کدام ایالت ها هم مرز کلرادو هستند ؟
</nl>
<nl lang="es">
cuales estados bordean a colorado ?
</nl>
<nl lang="ja">
kororado ni rinsetsu suru shuu wa nan desu ka ?
</nl>
<nl lang="tr">
colorado a siniri olan eyaletler nelerdir ?
</nl>
<syn lang="en">
(S کدام ایالت ها هم مرز کلرادو هستند ؟)
</syn>
<syn lang="es">
(S cuales estados bordean a colorado)
</syn>
<syn lang="ja">
(S kororado ni rinsetsu suru shuu wa nan desu ka)
</syn>
<syn lang="tr">
(S colorado a siniri olan eyaletler nelerdir)
</syn>
<augsyn lang="en">
(S Which states-[State:1] border-[State:2] Colorado-[StateName:4])
</augsyn>
<mrl lang="geo-funql">
answer(state(next_to_2(stateid('colorado'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),next_to(A,B),const(B,stateid(colorado))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="4"> *n:StateName -> ({ ' colorado ' }) </node>
</mrl-parse>
</example>

<example id="849">
<nl lang="en">
کدام ایالت ها هم مرز هاوایی هستند ؟
</nl>
<syn lang="en">
(S کدام ایالت ها هم مرز هاوایی هستند ؟)
</syn>
<augsyn lang="en">
(S Which states-[State:1] border-[State:2] Hawaii-[StateName:4])
</augsyn>
<mrl lang="geo-funql">
answer(state(next_to_2(stateid('hawaii'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),next_to(A,B),const(B,stateid(hawaii))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="4"> *n:StateName -> ({ ' hawaii ' }) </node>
</mrl-parse>
</example>

<example id="850">
<nl lang="en">
کدام ایالت ها همجوار ایلینوی هستند ؟
</nl>
<syn lang="en">
(S کدام ایالت ها همجوار ایلینوی هستند ؟)
</syn>
<augsyn lang="en">
(S Which states-[State:1] border-[State:2] Illinois-[StateName:4])
</augsyn>
<mrl lang="geo-funql">
answer(state(next_to_2(stateid('illinois'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),next_to(A,B),const(B,stateid(illinois))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="4"> *n:StateName -> ({ ' illinois ' }) </node>
</mrl-parse>
</example>

<example id="851">
<nl lang="en">
کدام ایالت ها همجوار آیووا هستند ؟
</nl>
<syn lang="en">
(S کدام ایالت ها همجوار آیووا هستند ؟)
</syn>
<augsyn lang="en">
(S Which states-[State:1] border-[State:2] Iowa-[StateName:4])
</augsyn>
<mrl lang="geo-funql">
answer(state(next_to_2(stateid('iowa'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),next_to(A,B),const(B,stateid(iowa))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="4"> *n:StateName -> ({ ' iowa ' }) </node>
</mrl-parse>
</example>

<example id="852">
<nl lang="en">
کدام ایالت ها هم مرز کنتاکی هستند ؟
</nl>
<nl lang="es">
cuales estados bordean a kentucky ?
</nl>
<nl lang="ja">
kentakkii ni rinsetsu suru shuu wa nan desu ka ?
</nl>
<nl lang="tr">
kentucky a siniri olan eyaletler nelerdir ?
</nl>
<syn lang="en">
(S کدام ایالت ها هم مرز کنتاکی هستند ؟)
</syn>
<syn lang="es">
(S cuales estados bordean a kentucky)
</syn>
<syn lang="ja">
(S kentakkii ni rinsetsu suru shuu wa nan desu ka)
</syn>
<syn lang="tr">
(S kentucky a siniri olan eyaletler nelerdir)
</syn>
<augsyn lang="en">
(S Which states-[State:1] border-[State:2] Kentucky-[StateName:4])
</augsyn>
<mrl lang="geo-funql">
answer(state(next_to_2(stateid('kentucky'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),next_to(A,B),const(B,stateid(kentucky))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="4"> *n:StateName -> ({ ' kentucky ' }) </node>
</mrl-parse>
</example>

<example id="853">
<nl lang="en">
کدام ایالت ها هم مرز میشیگان هستند ؟
</nl>
<syn lang="en">
(S کدام ایالت ها هم مرز میشیگان هستند ؟)
</syn>
<augsyn lang="en">
(S Which states-[State:1] border-[State:2] Michigan-[StateName:4])
</augsyn>
<mrl lang="geo-funql">
answer(state(next_to_2(stateid('michigan'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),next_to(A,B),const(B,stateid(michigan))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="4"> *n:StateName -> ({ ' michigan ' }) </node>
</mrl-parse>
</example>

<example id="854">
<nl lang="en">
کدام ایالت ها هم مرز نیویورک هستند ؟
</nl>
<nl lang="es">
cuales estados bordean a new york ?
</nl>
<nl lang="ja">
nyuu yooku ni rinsetsu suru shuu wa nan desu ka ?
</nl>
<nl lang="tr">
new york a siniri olan eyaletler nelerdir ?
</nl>
<syn lang="en">
(S کدام ایالت ها هم مرز نیویورک هستند ؟)
</syn>
<syn lang="es">
(S cuales estados bordean a new_york)
</syn>
<syn lang="ja">
(S nyuu_yooku ni rinsetsu suru shuu wa nan desu ka)
</syn>
<syn lang="tr">
(S new_york a siniri olan eyaletler nelerdir)
</syn>
<augsyn lang="en">
(S Which states-[State:1] border-[State:2] New-[StateName:4] York-[StateName:4])
</augsyn>
<mrl lang="geo-funql">
answer(state(next_to_2(stateid('new york'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),next_to(A,B),const(B,stateid('new york'))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="4"> *n:StateName -> ({ ' new york ' }) </node>
</mrl-parse>
</example>

<example id="855">
<nl lang="en">
کدام ایالت ها با هیچ ایالتی هم مرز نیستند ؟
</nl>
<syn lang="en">
(S کدام ایالت ها با هیچ ایالتی هم مرز نیستند ؟)
</syn>
<augsyn lang="en">
(S Which states-[State:2] border-[State:3] no-[State:1] other-[State:1] states-[State:4])
</augsyn>
<mrl lang="geo-funql">
answer(exclude(state(all), next_to_2(state(all))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),not((next_to(A,B),state(B)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ exclude ( *n:State , *n:State ) }) </node>
<node id="2"> *n:State -> ({ state ( all ) }) </node>
<node id="3"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="856">
<nl lang="en">
کدام ایالت ها هم مرز سوت داکوتا هستند ؟
</nl>
<nl lang="es">
cuales estados bordean a south dakota ?
</nl>
<nl lang="ja">
sausu dakota ni rinsetsu suru shuu wa nan desu ka ?
</nl>
<nl lang="tr">
south dakota a siniri olan eyaletler nelerdir ?
</nl>
<syn lang="en">
(S کدام ایالت ها هم مرز سوت داکوتا هستند ؟)
</syn>
<syn lang="es">
(S cuales estados bordean a south_dakota)
</syn>
<syn lang="ja">
(S sausu_dakota ni rinsetsu suru shuu wa nan desu ka)
</syn>
<syn lang="tr">
(S south_dakota a siniri olan eyaletler nelerdir)
</syn>
<augsyn lang="en">
(S Which states-[State:1] border-[State:2] South-[StateName:4] Dakota-[StateName:4])
</augsyn>
<mrl lang="geo-funql">
answer(state(next_to_2(stateid('south dakota'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),next_to(A,B),const(B,stateid('south dakota'))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="4"> *n:StateName -> ({ ' south dakota ' }) </node>
</mrl-parse>
</example>

<example id="857">
<nl lang="en">
کدام ایالت ها هم مرز ایالت هایی هستند که میسیسیپی از آنها عبور میکند ؟
</nl>
<syn lang="en">
(S کدام ایالت ها هم مرز ایالت هایی هستند که میسیسیپی از آنها عبور میکند ؟)
</syn>
<augsyn lang="en">
(S Which states-[State:1] border-[State:2] states-[State:3] through-[State:4] which the Mississippi-[RiverName:6] traverses-[State:4])
</augsyn>
<mrl lang="geo-funql">
answer(state(next_to_2(state(traverse_1(riverid('mississippi'))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),next_to(A,B),state(B),const(C,riverid(mississippi)),traverse(C,B)))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ traverse_1 ( *n:River ) }) </node>
<node id="5"> *n:River -> ({ riverid ( *n:RiverName ) }) </node>
<node id="6"> *n:RiverName -> ({ ' mississippi ' }) </node>
</mrl-parse>
</example>

<example id="858">
<nl lang="en">
کدام ایالت ها همجوار تگزاس هستند ؟
</nl>
<nl lang="es">
cuales estados bordean a texas ?
</nl>
<nl lang="ja">
tekisasu ni rinsetsu suru shuu wa nan desu ka ?
</nl>
<nl lang="tr">
hangi eyaletin texas ye siniri vardir ?
</nl>
<syn lang="en">
(S کدام ایالت ها همجوار تگزاس هستند ؟)
</syn>
<syn lang="es">
(S cuales estados bordean a texas)
</syn>
<syn lang="ja">
(S tekisasu ni rinsetsu suru shuu wa nan desu ka)
</syn>
<syn lang="tr">
(S hangi eyaletin texas ye siniri vardir)
</syn>
<augsyn lang="en">
(S Which states-[State:1] border-[State:2] Texas-[StateName:4])
</augsyn>
<mrl lang="geo-funql">
answer(state(next_to_2(stateid('texas'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),next_to(A,B),const(B,stateid(texas))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="4"> *n:StateName -> ({ ' texas ' }) </node>
</mrl-parse>
</example>

<example id="859">
<nl lang="en">
کدام ایالت ها همجوار بلندترین رود ایالات متحده آمریکا هستند ؟
</nl>
<syn lang="en">
(S کدام ایالت ها همجوار بلندترین رود ایالات متحده آمریکا هستند ؟)
</syn>
<augsyn lang="en">
(S Which states-[State:1] border-[State:2] the longest-[River:3] river-[River:4] in-[River:5] the USA-[CountryName:7])
</augsyn>
<mrl lang="geo-funql">
answer(state(next_to_2(longest(river(loc_2(countryid('usa')))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),next_to(A,B),longest(B,(river(B),loc(B,C),const(C,countryid(usa))))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ next_to_2 ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ longest ( *n:River ) }) </node>
<node id="4"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="5"> *n:River -> ({ loc_2 ( *n:Country ) }) </node>
<node id="6"> *n:Country -> ({ countryid ( *n:CountryName ) }) </node>
<node id="7"> *n:CountryName -> ({ ' usa ' }) </node>
</mrl-parse>
</example>

<example id="860">
<nl lang="en">
کدام ایالت ها هم مرز رودخانه میسوری هستند ؟
</nl>
<syn lang="en">
(S کدام ایالت ها هم مرز رودخانه میسوری هستند ؟)
</syn>
<augsyn lang="en">
(S Which states-[State:1] border-[State:2] the Missouri-[RiverName:5] river-[River:3])
</augsyn>
<mrl lang="geo-funql">
answer(state(next_to_2(river(riverid('missouri')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),next_to(A,B),const(B,riverid(missouri)),river(B)))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ next_to_2 ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="4"> *n:River -> ({ riverid ( *n:RiverName ) }) </node>
<node id="5"> *n:RiverName -> ({ ' missouri ' }) </node>
</mrl-parse>
</example>

<example id="861">
<nl lang="en">
کدام ایالت ها هم مرز کوچکترین ایالت هستند ؟
</nl>
<syn lang="en">
(S کدام ایالت ها هم مرز کوچکترین ایالت هستند ؟)
</syn>
<augsyn lang="en">
(S Which states-[State:1] border-[State:2] the state-[State:4] with-[State:3] the smallest-[State:3] area-[State:3])
</augsyn>
<mrl lang="geo-funql">
answer(state(next_to_2(smallest_one(area_1(state(all))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),next_to(A,B),smallest(C,(state(B),area(B,C)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ smallest_one ( area_1 ( *n:State ) ) }) </node>
<node id="4"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="862">
<nl lang="en">
مرکز کدام ایالت بزرگتر است ؟
</nl>
<nl lang="es">
cual estado tiene la ciudad capital mas grande ?
</nl>
<nl lang="ja">
dono shuu no shuto wa mottomo ookii desu ka ?
</nl>
<nl lang="tr">
hangi eyaletin baskenti en buyuktur ?
</nl>
<syn lang="en">
(S مرکز کدام ایالت بزرگتر است ؟)
</syn>
<syn lang="es">
(S cual estado tiene la ciudad capital mas grande)
</syn>
<syn lang="ja">
(S dono shuu no shuto wa mottomo ookii desu ka)
</syn>
<syn lang="tr">
(S hangi eyaletin baskenti en buyuktur)
</syn>
<augsyn lang="en">
(S Which state-[State:1] 's-[State:2] capital-[City:5] city-[City:4] is-[City:3] the largest-[City:3])
</augsyn>
<mrl lang="geo-funql">
answer(state(loc_1(largest(city(capital_1(state(all)))))))
</mrl>
<mrl lang="geo-prolog">
answer(C,(state(C),loc(B,C), largest(B,(capital(A,B),city(B),state(A)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ loc_1 ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ largest ( *n:City ) }) </node>
<node id="4"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="5"> *n:City -> ({ capital_1 ( *n:State ) }) </node>
<node id="6"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="863">
<nl lang="en">
رود کلرادو از میان کدام ایالت ها عبور میکند ؟
</nl>
<syn lang="en">
(S رود کلرادو از میان کدام ایالت ها عبور میکند ؟)
</syn>
<augsyn lang="en">
(S Which states-[State:1] do-[State:2] Colorado-[RiverName:5] river-[River:3] flow-[State:2] through-[State:2])
</augsyn>
<mrl lang="geo-funql">
answer(state(traverse_1(river(riverid('colorado')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),const(B,riverid(colorado)),river(B),traverse(B,A)))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ traverse_1 ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="4"> *n:River -> ({ riverid ( *n:RiverName ) }) </node>
<node id="5"> *n:RiverName -> ({ ' colorado ' }) </node>
</mrl-parse>
</example>

<example id="864">
<nl lang="en">
کدام ایالت ها هم مرز تگزاس نیستند ؟
</nl>
<syn lang="en">
(S کدام ایالت ها هم مرز تگزاس نیستند ؟)
</syn>
<augsyn lang="en">
(S Which states-[State:2] does-[State:1] not-[State:1] border-[State:3] Texas-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(exclude(state(all), next_to_2(stateid('texas'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),not((next_to(A,B),const(B,stateid(texas))))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ exclude ( *n:State , *n:State ) }) </node>
<node id="2"> *n:State -> ({ state ( all ) }) </node>
<node id="3"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' texas ' }) </node>
</mrl-parse>
</example>

<example id="865">
<nl lang="en">
رودخخانه چاتاهوچی از کدام ایالت ها میگذرد ؟
</nl>
<syn lang="en">
(S رودخخانه چاتاهوچی از کدام ایالت ها میگذرد ؟)
</syn>
<augsyn lang="en">
(S Which states-[State:1] does-[State:2] the Chattahoochee-[RiverName:5] river-[River:3] run-[State:2] through-[State:2])
</augsyn>
<mrl lang="geo-funql">
answer(state(traverse_1(river(riverid('chattahoochee')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),const(B,riverid(chattahoochee)),river(B),traverse(B,A)))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ traverse_1 ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="4"> *n:River -> ({ riverid ( *n:RiverName ) }) </node>
<node id="5"> *n:RiverName -> ({ ' chattahoochee ' }) </node>
</mrl-parse>
</example>

<example id="866">
<nl lang="en">
رود کلرادو از کدام ایالت ها میگذرد ؟
</nl>
<syn lang="en">
(S رود کلرادو از کدام ایالت ها میگذرد ؟)
</syn>
<augsyn lang="en">
(S Which states-[State:1] does-[State:2] the Colorado-[RiverName:5] river-[River:3] run-[State:2] through-[State:2])
</augsyn>
<mrl lang="geo-funql">
answer(state(traverse_1(river(riverid('colorado')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),const(B,riverid(colorado)),traverse(B,A)))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ traverse_1 ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="4"> *n:River -> ({ riverid ( *n:RiverName ) }) </node>
<node id="5"> *n:RiverName -> ({ ' colorado ' }) </node>
</mrl-parse>
</example>

<example id="867">
<nl lang="en">
بلندترین رود از کدام ایالت ها میگذرد ؟
</nl>
<syn lang="en">
(S بلندترین رود از کدام ایالت ها میگذرد ؟)
</syn>
<augsyn lang="en">
(S Which states-[State:1] does-[State:2] the longest-[River:3] river-[River:4] cross-[State:2])
</augsyn>
<mrl lang="geo-funql">
answer(state(traverse_1(longest(river(all)))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),longest(B,river(B)),traverse(B,A)))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ traverse_1 ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ longest ( *n:River ) }) </node>
<node id="4"> *n:River -> ({ river ( all ) }) </node>
</mrl-parse>
</example>

<example id="868">
<nl lang="en">
بلندترین رود از کدام ایالت ها عبور میکند ؟
</nl>
<syn lang="en">
(S بلندترین رود از کدام ایالت ها عبور میکند ؟)
</syn>
<augsyn lang="en">
(S Which states-[State:1] does-[State:2] the longest-[River:3] river-[River:4] run-[State:2] through-[State:2])
</augsyn>
<mrl lang="geo-funql">
answer(state(traverse_1(longest(river(all)))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),longest(B,river(B)),traverse(B,A)))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ traverse_1 ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ longest ( *n:River ) }) </node>
<node id="4"> *n:River -> ({ river ( all ) }) </node>
</mrl-parse>
</example>

<example id="869">
<nl lang="en">
رود میسیسیپی از کدام ایالت ها عبور میکند ؟
</nl>
<nl lang="es">
por cuales estados corre el rio mississippi ?
</nl>
<nl lang="ja">
mishishippi kawa wa donna shuu wo nagarete imasu ka ?
</nl>
<nl lang="tr">
mississippi nehri hangi eyaletlerden gecmektedir ?
</nl>
<syn lang="en">
(S رود میسیسیپی از کدام ایالت ها عبور میکند ؟)
</syn>
<syn lang="es">
(S por cuales estados corre el rio mississippi)
</syn>
<syn lang="ja">
(S mishishippi kawa wa donna shuu wo nagarete imasu ka)
</syn>
<syn lang="tr">
(S mississippi nehri hangi eyaletlerden gecmektedir)
</syn>
<augsyn lang="en">
(S Which states-[State:1] does-[State:2] the Mississippi-[RiverName:5] river-[River:3] run-[State:2] through-[State:2])
</augsyn>
<mrl lang="geo-funql">
answer(state(traverse_1(river(riverid('mississippi')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),const(B,riverid(mississippi)),river(B),traverse(B,A)))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ traverse_1 ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="4"> *n:River -> ({ riverid ( *n:RiverName ) }) </node>
<node id="5"> *n:RiverName -> ({ ' mississippi ' }) </node>
</mrl-parse>
</example>

<example id="870">
<nl lang="en">
رود میسیسیپی از کدام ایالت ها عبور میکند ؟
</nl>
<nl lang="es">
por cuales estados corre el mississippi ?
</nl>
<nl lang="ja">
mishishippi kawa wa dono shuu wo nagarete imasu ka ?
</nl>
<nl lang="tr">
mississippi hangi eyaletlerden gecer ?
</nl>
<syn lang="en">
(S رود میسیسیپی از کدام ایالت ها عبور میکند ؟)
</syn>
<syn lang="es">
(S por cuales estados corre el mississippi)
</syn>
<syn lang="ja">
(S mishishippi kawa wa dono shuu wo nagarete imasu ka)
</syn>
<syn lang="tr">
(S mississippi hangi eyaletlerden gecer)
</syn>
<augsyn lang="en">
(S Which states-[State:1] does-[State:2] the Mississippi-[RiverName:4] run-[State:2] through-[State:2])
</augsyn>
<mrl lang="geo-funql">
answer(state(traverse_1(riverid('mississippi'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),const(B,riverid(mississippi)),traverse(B,A)))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ traverse_1 ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ riverid ( *n:RiverName ) }) </node>
<node id="4"> *n:RiverName -> ({ ' mississippi ' }) </node>
</mrl-parse>
</example>

<example id="871">
<nl lang="en">
رود میسوری از کدام ایالت ها عبور میکند ؟
</nl>
<syn lang="en">
(S رود میسوری از کدام ایالت ها عبور میکند ؟)
</syn>
<augsyn lang="en">
(S Which states-[State:1] does-[State:2] the Missouri-[RiverName:5] river-[River:3] pass-[State:2] through-[State:2])
</augsyn>
<mrl lang="geo-funql">
answer(state(traverse_1(river(riverid('missouri')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),const(B,riverid(missouri)),traverse(B,A)))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ traverse_1 ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="4"> *n:River -> ({ riverid ( *n:RiverName ) }) </node>
<node id="5"> *n:RiverName -> ({ ' missouri ' }) </node>
</mrl-parse>
</example>

<example id="872">
<nl lang="en">
رود میسوری از کدام ایالت ها عبور میکند ؟
</nl>
<nl lang="es">
por cuales estados corre el rio missouri ?
</nl>
<nl lang="ja">
mizuuri kawa wa donna shuu wo nagarete imasu ka ?
</nl>
<nl lang="tr">
missouri nehri hangi eyaletlerden gecer ?
</nl>
<syn lang="en">
(S رود میسوری از کدام ایالت ها عبور میکند ؟)
</syn>
<syn lang="es">
(S por cuales estados corre el rio missouri)
</syn>
<syn lang="ja">
(S mizuuri kawa wa donna shuu wo nagarete imasu ka)
</syn>
<syn lang="tr">
(S missouri nehri hangi eyaletlerden gecer)
</syn>
<augsyn lang="en">
(S Which states-[State:1] does-[State:2] the Missouri-[RiverName:5] river-[River:3] run-[State:2] through-[State:2])
</augsyn>
<mrl lang="geo-funql">
answer(state(traverse_1(river(riverid('missouri')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),const(B,riverid(missouri)),river(B),traverse(B,A)))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ traverse_1 ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="4"> *n:River -> ({ riverid ( *n:RiverName ) }) </node>
<node id="5"> *n:RiverName -> ({ ' missouri ' }) </node>
</mrl-parse>
</example>

<example id="873">
<nl lang="en">
کدام ایالت ها شهر عمده ای به نام آستین دارند ؟
</nl>
<syn lang="en">
(S کدام ایالت ها شهر عمده ای به نام آستین دارند ؟)
</syn>
<augsyn lang="en">
(S Which states-[State:1] have-[State:2] a-[City:3] major-[City:3] city-[City:4] named-[City:4] Austin-[CityName:6])
</augsyn>
<mrl lang="geo-funql">
answer(state(loc_1(major(city(cityid('austin', _))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),loc(B,A),major(B),city(B),const(B,cityid(austin,_))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ loc_1 ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ major ( *n:City ) }) </node>
<node id="4"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="5"> *n:City -> ({ cityid ( *n:CityName , _ ) }) </node>
<node id="6"> *n:CityName -> ({ ' austin ' }) </node>
</mrl-parse>
</example>

<example id="874">
<nl lang="en">
کدام ایالت ها رودخانه دارند ؟
</nl>
<syn lang="en">
(S کدام ایالت ها رودخانه دارند ؟)
</syn>
<augsyn lang="en">
(S Which states-[State:1] have-[State:2] a-[River:3] river-[River:3])
</augsyn>
<mrl lang="geo-funql">
answer(state(loc_1(river(all))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),loc(B,A),river(B)))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ loc_1 ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ river ( all ) }) </node>
</mrl-parse>
</example>

<example id="875">
<nl lang="en">
کدام ایالت ها شهری به نام آستین دارند ؟
</nl>
<nl lang="es">
cuales estados tienen ciudades con el nombre austin ?
</nl>
<nl lang="ja">
ausuchin to iu toshi ga aru shuu dono desu ka ?
</nl>
<nl lang="tr">
hangi eyaletlerde austin sehri vardir ?
</nl>
<syn lang="en">
(S کدام ایالت ها شهری به نام آستین دارند ؟)
</syn>
<syn lang="es">
(S cuales estados tienen ciudades con el nombre austin)
</syn>
<syn lang="ja">
(S ausuchin to iu toshi ga aru shuu dono desu ka)
</syn>
<syn lang="tr">
(S hangi eyaletlerde austin sehri vardir)
</syn>
<augsyn lang="en">
(S Which states-[State:1] have-[State:2] cities-[City:3] named-[City:3] Austin-[CityName:5])
</augsyn>
<mrl lang="geo-funql">
answer(state(loc_1(city(cityid('austin', _)))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),loc(B,A),city(B),const(B,cityid(austin,_))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ loc_1 ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="4"> *n:City -> ({ cityid ( *n:CityName , _ ) }) </node>
<node id="5"> *n:CityName -> ({ ' austin ' }) </node>
</mrl-parse>
</example>

<example id="876">
<nl lang="en">
کدان ایالت ها نقطه ای بلند تر از بلندترین نقطه کلرادو دارند ؟
</nl>
<nl lang="es">
cuales estados tienen puntos mas alto que el punto mas alto en colorado ?
</nl>
<nl lang="ja">
kororado no mottomo takai chiten yori motto takai chiten ga aru shuu wa nan desu ka ?
</nl>
<nl lang="tr">
hangi eyaletler colorado nun en yuksek noktasindan daha yuksek noktaya sahiptirler ?
</nl>
<syn lang="en">
(S کدان ایالت ها نقطه ای بلند تر از بلندترین نقطه کلرادو دارند ؟)
</syn>
<syn lang="es">
(S cuales estados tienen puntos mas alto que el punto mas alto en colorado)
</syn>
<syn lang="ja">
(S kororado no mottomo takai chiten yori motto takai chiten ga aru shuu wa nan desu ka)
</syn>
<syn lang="tr">
(S hangi eyaletler colorado nun en yuksek noktasindan daha yuksek noktaya sahiptirler)
</syn>
<augsyn lang="en">
(S Which states-[State:1] have-[State:2] points-[Place:3] higher-[Place:4] than-[Place:4] the highest-[Place:5] point-[Place:6] in-[Place:7] Colorado-[StateName:9])
</augsyn>
<mrl lang="geo-funql">
answer(state(loc_1(place(higher_2(highest(place(loc_2(stateid('colorado')))))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),loc(B,A),place(B),higher(B,C),highest(C,(place(C),loc(C,D),const(D,stateid(colorado))))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ loc_1 ( *n:Place ) }) </node>
<node id="3"> *n:Place -> ({ place ( *n:Place ) }) </node>
<node id="4"> *n:Place -> ({ higher_2 ( *n:Place ) }) </node>
<node id="5"> *n:Place -> ({ highest ( *n:Place ) }) </node>
<node id="6"> *n:Place -> ({ place ( *n:Place ) }) </node>
<node id="7"> *n:Place -> ({ loc_2 ( *n:State ) }) </node>
<node id="8"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="9"> *n:StateName -> ({ ' colorado ' }) </node>
</mrl-parse>
</example>

<example id="877">
<nl lang="en">
کدام ایالت ها نقطه ای بلند تر از بلندترین نقطه تگزاس دارند ؟
</nl>
<syn lang="en">
(S کدام ایالت ها نقطه ای بلند تر از بلندترین نقطه تگزاس دارند ؟)
</syn>
<augsyn lang="en">
(S Which states-[State:1] have-[State:2] points-[Place:3] that are-[Place:4] higher-[Place:4] than-[Place:4] the highest-[Place:5] point-[Place:6] in-[Place:7] Texas-[StateName:9])
</augsyn>
<mrl lang="geo-funql">
answer(state(loc_1(place(higher_2(highest(place(loc_2(stateid('texas')))))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),loc(B,A),higher(B,C),highest(C,(place(C),loc(C,D),const(D,stateid(texas))))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ loc_1 ( *n:Place ) }) </node>
<node id="3"> *n:Place -> ({ place ( *n:Place ) }) </node>
<node id="4"> *n:Place -> ({ higher_2 ( *n:Place ) }) </node>
<node id="5"> *n:Place -> ({ highest ( *n:Place ) }) </node>
<node id="6"> *n:Place -> ({ place ( *n:Place ) }) </node>
<node id="7"> *n:Place -> ({ loc_2 ( *n:State ) }) </node>
<node id="8"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="9"> *n:StateName -> ({ ' texas ' }) </node>
</mrl-parse>
</example>

<example id="878">
<nl lang="en">
کدام ایالت ها بر بزرگترین رودخانه ایالات متحده واقع شده اند ؟
</nl>
<syn lang="en">
(S کدام ایالت ها بر بزرگترین رودخانه ایالات متحده واقع شده اند ؟)
</syn>
<augsyn lang="en">
(S Which states-[State:1] lie-[State:2] on-[State:2] the largest-[River:3] river-[River:4] in-[River:5] the United-[CountryName:7] States-[CountryName:7])
</augsyn>
<mrl lang="geo-funql">
answer(state(traverse_1(longest(river(loc_2(countryid('usa')))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),traverse(B,A),longest(B,(river(B),loc(B,C),const(C,countryid(usa))))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ traverse_1 ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ longest ( *n:River ) }) </node>
<node id="4"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="5"> *n:River -> ({ loc_2 ( *n:Country ) }) </node>
<node id="6"> *n:Country -> ({ countryid ( *n:CountryName ) }) </node>
<node id="7"> *n:CountryName -> ({ ' usa ' }) </node>
</mrl-parse>
</example>

<example id="879">
<nl lang="en">
کدام شهر ایالات متحده بیشترین تمرکز جمعیت را دارد ؟
</nl>
<syn lang="en">
(S کدام شهر ایالات متحده بیشترین تمرکز جمعیت را دارد ؟)
</syn>
<augsyn lang="en">
(S Which US-[City:2] city-[City:2] has-[City:1] the highest-[City:1] population-[City:1] density-[City:1])
</augsyn>
<mrl lang="geo-funql">
answer(largest_one(density_1(city(all))))
</mrl>
<mrl lang="geo-prolog">
answer(A,largest(B,(city(A),density(A,B))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ largest_one ( density_1 ( *n:City ) ) }) </node>
<node id="2"> *n:City -> ({ city ( all ) }) </node>
</mrl-parse>
</example>

</examples>